{"id":"args.src.parser","name":"package:args/src/parser.dart","children":[{"isFinal":true,"id":"_LONG_OPT","name":"_LONG_OPT","kind":"variable","isPrivate":true,"line":"11"},{"isFinal":true,"id":"_ABBR_OPT","name":"_ABBR_OPT","kind":"variable","isPrivate":true,"line":"10"},{"isFinal":true,"id":"_SOLO_OPT","name":"_SOLO_OPT","kind":"variable","isPrivate":true,"line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Parser","name":"Parser","children":[{"returnType":{"name":"ArgResults","refId":"args/ArgResults"},"id":"parse0()","name":"parse","kind":"method","comment":"Parses the arguments. This can only be called once. ","line":"46"},{"returnType":{"name":"void","refId":"void"},"id":"readNextArgAsValue1()","name":"readNextArgAsValue","children":[{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"}],"kind":"method","comment":"\nPulls the value for [option] from the second argument in [args]. Validates\nthat there is a valid value there.\n","line":"107"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseSoloOption0()","name":"parseSoloOption","kind":"method","comment":"\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n","line":"126"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseAbbreviation1()","name":"parseAbbreviation","children":[{"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"id":"innermostCommand","name":"innermostCommand","kind":"param"}],"kind":"method","comment":"\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n","line":"154"},{"returnType":{"name":"void","refId":"void"},"id":"parseShortFlag1()","name":"parseShortFlag","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"c","name":"c","kind":"param"}],"kind":"method","line":"193"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"parseLongOption0()","name":"parseLongOption","kind":"method","comment":"\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n","line":"215"},{"id":"validate2()","name":"validate","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"condition","name":"condition","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n","line":"263"},{"id":"setOption3()","name":"setOption","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"id":"results","name":"results","kind":"param"},{"ref":{"name":"Option","refId":"args/Option"},"id":"option","name":"option","kind":"param"},{"id":"value","name":"value","kind":"param"}],"kind":"method","comment":"Validates and stores [value] as the value for [option]. ","line":"268"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"current","name":"current","kind":"property","comment":"The current argument being parsed. ","line":"43"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"id":"commandName","name":"commandName","kind":"variable","line":"23"},{"isFinal":true,"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"id":"parent","name":"parent","kind":"variable","line":"29"},{"isFinal":true,"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"grammar","name":"grammar","kind":"variable","line":"32"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"args","name":"args","kind":"variable","line":"35"},{"isFinal":true,"ref":{"name":"Map","refId":"dart.core/Map"},"id":"results","name":"results","kind":"variable","line":"38"},{"id":"Parser4()","name":"Parser","children":[{"initializedField":{"name":"commandName","refId":"args.src.parser/Parser/commandName"},"ref":{"name":"String","refId":"dart.core/String"},"id":"commandName","name":"commandName","kind":"param"},{"initializedField":{"name":"grammar","refId":"args.src.parser/Parser/grammar"},"ref":{"name":"ArgParser","refId":"args/ArgParser"},"id":"grammar","name":"grammar","kind":"param"},{"initializedField":{"name":"args","refId":"args.src.parser/Parser/args"},"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"args","name":"args","kind":"param"},{"initializedField":{"name":"parent","refId":"args.src.parser/Parser/parent"},"ref":{"name":"Parser","refId":"args.src.parser/Parser"},"isOptional":true,"id":"parent","name":"parent","kind":"param"}],"kind":"constructor","line":"40"}],"kind":"class","comment":"\nThe actual parsing class. Unlike [ArgParser] which is really more an \"arg\ngrammar\", this is the class that does the parsing and holds the mutable\nstate required during a parse.\n","line":"18"}],"uri":"package:args/src/parser.dart","kind":"library","line":"5"}