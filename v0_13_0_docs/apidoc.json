[
  {
    "kind": "library",
    "comment": "\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Defining commands ##\n\nIn addition to *options*, you can also define *commands*. A command is a\nnamed argument that has its own set of options. For example, when you run:\n\n    $ git commit -a\n\nThe executable is `git`, the command is `commit`, and the `-a` option is an\noption passed to the command. You can add a command like so:\n\n    var parser = new ArgParser();\n    var command = parser.addCommand(\"commit\");\n    command.addFlag('all', abbr: 'a');\n\nIt returns another [ArgParser] which you can use to define options and\nsubcommands on that command. When an argument list is parsed, you can then\ndetermine which command was entered and what options were provided for it.\n\n    var results = parser.parse(['commit', '-a']);\n    print(results.command.name); // \"commit\"\n    print(results.command['a']); // true\n\n## Displaying usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n",
    "name": "args",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n",
        "name": "ArgResults",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Creates a new [ArgResults]. ",
            "name": "ArgResults",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "_options",
                "id": "_options"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "ArgResults",
                  "refId": "ArgResults"
                },
                "kind": "param",
                "name": "command",
                "id": "command"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "rest",
                "id": "rest"
              }
            ],
            "id": "ArgResults4()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Gets the parsed command-line option named [name]. ",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "[]1()"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "comment": "Get the names of the options as a [Collection]. ",
            "name": "options",
            "id": "options0()"
          },
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "comment": "Get the names of the options as a [Collection]. ",
            "name": "options",
            "id": "options"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "property",
            "name": "_options",
            "id": "_options"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "property",
            "name": "command",
            "id": "command"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "rest",
            "id": "rest"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Creates a new [ArgResults]. ",
            "name": "ArgResults",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "_options",
                "id": "_options"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "ArgResults",
                  "refId": "ArgResults"
                },
                "kind": "param",
                "name": "command",
                "id": "command"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "rest",
                "id": "rest"
              }
            ],
            "id": "ArgResults4()"
          }
        ],
        "id": "ArgResults"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA command-line option. Includes both flags and options which take a value.\n",
        "name": "Option",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Option",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbreviation",
                "id": "abbreviation"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "defaultValue",
                "id": "defaultValue"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "isFlag",
                "id": "isFlag"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ],
            "id": "Option10()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "abbreviation",
            "id": "abbreviation"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "allowed",
            "id": "allowed"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "defaultValue",
            "id": "defaultValue"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "property",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "help",
            "id": "help"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "allowedHelp",
            "id": "allowedHelp"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isFlag",
            "id": "isFlag"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "negatable",
            "id": "negatable"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "allowMultiple",
            "id": "allowMultiple"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Option",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbreviation",
                "id": "abbreviation"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "defaultValue",
                "id": "defaultValue"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "isFlag",
                "id": "isFlag"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ],
            "id": "Option10()"
          }
        ],
        "id": "Option"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n",
        "name": "ArgParser",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Creates a new ArgParser. ",
            "name": "ArgParser",
            "id": "ArgParser0()"
          },
          {
            "returnType": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "kind": "method",
            "comment": "\nDefines a command. A command is a named argument which may in turn\ndefine its own options and subcommands. Returns an [ArgParser] that can\nbe used to define the command's options.\n",
            "name": "addCommand",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "addCommand1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n",
            "name": "addFlag",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "isOptional": true,
                "kind": "param",
                "name": "callback",
                "id": "callback"
              }
            ],
            "id": "addFlag6()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n",
            "name": "addOption",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "isOptional": true,
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ],
            "id": "addOption8()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addOption",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "help",
                "id": "help"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "allowedHelp",
                "id": "allowedHelp"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "defaultsTo",
                "id": "defaultsTo"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "isFlag",
                "id": "isFlag"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "negatable",
                "id": "negatable"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowMultiple",
                "id": "allowMultiple"
              }
            ],
            "id": "_addOption10()"
          },
          {
            "returnType": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "method",
            "comment": "\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n",
            "name": "parse",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "parse1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n",
            "name": "getUsage",
            "id": "getUsage0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n",
            "name": "getDefault",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "id": "getDefault1()"
          },
          {
            "returnType": {
              "name": "Option",
              "refId": "Option"
            },
            "kind": "method",
            "comment": "\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n",
            "name": "findByAbbreviation",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "abbr",
                "id": "abbr"
              }
            ],
            "id": "findByAbbreviation1()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Option",
                  "refId": "Option"
                }
              ]
            },
            "kind": "property",
            "name": "options",
            "id": "options"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "ArgParser",
                  "refId": "ArgParser"
                }
              ]
            },
            "kind": "property",
            "name": "commands",
            "id": "commands"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Creates a new ArgParser. ",
            "name": "ArgParser",
            "id": "ArgParser0()"
          }
        ],
        "id": "ArgParser"
      }
    ],
    "id": "package:args/args.dart"
  },
  {
    "kind": "library",
    "name": "args.src.parser",
    "children": [
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_LONG_OPT",
        "id": "_LONG_OPT"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_ABBR_OPT",
        "id": "_ABBR_OPT"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_SOLO_OPT",
        "id": "_SOLO_OPT"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe actual parsing class. Unlike [ArgParser] which is really more an \"arg\ngrammar\", this is the class that does the parsing and holds the mutable\nstate required during a parse.\n",
        "name": "Parser",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Parser",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "commandName",
                "id": "commandName"
              },
              {
                "ref": {
                  "name": "ArgParser",
                  "refId": "ArgParser"
                },
                "kind": "param",
                "name": "grammar",
                "id": "grammar"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "Parser",
                  "refId": "Parser"
                },
                "isOptional": true,
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "Parser4()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "The current argument being parsed. ",
            "name": "current",
            "id": "current0()"
          },
          {
            "returnType": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "method",
            "comment": "Parses the arguments. This can only be called once. ",
            "name": "parse",
            "id": "parse0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nPulls the value for [option] from the second argument in [args]. Validates\nthat there is a valid value there.\n",
            "name": "readNextArgAsValue",
            "children": [
              {
                "ref": {
                  "name": "Option",
                  "refId": "Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "id": "readNextArgAsValue1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nTries to parse the current argument as a \"solo\" option, which is a single\nhyphen followed by a single letter. We treat this differently than\ncollapsed abbreviations (like \"-abc\") to handle the possible value that\nmay follow it.\n",
            "name": "parseSoloOption",
            "id": "parseSoloOption0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nTries to parse the current argument as a series of collapsed abbreviations\n(like \"-abc\") or a single abbreviation with the value directly attached\nto it (like \"-mrelease\").\n",
            "name": "parseAbbreviation",
            "children": [
              {
                "ref": {
                  "name": "Parser",
                  "refId": "Parser"
                },
                "kind": "param",
                "name": "innermostCommand",
                "id": "innermostCommand"
              }
            ],
            "id": "parseAbbreviation1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "parseShortFlag",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              }
            ],
            "id": "parseShortFlag1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nTries to parse the current argument as a long-form named option, which\nmay include a value like \"--mode=release\" or \"--mode release\".\n",
            "name": "parseLongOption",
            "id": "parseLongOption0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCalled during parsing to validate the arguments. Throws a\n[FormatException] if [condition] is `false`.\n",
            "name": "validate",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "condition",
                "id": "condition"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "validate2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Validates and stores [value] as the value for [option]. ",
            "name": "setOption",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              },
              {
                "ref": {
                  "name": "Option",
                  "refId": "Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setOption3()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "comment": "The current argument being parsed. ",
            "name": "current",
            "id": "current"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "commandName",
            "id": "commandName"
          },
          {
            "ref": {
              "name": "Parser",
              "refId": "Parser"
            },
            "kind": "property",
            "name": "parent",
            "id": "parent"
          },
          {
            "ref": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "kind": "property",
            "name": "grammar",
            "id": "grammar"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "args",
            "id": "args"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "property",
            "name": "results",
            "id": "results"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Parser",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "commandName",
                "id": "commandName"
              },
              {
                "ref": {
                  "name": "ArgParser",
                  "refId": "ArgParser"
                },
                "kind": "param",
                "name": "grammar",
                "id": "grammar"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "Parser",
                  "refId": "Parser"
                },
                "isOptional": true,
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "Parser4()"
          }
        ],
        "id": "Parser"
      }
    ],
    "id": "package:args/src/parser.dart"
  },
  {
    "kind": "library",
    "name": "args.src.usage",
    "children": [
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "comment": "Pads [source] to [length] by adding spaces at the end. ",
        "name": "padRight",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "source",
            "id": "source"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "length",
            "id": "length"
          }
        ],
        "id": "padRight2()"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nTakes an [ArgParser] and generates a string of usage (i.e. help) text for its\ndefined options. Internally, it works like a tabular printer. The output is\ndivided into three horizontal columns, like so:\n\n    -h, --help  Prints the usage information\n    |  |        |                                 |\n\nIt builds the usage text up one column at a time and handles padding with\nspaces and wrapping to the next line to keep the cells correctly lined up.\n",
        "name": "Usage",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Usage",
            "children": [
              {
                "ref": {
                  "name": "ArgParser",
                  "refId": "ArgParser"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "Usage1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n",
            "name": "generate",
            "id": "generate0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getAbbreviation",
            "children": [
              {
                "ref": {
                  "name": "Option",
                  "refId": "Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "id": "getAbbreviation1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getLongOption",
            "children": [
              {
                "ref": {
                  "name": "Option",
                  "refId": "Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "id": "getLongOption1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getAllowedTitle",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "allowed",
                "id": "allowed"
              }
            ],
            "id": "getAllowedTitle1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "calculateColumnWidths",
            "id": "calculateColumnWidths0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "newline",
            "id": "newline0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "write",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "column",
                "id": "column"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "write2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "writeLine",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "column",
                "id": "column"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "writeLine2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "buildAllowedList",
            "children": [
              {
                "ref": {
                  "name": "Option",
                  "refId": "Option"
                },
                "kind": "param",
                "name": "option",
                "id": "option"
              }
            ],
            "id": "buildAllowedList1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NUM_COLUMNS",
            "id": "NUM_COLUMNS"
          },
          {
            "ref": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "kind": "property",
            "name": "args",
            "id": "args"
          },
          {
            "ref": {
              "name": "StringBuffer",
              "refId": "StringBuffer"
            },
            "kind": "property",
            "name": "buffer",
            "id": "buffer"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "currentColumn",
            "id": "currentColumn"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "columnWidths",
            "id": "columnWidths"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "numHelpLines",
            "id": "numHelpLines"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "newlinesNeeded",
            "id": "newlinesNeeded"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Usage",
            "children": [
              {
                "ref": {
                  "name": "ArgParser",
                  "refId": "ArgParser"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "Usage1()"
          }
        ],
        "id": "Usage"
      }
    ],
    "id": "package:args/src/usage.dart"
  },
  {
    "kind": "library",
    "name": "bot",
    "children": [
      {
        "returnType": {
          "name": "Random",
          "refId": "Random"
        },
        "kind": "method",
        "name": "rnd",
        "id": "rnd0()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nPerforms linear interpolation between values a and b. Returns the value\nbetween a and b proportional to x (when x is between 0 and 1. When x is\noutside this range, the return value is a linear extrapolation).\n",
        "name": "lerp",
        "children": [
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "param",
            "name": "a",
            "id": "a"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "param",
            "name": "b",
            "id": "b"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "param",
            "name": "x",
            "id": "x"
          }
        ],
        "id": "lerp3()"
      },
      {
        "returnType": {
          "name": "bool",
          "refId": "bool"
        },
        "kind": "method",
        "name": "isValidNumber",
        "children": [
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "isValidNumber1()"
      },
      {
        "returnType": {
          "name": "NumberEnumerable",
          "refId": "NumberEnumerable"
        },
        "kind": "method",
        "name": "n$",
        "children": [
          {
            "ref": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "param",
            "name": "source",
            "id": "source"
          }
        ],
        "id": "n$1()"
      },
      {
        "returnType": {
          "name": "Enumerable",
          "refId": "Enumerable"
        },
        "kind": "method",
        "name": "$",
        "children": [
          {
            "ref": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "param",
            "name": "source",
            "id": "source"
          }
        ],
        "id": "$1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "_metaRequireArgumentNotNullOrEmpty",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "argName",
            "id": "argName"
          }
        ],
        "id": "_metaRequireArgumentNotNullOrEmpty1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "requireArgumentNotNullOrEmpty",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "argument",
            "id": "argument"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "argName",
            "id": "argName"
          }
        ],
        "id": "requireArgumentNotNullOrEmpty2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "requireArgumentNotNull",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "argument",
            "id": "argument"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "argName",
            "id": "argName"
          }
        ],
        "id": "requireArgumentNotNull2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "requireArgument",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "truth",
            "id": "truth"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "argName",
            "id": "argName"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "message",
            "id": "message"
          }
        ],
        "id": "requireArgument3()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "require",
        "children": [
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "truth",
            "id": "truth"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "message",
            "id": "message"
          }
        ],
        "id": "require2()"
      },
      {
        "ref": {
          "name": "Random",
          "refId": "Random"
        },
        "kind": "property",
        "name": "rnd",
        "id": "rnd"
      },
      {
        "ref": {
          "name": "Random",
          "refId": "Random"
        },
        "kind": "property",
        "name": "_botHelperRandom",
        "id": "_botHelperRandom"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "protected",
        "id": "protected"
      },
      {
        "superclass": {
          "name": "Coordinate",
          "refId": "Coordinate"
        },
        "kind": "class",
        "comment": "\nClass reperesenting a 2d vector.\n",
        "name": "Vector",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Vector",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Vector2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nComputes the length of this [Vector].\n",
            "name": "length",
            "id": "length0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "normal",
            "id": "normal0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the angle between the positive x-axis and the [Vector].\nAngle zero points in the +X direction, 90 degrees points in the +Y\ndirection (down) and from there we grow clockwise.\n",
            "name": "angle",
            "id": "angle0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nAdds a [Coordinate] and returns the result as new [Vector].\n",
            "name": "+",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "+1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nMultiplies each dimensions by the provided magnitude and returns a new [Vector].\n",
            "name": "*",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "magnitude",
                "id": "magnitude"
              }
            ],
            "id": "*1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nMultiplies each dimensions by the provided magnitude and returns a new [Vector].\n",
            "name": "scale",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "magnitude",
                "id": "magnitude"
              }
            ],
            "id": "scale1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nComputes the dot product with the given [Vector].\n",
            "name": "dot",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "dot1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nComputes the cross product with the given [Vector].\n",
            "name": "cross",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "cross1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nComputes the angle between this and another [Vector].\nAngle zero points in the +X direction, 90 degrees points in the +Y\ndirection (down) and from there we grow clockwise.\n",
            "name": "getAngle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "getAngle1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "rotate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "rotate1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "rotateAroundPoint",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "axisPoint",
                "id": "axisPoint"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "rotateAroundPoint2()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nComputes the length of this [Vector].\n",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nReturns the angle between the positive x-axis and the [Vector].\nAngle zero points in the +X direction, 90 degrees points in the +Y\ndirection (down) and from there we grow clockwise.\n",
            "name": "angle",
            "id": "angle"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Vector",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Vector2()"
          }
        ],
        "id": "Vector"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TarjanCycleDetect",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TarjanCycleDetect._internal",
            "children": [
              {
                "ref": {
                  "name": "_TarjanList",
                  "refId": "_TarjanList"
                },
                "kind": "param",
                "name": "_list",
                "id": "_list"
              }
            ],
            "id": "TarjanCycleDetect._internal1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List"
                }
              ]
            },
            "kind": "method",
            "name": "getStronglyConnectedComponents",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "graph",
                "id": "graph"
              }
            ],
            "id": "getStronglyConnectedComponents1()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "TNode",
                      "refId": "TNode"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "_executeTarjan",
            "id": "_executeTarjan0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_tarjan",
            "children": [
              {
                "ref": {
                  "name": "_TarjanNode",
                  "refId": "_TarjanNode",
                  "arguments": [
                    {
                      "name": "TNode",
                      "refId": "TNode"
                    }
                  ]
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "_tarjan1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_index",
            "id": "_index"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "_TarjanNode",
                  "refId": "_TarjanNode"
                }
              ]
            },
            "kind": "property",
            "name": "_stack",
            "id": "_stack"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "TNode",
                      "refId": "TNode"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_scc",
            "id": "_scc"
          },
          {
            "ref": {
              "name": "_TarjanList",
              "refId": "_TarjanList"
            },
            "kind": "property",
            "name": "_list",
            "id": "_list"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TarjanCycleDetect._internal",
            "children": [
              {
                "ref": {
                  "name": "_TarjanList",
                  "refId": "_TarjanList"
                },
                "kind": "param",
                "name": "_list",
                "id": "_list"
              }
            ],
            "id": "TarjanCycleDetect._internal1()"
          }
        ],
        "id": "TarjanCycleDetect"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Size",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Size",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Size2()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the area of the size (width * height).\n",
            "name": "area",
            "id": "area0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the ratio of the size's width to its height.\n",
            "name": "aspectRatio",
            "id": "aspectRatio0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if this Size is the same size or smaller than the\n[target] size in both dimensions.\n",
            "name": "fitsInside",
            "children": [
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "target",
                "id": "target"
              }
            ],
            "id": "fitsInside1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the size has zero area, false if both dimensions\n    are non-zero numbers.\n",
            "name": "isEmpty",
            "id": "isEmpty0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the perimeter of the size (width + height) * 2.\n",
            "name": "perimeter",
            "id": "perimeter0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isValid",
            "id": "isValid0()"
          },
          {
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "comment": "\nMultiplies each dimensions by the provided magnitude and returns a new [Size].\n",
            "name": "scale",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "magnitude",
                "id": "magnitude"
              }
            ],
            "id": "scale1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "comment": "\nMultiplies each dimensions by the provided magnitude and returns a new [Size].\n",
            "name": "*",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "magnitude",
                "id": "magnitude"
              }
            ],
            "id": "*1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "toVector",
            "id": "toVector0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nReturns a nice string representing size.\nReturns in the form (50 x 73).\n",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nReturns the area of the size (width * height).\n",
            "name": "area",
            "id": "area"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nReturns the ratio of the size's width to its height.\n",
            "name": "aspectRatio",
            "id": "aspectRatio"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nReturns the perimeter of the size (width + height) * 2.\n",
            "name": "perimeter",
            "id": "perimeter"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isValid",
            "id": "isValid"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "width",
            "id": "width"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "height",
            "id": "height"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Size",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Size2()"
          }
        ],
        "id": "Size"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Coordinate",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Coordinate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Coordinate2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nComputes the distance to another [Coordinate].\n",
            "name": "getDistance",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "getDistance1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isValid",
            "id": "isValid0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nSubtract a [Coordinate] and returns the result as new [Vector].\n",
            "name": "-",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "-1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "+",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "+1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "toVector",
            "id": "toVector0()"
          },
          {
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "toSize",
            "id": "toSize0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "difference",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "difference2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "toJson",
            "id": "toJson0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isValid",
            "id": "isValid"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "y",
            "id": "y"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Coordinate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Coordinate2()"
          }
        ],
        "id": "Coordinate"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "BungeeNum",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BungeeNum",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "target",
                "id": "target"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "current",
                "id": "current"
              }
            ],
            "id": "BungeeNum2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "target",
            "id": "target0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "target=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "target=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "current",
            "id": "current0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "current=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "current=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "target",
            "id": "target"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "current",
            "id": "current"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_target",
            "id": "_target"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_current",
            "id": "_current"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_velocity",
            "id": "_velocity"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BungeeNum",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "target",
                "id": "target"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "current",
                "id": "current"
              }
            ],
            "id": "BungeeNum2()"
          }
        ],
        "id": "BungeeNum"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Box",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Box",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "left",
                "id": "left"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "top",
                "id": "top"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Box4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Box.fromCoordSize",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "topLeft",
                "id": "topLeft"
              },
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "size",
                "id": "size"
              }
            ],
            "id": "Box.fromCoordSize2()"
          },
          {
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "topLeft",
            "id": "topLeft0()"
          },
          {
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "size",
            "id": "size0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isValid",
            "id": "isValid0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "right",
            "id": "right0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "bottom",
            "id": "bottom0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "contains",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "contains1()"
          },
          {
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "constrain",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "constrain1()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                }
              ]
            },
            "kind": "method",
            "name": "getCorners",
            "id": "getCorners0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "topLeft",
            "id": "topLeft"
          },
          {
            "ref": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "property",
            "name": "size",
            "id": "size"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isValid",
            "id": "isValid"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "right",
            "id": "right"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "bottom",
            "id": "bottom"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "left",
            "id": "left"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "top",
            "id": "top"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "width",
            "id": "width"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "height",
            "id": "height"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Box",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "left",
                "id": "left"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "top",
                "id": "top"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Box4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Box.fromCoordSize",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "topLeft",
                "id": "topLeft"
              },
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "size",
                "id": "size"
              }
            ],
            "id": "Box.fromCoordSize2()"
          }
        ],
        "id": "Box"
      },
      {
        "interfaces": [
          {
            "name": "Cloneable",
            "refId": "Cloneable",
            "arguments": [
              {
                "name": "AffineTransform",
                "refId": "AffineTransform"
              }
            ]
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "AffineTransform",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AffineTransform",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleX",
                "id": "scaleX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearY",
                "id": "shearY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearX",
                "id": "shearX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleY",
                "id": "scaleY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateX",
                "id": "translateX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateY",
                "id": "translateY"
              }
            ],
            "id": "AffineTransform6()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AffineTransform.fromRotate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "theta",
                "id": "theta"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "AffineTransform.fromRotate3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AffineTransform.fromScale",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sx",
                "id": "sx"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sy",
                "id": "sy"
              }
            ],
            "id": "AffineTransform.fromScale2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AffineTransform.fromTranslat",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "AffineTransform.fromTranslat2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "scaleX",
            "id": "scaleX0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "scaleY",
            "id": "scaleY0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "translateX",
            "id": "translateX0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "translateY",
            "id": "translateY0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "translateVector",
            "id": "translateVector0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "shearX",
            "id": "shearX0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "shearY",
            "id": "shearY0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "determinant",
            "id": "determinant0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "updateValues",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateX",
                "id": "translateX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateY",
                "id": "translateY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleX",
                "id": "scaleX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleY",
                "id": "scaleY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearX",
                "id": "shearX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearY",
                "id": "shearY"
              }
            ],
            "id": "updateValues6()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isIdentity",
            "id": "isIdentity0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "scale",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "sx",
                "id": "sx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "sy",
                "id": "sy"
              }
            ],
            "id": "scale2()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "concatenate",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              }
            ],
            "id": "concatenate1()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "rotate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "theta",
                "id": "theta"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "rotate3()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "translate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "dx",
                "id": "dx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "dy",
                "id": "dy"
              }
            ],
            "id": "translate2()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "setToScale",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sx",
                "id": "sx"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sy",
                "id": "sy"
              }
            ],
            "id": "setToScale2()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "setToRotation",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "theta",
                "id": "theta"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "setToRotation3()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "setToTranslation",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "dx",
                "id": "dx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "dy",
                "id": "dy"
              }
            ],
            "id": "setToTranslation2()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "setFromTransfrom",
            "children": [
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              }
            ],
            "id": "setFromTransfrom1()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "setTransform",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m00",
                "id": "m00"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m10",
                "id": "m10"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m01",
                "id": "m01"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m11",
                "id": "m11"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m02",
                "id": "m02"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "m12",
                "id": "m12"
              }
            ],
            "id": "setTransform6()"
          },
          {
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "transformCoordinate",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "transformCoordinate1()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "createInverse",
            "id": "createInverse0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "lerpTx",
            "children": [
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "lerpTx2()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "clone",
            "id": "clone0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "scaleX",
            "id": "scaleX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "scaleY",
            "id": "scaleY"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "translateX",
            "id": "translateX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "translateY",
            "id": "translateY"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "translateVector",
            "id": "translateVector"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "shearX",
            "id": "shearX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "shearY",
            "id": "shearY"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "determinant",
            "id": "determinant"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isIdentity",
            "id": "isIdentity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_scX",
            "id": "_scX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_shY",
            "id": "_shY"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_shX",
            "id": "_shX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_scY",
            "id": "_scY"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_tX",
            "id": "_tX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_tY",
            "id": "_tY"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AffineTransform",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleX",
                "id": "scaleX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearY",
                "id": "shearY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shearX",
                "id": "shearX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "scaleY",
                "id": "scaleY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateX",
                "id": "translateX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "translateY",
                "id": "translateY"
              }
            ],
            "id": "AffineTransform6()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AffineTransform.fromRotate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "theta",
                "id": "theta"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "AffineTransform.fromRotate3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AffineTransform.fromScale",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sx",
                "id": "sx"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "sy",
                "id": "sy"
              }
            ],
            "id": "AffineTransform.fromScale2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AffineTransform.fromTranslat",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "AffineTransform.fromTranslat2()"
          }
        ],
        "id": "AffineTransform"
      },
      {
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "GlobalId",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "GlobalId._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "GlobalId._internal1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "GlobalId",
            "id": "GlobalId0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "compareTo",
            "children": [
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "compareTo1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_globalId",
            "id": "_globalId"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_hashCode",
            "id": "_hashCode"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "GlobalId._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "GlobalId._internal1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "GlobalId",
            "id": "GlobalId0()"
          }
        ],
        "id": "GlobalId"
      },
      {
        "superclass": {
          "name": "DetailedArgumentError",
          "refId": "DetailedArgumentError"
        },
        "kind": "class",
        "name": "NullArgumentError",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "NullArgumentError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "argument",
                "id": "argument"
              }
            ],
            "id": "NullArgumentError1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "NullArgumentError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "argument",
                "id": "argument"
              }
            ],
            "id": "NullArgumentError1()"
          }
        ],
        "id": "NullArgumentError"
      },
      {
        "interfaces": [
          {
            "name": "Exception",
            "refId": "Exception"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "InvalidOperationError",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "InvalidOperationError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "InvalidOperationError1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "InvalidOperationError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "InvalidOperationError1()"
          }
        ],
        "id": "InvalidOperationError"
      },
      {
        "interfaces": [
          {
            "name": "ArgumentError",
            "refId": "ArgumentError"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DetailedArgumentError",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DetailedArgumentError",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "argument",
                "id": "argument"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "details",
                "id": "details"
              }
            ],
            "id": "DetailedArgumentError2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "message",
            "id": "message0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "argument",
            "id": "argument"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "details",
            "id": "details"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DetailedArgumentError",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "argument",
                "id": "argument"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "details",
                "id": "details"
              }
            ],
            "id": "DetailedArgumentError2()"
          }
        ],
        "id": "DetailedArgumentError"
      },
      {
        "interfaces": [
          {
            "name": "EventRoot",
            "refId": "EventRoot",
            "arguments": [
              {
                "name": "T",
                "refId": "T"
              }
            ]
          }
        ],
        "superclass": {
          "name": "DisposableImpl",
          "refId": "DisposableImpl"
        },
        "kind": "class",
        "name": "EventHandle",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fireEvent",
            "children": [
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "fireEvent1()"
          },
          {
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "comment": "\n_I'm not a huge fan of returning a [GlobalId] but at the moment\nfunctions don't have a simple model for identity. [GlobalId] allows\nreliable removal of an added handler._\n\nRelated dart bug [167](http://code.google.com/p/dart/issues/detail?id=167)\n",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              }
            ],
            "id": "remove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "ref": {
              "name": "HashMap",
              "refId": "HashMap",
              "arguments": [
                {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                {
                  "name": "Action1",
                  "refId": "Action1"
                }
              ]
            },
            "kind": "property",
            "name": "_handlers",
            "id": "_handlers"
          }
        ],
        "id": "EventHandle"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "EventArgs",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "EventArgs._empty",
            "id": "EventArgs._empty0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "EventArgs",
            "id": "EventArgs0()"
          },
          {
            "ref": {
              "name": "EventArgs",
              "refId": "EventArgs"
            },
            "isStatic": true,
            "kind": "property",
            "name": "empty",
            "id": "empty"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "EventArgs._empty",
            "id": "EventArgs._empty0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "EventArgs",
            "id": "EventArgs0()"
          }
        ],
        "id": "EventArgs"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "EventRoot",
        "children": [
          {
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              }
            ],
            "id": "remove1()"
          }
        ],
        "id": "EventRoot"
      },
      {
        "superclass": {
          "name": "EventArgs",
          "refId": "EventArgs"
        },
        "kind": "class",
        "name": "CancelableEventArgs",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isCanceled",
            "id": "isCanceled0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "cancel",
            "id": "cancel0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isCanceled",
            "id": "isCanceled"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_canceled",
            "id": "_canceled"
          }
        ],
        "id": "CancelableEventArgs"
      },
      {
        "interfaces": [
          {
            "name": "Disposable",
            "refId": "Disposable"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DisposableImpl",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "dispose",
            "id": "dispose0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "validateNotDisposed",
            "id": "validateNotDisposed0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isDisposed",
            "id": "isDisposed0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDo not call this method directly. Call [dispose] instead.\nSubclasses should override this method to implement [Disposable] behavior.\n",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isDisposed",
            "id": "isDisposed"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_disposed",
            "id": "_disposed"
          }
        ],
        "id": "DisposableImpl"
      },
      {
        "interfaces": [
          {
            "name": "StateError",
            "refId": "StateError"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DisposedError",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DisposedError",
            "id": "DisposedError0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DisposedError",
            "id": "DisposedError0()"
          }
        ],
        "id": "DisposedError"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Disposable",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "dispose",
            "id": "dispose0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isDisposed",
            "id": "isDisposed0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isDisposed",
            "id": "isDisposed"
          }
        ],
        "id": "Disposable"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "RgbColor",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RgbColor._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "RgbColor._internal3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RgbColor",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "RgbColor3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RgbColor.fromHex",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "hexColor",
                "id": "hexColor"
              }
            ],
            "id": "RgbColor.fromHex1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toHex",
            "id": "toHex0()"
          },
          {
            "returnType": {
              "name": "HslColor",
              "refId": "HslColor"
            },
            "kind": "method",
            "name": "toHsl",
            "id": "toHsl0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "RgbColor",
                  "refId": "RgbColor"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_validateComponent",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "_validateComponent2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_prependZeroIfNecessaryHelper",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "hex",
                "id": "hex"
              }
            ],
            "id": "_prependZeroIfNecessaryHelper1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_normalizeHex",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "hexColor",
                "id": "hexColor"
              }
            ],
            "id": "_normalizeHex1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_isValidHexColor",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "id": "_isValidHexColor1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "r",
            "id": "r"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "g",
            "id": "g"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "b",
            "id": "b"
          },
          {
            "ref": {
              "name": "RegExp",
              "refId": "RegExp"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_validHexColorRe",
            "id": "_validHexColorRe"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RgbColor._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "RgbColor._internal3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RgbColor",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "RgbColor3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RgbColor.fromHex",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "hexColor",
                "id": "hexColor"
              }
            ],
            "id": "RgbColor.fromHex1()"
          }
        ],
        "id": "RgbColor"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "HuslConverter",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "HUSLtoRGB",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "l",
                "id": "l"
              }
            ],
            "id": "HUSLtoRGB3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "RGBtoHUSL",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "RGBtoHUSL3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "m",
            "id": "m0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "m_inv",
            "id": "m_inv0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_maxChroma",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "L",
                "id": "L"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "H",
                "id": "H"
              }
            ],
            "id": "_maxChroma2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_dotProduct",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "_dotProduct2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_round",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "number",
                "id": "number"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "places",
                "id": "places"
              }
            ],
            "id": "_round2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_f",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "_f1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_f_inv",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "_f_inv1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_fromLinear",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              }
            ],
            "id": "_fromLinear1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_toLinear",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              }
            ],
            "id": "_toLinear1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_rgbPrepare",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_rgbPrepare1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_XYZ_RGB",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_XYZ_RGB1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_RGB_XYZ",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_RGB_XYZ1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_XYZ_LUV",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_XYZ_LUV1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_LUV_XYZ",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_LUV_XYZ1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_LUV_LCH",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_LUV_LCH1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_LCH_LUV",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_LCH_LUV1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_HUSL_LCH",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_HUSL_LCH1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "method",
            "name": "_LCH_HUSL",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                },
                "kind": "param",
                "name": "tuple",
                "id": "tuple"
              }
            ],
            "id": "_LCH_HUSL1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "m",
            "id": "m"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "num",
                      "refId": "num"
                    }
                  ]
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "m_inv",
            "id": "m_inv"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "refX",
            "id": "refX"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "refY",
            "id": "refY"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "refZ",
            "id": "refZ"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "refU",
            "id": "refU"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "refV",
            "id": "refV"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "lab_e",
            "id": "lab_e"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "lab_k",
            "id": "lab_k"
          }
        ],
        "id": "HuslConverter"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "HslColor",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "HslColor._internal",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "l",
                "id": "l"
              }
            ],
            "id": "HslColor._internal3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "HslColor",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "l",
                "id": "l"
              }
            ],
            "id": "HslColor3()"
          },
          {
            "returnType": {
              "name": "RgbColor",
              "refId": "RgbColor"
            },
            "kind": "method",
            "name": "toRgb",
            "id": "toRgb0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "HslColor",
                  "refId": "HslColor"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "_hueToRgb",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "vH",
                "id": "vH"
              }
            ],
            "id": "_hueToRgb3()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "h",
            "id": "h"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "s",
            "id": "s"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "l",
            "id": "l"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "HslColor._internal",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "l",
                "id": "l"
              }
            ],
            "id": "HslColor._internal3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "HslColor",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "l",
                "id": "l"
              }
            ],
            "id": "HslColor3()"
          }
        ],
        "id": "HslColor"
      },
      {
        "superclass": {
          "name": "ListBase",
          "refId": "ListBase",
          "arguments": [
            {
              "name": "T",
              "refId": "T"
            }
          ]
        },
        "kind": "class",
        "name": "ReadOnlyCollection",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nWraps [source]. Changes to [source] will be reflected.\n",
            "name": "ReadOnlyCollection.wrap",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ReadOnlyCollection.wrap1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ReadOnlyCollection.empty",
            "id": "ReadOnlyCollection.empty0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCopies all of the elements from [source] into a new collection.\nAdd or removing items in source will not change the contents of the\nnew collection.\n_Note: this is not a **deep** copy._\n",
            "name": "ReadOnlyCollection",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ReadOnlyCollection1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nReturns the number of elements in this collection.\n",
            "name": "length",
            "id": "length0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "comment": "\nReturns the element at the given [index] in the list or throws\nan [IndexOutOfRangeException] if [index] is out of bounds.\n",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "[]1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nReturns the number of elements in this collection.\n",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "property",
            "name": "_items",
            "id": "_items"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nWraps [source]. Changes to [source] will be reflected.\n",
            "name": "ReadOnlyCollection.wrap",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ReadOnlyCollection.wrap1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ReadOnlyCollection.empty",
            "id": "ReadOnlyCollection.empty0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCopies all of the elements from [source] into a new collection.\nAdd or removing items in source will not change the contents of the\nnew collection.\n_Note: this is not a **deep** copy._\n",
            "name": "ReadOnlyCollection",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ReadOnlyCollection1()"
          }
        ],
        "id": "ReadOnlyCollection"
      },
      {
        "superclass": {
          "name": "Iterable",
          "refId": "Iterable",
          "arguments": [
            {
              "name": "T",
              "refId": "T"
            }
          ]
        },
        "kind": "class",
        "name": "NumberEnumerable",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "NumberEnumerable",
            "id": "NumberEnumerable0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "NumberEnumerable.from",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "NumberEnumerable.from1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "NumberEnumerable.fromRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "NumberEnumerable.fromRange2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "sum",
            "id": "sum0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "average",
            "id": "average0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "NumberEnumerable",
            "id": "NumberEnumerable0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "NumberEnumerable.from",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "NumberEnumerable.from1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "NumberEnumerable.fromRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "NumberEnumerable.fromRange2()"
          }
        ],
        "id": "NumberEnumerable"
      },
      {
        "interfaces": [
          {
            "name": "List",
            "refId": "List",
            "arguments": [
              {
                "name": "E",
                "refId": "E"
              }
            ]
          }
        ],
        "superclass": {
          "name": "Enumerable",
          "refId": "Enumerable",
          "arguments": [
            {
              "name": "E",
              "refId": "E"
            }
          ]
        },
        "kind": "class",
        "name": "ListBase",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ListBase",
            "id": "ListBase0()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "E",
                  "refId": "E"
                }
              ]
            },
            "kind": "method",
            "name": "getRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ],
            "id": "getRange2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "indexOf",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "id": "indexOf2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "lastIndexOf",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "id": "lastIndexOf2()"
          },
          {
            "returnType": {
              "name": "Iterator",
              "refId": "Iterator",
              "arguments": [
                {
                  "name": "E",
                  "refId": "E"
                }
              ]
            },
            "kind": "method",
            "name": "iterator",
            "id": "iterator0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              },
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "[]=2()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "length=",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "newLength",
                "id": "newLength"
              }
            ],
            "id": "length=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addLast",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "addLast1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAll",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "E",
                      "refId": "E"
                    }
                  ]
                },
                "kind": "param",
                "name": "iterable",
                "id": "iterable"
              }
            ],
            "id": "addAll1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "element",
                "id": "element"
              }
            ],
            "id": "remove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeAll",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "elements",
                "id": "elements"
              }
            ],
            "id": "removeAll1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "retainAll",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "elements",
                "id": "elements"
              }
            ],
            "id": "retainAll1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "retainMatching",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "test",
                "id": "test"
              }
            ],
            "id": "retainMatching1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeMatching",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "test",
                "id": "test"
              }
            ],
            "id": "removeMatching1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "sort",
            "children": [
              {
                "ref": {
                  "name": "Comparator",
                  "refId": "Comparator"
                },
                "isOptional": true,
                "kind": "param",
                "name": "compare",
                "id": "compare"
              }
            ],
            "id": "sort1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeAt",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "removeAt1()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "removeLast",
            "id": "removeLast0()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "E",
                  "refId": "E"
                }
              ]
            },
            "kind": "method",
            "name": "reversed",
            "id": "reversed0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "E",
                      "refId": "E"
                    }
                  ]
                },
                "kind": "param",
                "name": "from",
                "id": "from"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "startFrom",
                "id": "startFrom"
              }
            ],
            "id": "setRange4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              }
            ],
            "id": "removeRange2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "insertRange",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "length",
                "id": "length"
              },
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              }
            ],
            "id": "insertRange3()"
          },
          {
            "ref": {
              "name": "Iterator",
              "refId": "Iterator",
              "arguments": [
                {
                  "name": "E",
                  "refId": "E"
                }
              ]
            },
            "kind": "property",
            "name": "iterator",
            "id": "iterator"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "E",
                  "refId": "E"
                }
              ]
            },
            "kind": "property",
            "name": "reversed",
            "id": "reversed"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ListBase",
            "id": "ListBase0()"
          }
        ],
        "id": "ListBase"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Grouping",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Grouping",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "V",
                      "refId": "V"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "Grouping2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns whether this map contains the given [key].\n",
            "name": "containsKey",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "containsKey1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "V",
                  "refId": "V"
                }
              ]
            },
            "kind": "method",
            "comment": "\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse containsKey to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "K",
                  "refId": "K"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "[]1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApplies [f] to each {key, value} pair of the map.\n",
            "name": "forEach",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "forEach1()"
          },
          {
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "K",
                  "refId": "K"
                }
              ]
            },
            "kind": "method",
            "comment": "\nReturns a collection containing all the keys in the map.\n",
            "name": "getKeys",
            "id": "getKeys0()"
          },
          {
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "V",
                  "refId": "V"
                }
              ]
            },
            "kind": "method",
            "name": "getValues",
            "id": "getValues0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nThe number of {key, value} pairs in the map.\n",
            "name": "length",
            "id": "length0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if there is no {key, value} pair in the map.\n",
            "name": "isEmpty",
            "id": "isEmpty0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nThe number of {key, value} pairs in the map.\n",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nReturns true if there is no {key, value} pair in the map.\n",
            "name": "isEmpty",
            "id": "isEmpty"
          },
          {
            "ref": {
              "name": "HashMap",
              "refId": "HashMap",
              "arguments": [
                {
                  "name": "K",
                  "refId": "K"
                },
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "V",
                      "refId": "V"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_values",
            "id": "_values"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Grouping",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "V",
                      "refId": "V"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "Grouping2()"
          }
        ],
        "id": "Grouping"
      },
      {
        "superclass": {
          "name": "Iterable",
          "refId": "Iterable",
          "arguments": [
            {
              "name": "T",
              "refId": "T"
            }
          ]
        },
        "kind": "class",
        "name": "Enumerable",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Enumerable",
            "id": "Enumerable0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Enumerable.fromIterable",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Enumerable.fromIterable1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n",
            "name": "some",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "some1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "count",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "count1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable"
            },
            "kind": "method",
            "name": "mappedBy",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "mappedBy1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable"
            },
            "kind": "method",
            "name": "map",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "map1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "where",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "where1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "exclude",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "items",
                "id": "items"
              }
            ],
            "id": "exclude1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable"
            },
            "kind": "method",
            "name": "selectMany",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "selectMany1()"
          },
          {
            "returnType": {
              "name": "Enumerable",
              "refId": "Enumerable",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "distinct",
            "children": [
              {
                "ref": {
                  "name": "Func2",
                  "refId": "Func2"
                },
                "isOptional": true,
                "kind": "param",
                "name": "comparer",
                "id": "comparer"
              }
            ],
            "id": "distinct1()"
          },
          {
            "returnType": {
              "name": "Grouping",
              "refId": "Grouping",
              "arguments": [
                {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "group",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "group1()"
          },
          {
            "returnType": {
              "name": "ReadOnlyCollection",
              "refId": "ReadOnlyCollection",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "toReadOnlyCollection",
            "id": "toReadOnlyCollection0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEachWithIndex",
            "children": [
              {
                "ref": {
                  "name": "Action2",
                  "refId": "Action2"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "forEachWithIndex1()"
          },
          {
            "returnType": {
              "name": "Set",
              "refId": "Set"
            },
            "kind": "method",
            "comment": "\nUse the [map] method then [toSet] instead.\n",
            "name": "toHashSet",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "toHashSet1()"
          },
          {
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "comment": "\nUse [toMap] instead.\n",
            "name": "toHashMap",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "valueFunc",
                "id": "valueFunc"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "toHashMap2()"
          },
          {
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "name": "toMap",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "valueFunc",
                "id": "valueFunc"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "toMap2()"
          },
          {
            "returnType": {
              "name": "NumberEnumerable",
              "refId": "NumberEnumerable"
            },
            "kind": "method",
            "name": "selectNumbers",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "selectNumbers1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Enumerable",
            "id": "Enumerable0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Enumerable.fromIterable",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Enumerable.fromIterable1()"
          }
        ],
        "id": "Enumerable"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "CollectionUtil",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "allUnique",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "items",
                "id": "items"
              }
            ],
            "id": "allUnique1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "method",
            "name": "selectMany",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "func",
                "id": "func"
              }
            ],
            "id": "selectMany2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "count",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "test",
                "id": "test"
              }
            ],
            "id": "count2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "method",
            "name": "exclude",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "itemsToExclude",
                "id": "itemsToExclude"
              }
            ],
            "id": "exclude2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "method",
            "name": "distinct",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func2",
                  "refId": "Func2"
                },
                "isOptional": true,
                "kind": "param",
                "name": "comparer",
                "id": "comparer"
              }
            ],
            "id": "distinct2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEachWithIndex",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Action2",
                  "refId": "Action2"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "forEachWithIndex2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "comment": "\nUse [toMap] instead.\n",
            "name": "toHashMap",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "valueFunc",
                "id": "valueFunc"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "toHashMap3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "name": "toMap",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "valueFunc",
                "id": "valueFunc"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "keyFunc",
                "id": "keyFunc"
              }
            ],
            "id": "toMap3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Set",
              "refId": "Set"
            },
            "kind": "method",
            "comment": "\nUse `Iterable.map(...).toSet()` instead.\n",
            "name": "toHashSet",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "toHashSet2()"
          }
        ],
        "id": "CollectionUtil"
      },
      {
        "superclass": {
          "name": "ListBase",
          "refId": "ListBase",
          "arguments": [
            {
              "name": "T",
              "refId": "T"
            }
          ]
        },
        "kind": "class",
        "name": "Array2d",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Array2d.readonlyFrom",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Array2d.readonlyFrom2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Array2d",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              }
            ],
            "id": "Array2d3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Array2d._skinny",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Array2d._skinny1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Array2d.wrap",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Array2d.wrap2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "[]1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "[]=",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "[]=2()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "rows",
            "id": "rows0()"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "get",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "get2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "set",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "set3()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "getAdjacent",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "getAdjacent2()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "method",
            "name": "getAdjacentIndices",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "getAdjacentIndices2()"
          },
          {
            "returnType": {
              "name": "Tuple",
              "refId": "Tuple",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                },
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "method",
            "name": "getCoordinate",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "getCoordinate1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "_getIndex",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "_getIndex2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "rows",
            "id": "rows"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "width",
            "id": "width"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "height",
            "id": "height"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "property",
            "name": "_source",
            "id": "_source"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Array2d.readonlyFrom",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Array2d.readonlyFrom2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Array2d",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialValue",
                "id": "initialValue"
              }
            ],
            "id": "Array2d3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Array2d._skinny",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "Array2d._skinny1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Array2d.wrap",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "Array2d.wrap2()"
          }
        ],
        "id": "Array2d"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Cloneable",
        "children": [
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "clone",
            "id": "clone0()"
          }
        ],
        "id": "Cloneable"
      },
      {
        "superclass": {
          "name": "Attachable",
          "refId": "Attachable"
        },
        "kind": "class",
        "name": "Property",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Property",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "isOptional": true,
                "kind": "param",
                "name": "defaultValue",
                "id": "defaultValue"
              }
            ],
            "id": "Property2()"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "get",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "ifAbsent",
                "id": "ifAbsent"
              }
            ],
            "id": "get2()"
          },
          {
            "returnType": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "method",
            "name": "getCore",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "ifAbsent",
                "id": "ifAbsent"
              }
            ],
            "id": "getCore2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "set",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "set2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              }
            ],
            "id": "clear1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isSet",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              }
            ],
            "id": "isSet1()"
          },
          {
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addHandler",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addHandler2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeHandler",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeHandler2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "isStatic": true,
            "kind": "property",
            "name": "Undefined",
            "id": "Undefined"
          },
          {
            "ref": {
              "name": "T",
              "refId": "T"
            },
            "kind": "property",
            "name": "defaultValue",
            "id": "defaultValue"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Property",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "isOptional": true,
                "kind": "param",
                "name": "defaultValue",
                "id": "defaultValue"
              }
            ],
            "id": "Property2()"
          }
        ],
        "id": "Property"
      },
      {
        "superclass": {
          "name": "Attachable",
          "refId": "Attachable"
        },
        "kind": "class",
        "name": "AttachedEvent",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AttachedEvent",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "AttachedEvent1()"
          },
          {
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addHandler",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addHandler2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeHandler",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeHandler2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fireEvent",
            "children": [
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "fireEvent2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AttachedEvent",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "AttachedEvent1()"
          }
        ],
        "id": "AttachedEvent"
      },
      {
        "superclass": {
          "name": "DisposableImpl",
          "refId": "DisposableImpl"
        },
        "kind": "class",
        "name": "AttachableObject",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "_addHandler",
            "children": [
              {
                "ref": {
                  "name": "Attachable",
                  "refId": "Attachable"
                },
                "kind": "param",
                "name": "property",
                "id": "property"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "watcher",
                "id": "watcher"
              }
            ],
            "id": "_addHandler2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_removeHandler",
            "children": [
              {
                "ref": {
                  "name": "Attachable",
                  "refId": "Attachable"
                },
                "kind": "param",
                "name": "property",
                "id": "property"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "_removeHandler2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_fireEvent",
            "children": [
              {
                "ref": {
                  "name": "Attachable",
                  "refId": "Attachable"
                },
                "kind": "param",
                "name": "attachable",
                "id": "attachable"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "_fireEvent2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_set",
            "children": [
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              },
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "_set2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_isSet",
            "children": [
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "_isSet1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_remove",
            "children": [
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "_remove1()"
          },
          {
            "returnType": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "method",
            "name": "_getValueOrUndefined",
            "children": [
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              },
              {
                "ref": {
                  "name": "AttachableObject",
                  "refId": "AttachableObject"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "ifAbsent",
                "id": "ifAbsent"
              }
            ],
            "id": "_getValueOrUndefined3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_fireChange",
            "children": [
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "_fireChange1()"
          },
          {
            "ref": {
              "name": "HashMap",
              "refId": "HashMap",
              "arguments": [
                {
                  "name": "Property",
                  "refId": "Property"
                },
                {
                  "name": "Object",
                  "refId": "Object"
                }
              ]
            },
            "kind": "property",
            "name": "_propertyValues",
            "id": "_propertyValues"
          },
          {
            "ref": {
              "name": "HashMap",
              "refId": "HashMap",
              "arguments": [
                {
                  "name": "Attachable",
                  "refId": "Attachable"
                },
                {
                  "name": "EventHandle",
                  "refId": "EventHandle"
                }
              ]
            },
            "kind": "property",
            "name": "_eventHandlers",
            "id": "_eventHandlers"
          }
        ],
        "id": "AttachableObject"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Attachable",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Attachable",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Attachable1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Attachable",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Attachable1()"
          }
        ],
        "id": "Attachable"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Util",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "getHashCode",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "getHashCode1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "splitLines",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "splitLines1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nReturns a [String] with a length that is at least [minWidth].\nIf [text] has a length less than [minWidth], the return value\nwill be a string with spaces inserted before [text].\n",
            "name": "padLeft",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "minWidth",
                "id": "minWidth"
              }
            ],
            "id": "padLeft2()"
          }
        ],
        "id": "Util"
      },
      {
        "kind": "typedef",
        "name": "Func2",
        "id": "Func2"
      },
      {
        "kind": "typedef",
        "name": "Func1",
        "id": "Func1"
      },
      {
        "kind": "typedef",
        "name": "Func",
        "id": "Func"
      },
      {
        "kind": "typedef",
        "name": "Action3",
        "id": "Action3"
      },
      {
        "kind": "typedef",
        "name": "Action2",
        "id": "Action2"
      },
      {
        "kind": "typedef",
        "name": "Action1",
        "id": "Action1"
      },
      {
        "kind": "typedef",
        "name": "Action0",
        "id": "Action0"
      },
      {
        "superclass": {
          "name": "Tuple",
          "refId": "Tuple",
          "arguments": [
            {
              "name": "T1",
              "refId": "T1"
            },
            {
              "name": "T2",
              "refId": "T2"
            }
          ]
        },
        "kind": "class",
        "name": "Tuple3",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Tuple3",
            "children": [
              {
                "ref": {
                  "name": "T1",
                  "refId": "T1"
                },
                "kind": "param",
                "name": "param1",
                "id": "param1"
              },
              {
                "ref": {
                  "name": "T2",
                  "refId": "T2"
                },
                "kind": "param",
                "name": "param2",
                "id": "param2"
              },
              {
                "ref": {
                  "name": "T3",
                  "refId": "T3"
                },
                "kind": "param",
                "name": "item3",
                "id": "item3"
              }
            ],
            "id": "Tuple33()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Tuple3",
                  "refId": "Tuple3",
                  "arguments": [
                    {
                      "name": "T1",
                      "refId": "T1"
                    },
                    {
                      "name": "T2",
                      "refId": "T2"
                    },
                    {
                      "name": "T3",
                      "refId": "T3"
                    }
                  ]
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "T3",
              "refId": "T3"
            },
            "kind": "property",
            "name": "item3",
            "id": "item3"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Tuple3",
            "children": [
              {
                "ref": {
                  "name": "T1",
                  "refId": "T1"
                },
                "kind": "param",
                "name": "param1",
                "id": "param1"
              },
              {
                "ref": {
                  "name": "T2",
                  "refId": "T2"
                },
                "kind": "param",
                "name": "param2",
                "id": "param2"
              },
              {
                "ref": {
                  "name": "T3",
                  "refId": "T3"
                },
                "kind": "param",
                "name": "item3",
                "id": "item3"
              }
            ],
            "id": "Tuple33()"
          }
        ],
        "id": "Tuple3"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Tuple",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Tuple",
            "children": [
              {
                "ref": {
                  "name": "T1",
                  "refId": "T1"
                },
                "kind": "param",
                "name": "item1",
                "id": "item1"
              },
              {
                "ref": {
                  "name": "T2",
                  "refId": "T2"
                },
                "kind": "param",
                "name": "item2",
                "id": "item2"
              }
            ],
            "id": "Tuple2()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Tuple",
                  "refId": "Tuple",
                  "arguments": [
                    {
                      "name": "T1",
                      "refId": "T1"
                    },
                    {
                      "name": "T2",
                      "refId": "T2"
                    }
                  ]
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "toJson",
            "id": "toJson0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "T1",
              "refId": "T1"
            },
            "kind": "property",
            "name": "item1",
            "id": "item1"
          },
          {
            "ref": {
              "name": "T2",
              "refId": "T2"
            },
            "kind": "property",
            "name": "item2",
            "id": "item2"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Tuple",
            "children": [
              {
                "ref": {
                  "name": "T1",
                  "refId": "T1"
                },
                "kind": "param",
                "name": "item1",
                "id": "item1"
              },
              {
                "ref": {
                  "name": "T2",
                  "refId": "T2"
                },
                "kind": "param",
                "name": "item2",
                "id": "item2"
              }
            ],
            "id": "Tuple2()"
          }
        ],
        "id": "Tuple"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "StringLineReader",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "StringLineReader",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "StringLineReader1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "position",
            "id": "position0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "readNextLine",
            "id": "readNextLine0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "readToEnd",
            "id": "readToEnd0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "position",
            "id": "position"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "source",
            "id": "source"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_position",
            "id": "_position"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "StringLineReader",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "StringLineReader1()"
          }
        ],
        "id": "StringLineReader"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot.dart"
  },
  {
    "kind": "library",
    "name": "bot_async",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "SendValuePort",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SendValuePort",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "_func",
                "id": "_func"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inputDeserializer",
                "id": "inputDeserializer"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "outputSerializer",
                "id": "outputSerializer"
              }
            ],
            "id": "SendValuePort3()"
          },
          {
            "returnType": {
              "name": "TInput",
              "refId": "TInput"
            },
            "kind": "method",
            "name": "_deserialize",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "_deserialize1()"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "_func",
            "id": "_func"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "inputDeserializer",
            "id": "inputDeserializer"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "outputSerializer",
            "id": "outputSerializer"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SendValuePort",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "_func",
                "id": "_func"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inputDeserializer",
                "id": "inputDeserializer"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "outputSerializer",
                "id": "outputSerializer"
              }
            ],
            "id": "SendValuePort3()"
          }
        ],
        "id": "SendValuePort"
      },
      {
        "superclass": {
          "name": "FutureValue",
          "refId": "FutureValue",
          "arguments": [
            {
              "name": "TInput",
              "refId": "TInput"
            },
            {
              "name": "TOutput",
              "refId": "TOutput"
            }
          ]
        },
        "kind": "class",
        "name": "SendPortValue",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SendPortValue",
            "children": [
              {
                "ref": {
                  "name": "SendPort",
                  "refId": "SendPort"
                },
                "kind": "param",
                "name": "_sendPort",
                "id": "_sendPort"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inputSerializer",
                "id": "inputSerializer"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "outputDeserializer",
                "id": "outputDeserializer"
              }
            ],
            "id": "SendPortValue3()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TOutput",
                  "refId": "TOutput"
                }
              ]
            },
            "kind": "method",
            "name": "getFuture",
            "children": [
              {
                "ref": {
                  "name": "TInput",
                  "refId": "TInput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "getFuture1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "__futureCompleted",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "__futureCompleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_sendValueResultCompleted",
            "children": [
              {
                "ref": {
                  "name": "FutureValueResult",
                  "refId": "FutureValueResult",
                  "arguments": [
                    {
                      "name": "TOutput",
                      "refId": "TOutput"
                    }
                  ]
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "_sendValueResultCompleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_complete",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "rawValue",
                "id": "rawValue"
              }
            ],
            "id": "_complete1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_completeException",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "exception",
                "id": "exception"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "stack",
                "id": "stack"
              }
            ],
            "id": "_completeException2()"
          },
          {
            "returnType": {
              "name": "TOutput",
              "refId": "TOutput"
            },
            "kind": "method",
            "name": "_deserializer",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "_deserializer1()"
          },
          {
            "ref": {
              "name": "SendPort",
              "refId": "SendPort"
            },
            "kind": "property",
            "name": "_sendPort",
            "id": "_sendPort"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "inputSerializer",
            "id": "inputSerializer"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "outputDeserializer",
            "id": "outputDeserializer"
          },
          {
            "ref": {
              "name": "Completer",
              "refId": "Completer",
              "arguments": [
                {
                  "name": "TOutput",
                  "refId": "TOutput"
                }
              ]
            },
            "kind": "property",
            "name": "_completer",
            "id": "_completer"
          },
          {
            "ref": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TOutput",
                  "refId": "TOutput"
                }
              ]
            },
            "kind": "property",
            "name": "_innerFuture",
            "id": "_innerFuture"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SendPortValue",
            "children": [
              {
                "ref": {
                  "name": "SendPort",
                  "refId": "SendPort"
                },
                "kind": "param",
                "name": "_sendPort",
                "id": "_sendPort"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inputSerializer",
                "id": "inputSerializer"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "outputDeserializer",
                "id": "outputDeserializer"
              }
            ],
            "id": "SendPortValue3()"
          }
        ],
        "id": "SendPortValue"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "FutureValueResult",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FutureValueResult",
            "children": [
              {
                "ref": {
                  "name": "TOutput",
                  "refId": "TOutput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "_outputSerializer",
                "id": "_outputSerializer"
              }
            ],
            "id": "FutureValueResult2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FutureValueResult.fromException",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "error",
                "id": "error"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "stackTrace",
                "id": "stackTrace"
              }
            ],
            "id": "FutureValueResult.fromException2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FutureValueResult.fromMap",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "FutureValueResult.fromMap1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isException",
            "id": "isException0()"
          },
          {
            "returnType": {
              "name": "Map",
              "refId": "Map"
            },
            "kind": "method",
            "name": "toMap",
            "id": "toMap0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isMyMap",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "isMyMap1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "FutureValueResult",
                  "refId": "FutureValueResult"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "_serialize",
            "children": [
              {
                "ref": {
                  "name": "TOutput",
                  "refId": "TOutput"
                },
                "kind": "param",
                "name": "output",
                "id": "output"
              }
            ],
            "id": "_serialize1()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isException",
            "id": "isException"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_valueKey",
            "id": "_valueKey"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_errorKey",
            "id": "_errorKey"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_stackTraceKey",
            "id": "_stackTraceKey"
          },
          {
            "ref": {
              "name": "TOutput",
              "refId": "TOutput"
            },
            "kind": "property",
            "name": "value",
            "id": "value"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "error",
            "id": "error"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "stackTrace",
            "id": "stackTrace"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "_outputSerializer",
            "id": "_outputSerializer"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FutureValueResult",
            "children": [
              {
                "ref": {
                  "name": "TOutput",
                  "refId": "TOutput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "_outputSerializer",
                "id": "_outputSerializer"
              }
            ],
            "id": "FutureValueResult2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FutureValueResult.fromException",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "error",
                "id": "error"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "stackTrace",
                "id": "stackTrace"
              }
            ],
            "id": "FutureValueResult.fromException2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FutureValueResult.fromMap",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "FutureValueResult.fromMap1()"
          }
        ],
        "id": "FutureValueResult"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "FutureValue",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FutureValue",
            "id": "FutureValue0()"
          },
          {
            "returnType": {
              "name": "TInput",
              "refId": "TInput"
            },
            "kind": "method",
            "name": "input",
            "id": "input0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "input=",
            "children": [
              {
                "ref": {
                  "name": "TInput",
                  "refId": "TInput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "input=1()"
          },
          {
            "returnType": {
              "name": "TOutput",
              "refId": "TOutput"
            },
            "kind": "method",
            "name": "output",
            "id": "output0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "outputChanged",
            "id": "outputChanged0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "inputChanged",
            "id": "inputChanged0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "method",
            "name": "error",
            "id": "error0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TOutput",
                  "refId": "TOutput"
                }
              ]
            },
            "kind": "method",
            "name": "getFuture",
            "children": [
              {
                "ref": {
                  "name": "TInput",
                  "refId": "TInput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "getFuture1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_startFuture",
            "id": "_startFuture0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_futureException",
            "children": [
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "exception",
                "id": "exception"
              }
            ],
            "id": "_futureException1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_futureCompleted",
            "children": [
              {
                "ref": {
                  "name": "TOutput",
                  "refId": "TOutput"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "_futureCompleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_cleanup",
            "id": "_cleanup0()"
          },
          {
            "ref": {
              "name": "TInput",
              "refId": "TInput"
            },
            "kind": "property",
            "name": "input",
            "id": "input"
          },
          {
            "ref": {
              "name": "TOutput",
              "refId": "TOutput"
            },
            "kind": "property",
            "name": "output",
            "id": "output"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "outputChanged",
            "id": "outputChanged"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "inputChanged",
            "id": "inputChanged"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "property",
            "name": "error",
            "id": "error"
          },
          {
            "ref": {
              "name": "TInput",
              "refId": "TInput"
            },
            "kind": "property",
            "name": "_input",
            "id": "_input"
          },
          {
            "ref": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TOutput",
                  "refId": "TOutput"
                }
              ]
            },
            "kind": "property",
            "name": "_future",
            "id": "_future"
          },
          {
            "ref": {
              "name": "TOutput",
              "refId": "TOutput"
            },
            "kind": "property",
            "name": "_output",
            "id": "_output"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_pending",
            "id": "_pending"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_outputChangedHandle",
            "id": "_outputChangedHandle"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_inputChangedHandle",
            "id": "_inputChangedHandle"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "Object",
                  "refId": "Object"
                }
              ]
            },
            "kind": "property",
            "name": "_errorHandle",
            "id": "_errorHandle"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FutureValue",
            "id": "FutureValue0()"
          }
        ],
        "id": "FutureValue"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_async.dart"
  },
  {
    "kind": "library",
    "name": "bot_git",
    "children": [
      {
        "kind": "typedef",
        "comment": "\nA method that populates a [TempDir] asynchronously.\n",
        "name": "PopulateTempDir",
        "id": "PopulateTempDir"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "GitDir",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "GitDir._raw",
            "children": [
              {
                "ref": {
                  "name": "Path",
                  "refId": "Path"
                },
                "kind": "param",
                "name": "_path",
                "id": "_path"
              },
              {
                "ref": {
                  "name": "Path",
                  "refId": "Path"
                },
                "isOptional": true,
                "kind": "param",
                "name": "_gitWorkTree",
                "id": "_gitWorkTree"
              }
            ],
            "id": "GitDir._raw2()"
          },
          {
            "returnType": {
              "name": "Path",
              "refId": "Path"
            },
            "kind": "method",
            "name": "path",
            "id": "path0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "method",
            "name": "getCommitCount",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "branchName",
                "id": "branchName"
              }
            ],
            "id": "getCommitCount1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "getBranchNames",
            "id": "getBranchNames0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "BranchReference",
                  "refId": "BranchReference"
                }
              ]
            },
            "kind": "method",
            "name": "getBranchReference",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "branchName",
                "id": "branchName"
              }
            ],
            "id": "getBranchReference1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "BranchReference",
                      "refId": "BranchReference"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "getBranchReferences",
            "id": "getBranchReferences0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "BranchReference",
                  "refId": "BranchReference"
                }
              ]
            },
            "kind": "method",
            "name": "getCurrentBranch",
            "id": "getCurrentBranch0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "TreeEntry",
                      "refId": "TreeEntry"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "name": "lsTree",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "treeish",
                "id": "treeish"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "subTreesOnly",
                "id": "subTreesOnly"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "path",
                "id": "path"
              }
            ],
            "id": "lsTree3()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                }
              ]
            },
            "kind": "method",
            "comment": "\nGiven a list of [paths], write those files to the object store\nand return a [Map] where the key is the input path and the value is\nthe SHA of the newly written object.\n",
            "name": "writeObjects",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "paths",
                "id": "paths"
              }
            ],
            "id": "writeObjects1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Commit",
                  "refId": "Commit"
                }
              ]
            },
            "kind": "method",
            "comment": "\n[rev] should probably be a sha1 to a commit.\nBut GIT lets you do other things.\nSee http://git-scm.com/docs/gitrevisions.html\n",
            "name": "getCommit",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "rev",
                "id": "rev"
              }
            ],
            "id": "getCommit1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "ProcessResult",
                  "refId": "ProcessResult"
                }
              ]
            },
            "kind": "method",
            "name": "runCommand",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "throwOnError",
                "id": "throwOnError"
              }
            ],
            "id": "runCommand2()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "isWorkingTreeClean",
            "id": "isWorkingTreeClean0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Commit",
                  "refId": "Commit"
                }
              ]
            },
            "kind": "method",
            "comment": "\nIf the content provided matches the content in the specificed [branchName], then\n`null` is returned.\n\nIf no content is added to the directory, an [Error] is thrown.\n",
            "name": "populateBranch",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "branchName",
                "id": "branchName"
              },
              {
                "ref": {
                  "name": "PopulateTempDir",
                  "refId": "PopulateTempDir"
                },
                "kind": "param",
                "name": "populator",
                "id": "populator"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "commitMessage",
                "id": "commitMessage"
              }
            ],
            "id": "populateBranch3()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "_TempDirs",
                  "refId": "_TempDirs"
                }
              ]
            },
            "kind": "method",
            "name": "_getTempDirPairForNewBranch",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "newBranchName",
                "id": "newBranchName"
              }
            ],
            "id": "_getTempDirPairForNewBranch1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "_TempDirs",
                  "refId": "_TempDirs"
                }
              ]
            },
            "kind": "method",
            "name": "_getTempDirPair",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "existingBranchName",
                "id": "existingBranchName"
              }
            ],
            "id": "_getTempDirPair1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_processWorkingDir",
            "id": "_processWorkingDir0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "isGitDir",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "path",
                "id": "path"
              }
            ],
            "id": "isGitDir1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "GitDir",
                  "refId": "GitDir"
                }
              ]
            },
            "kind": "method",
            "comment": "\n[allowContent] if true, doesn't check to see if the directory is empty\n\nWill fail if the source is a git directory (either at the root or a sub directory)\n",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "allowContent",
                "id": "allowContent"
              }
            ],
            "id": "init2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "GitDir",
                  "refId": "GitDir"
                }
              ]
            },
            "kind": "method",
            "name": "fromExisting",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "gitDirRoot",
                "id": "gitDirRoot"
              }
            ],
            "id": "fromExisting1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "GitDir",
                  "refId": "GitDir"
                }
              ]
            },
            "kind": "method",
            "name": "_init",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "_init1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "_isGitDir",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "_isGitDir1()"
          },
          {
            "ref": {
              "name": "Path",
              "refId": "Path"
            },
            "kind": "property",
            "name": "path",
            "id": "path"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_processWorkingDir",
            "id": "_processWorkingDir"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_workTreeArg",
            "id": "_workTreeArg"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_gitDirArg",
            "id": "_gitDirArg"
          },
          {
            "ref": {
              "name": "RegExp",
              "refId": "RegExp"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_shaRegExp",
            "id": "_shaRegExp"
          },
          {
            "ref": {
              "name": "Path",
              "refId": "Path"
            },
            "kind": "property",
            "name": "_path",
            "id": "_path"
          },
          {
            "ref": {
              "name": "Path",
              "refId": "Path"
            },
            "kind": "property",
            "name": "_gitWorkTree",
            "id": "_gitWorkTree"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "GitDir._raw",
            "children": [
              {
                "ref": {
                  "name": "Path",
                  "refId": "Path"
                },
                "kind": "param",
                "name": "_path",
                "id": "_path"
              },
              {
                "ref": {
                  "name": "Path",
                  "refId": "Path"
                },
                "isOptional": true,
                "kind": "param",
                "name": "_gitWorkTree",
                "id": "_gitWorkTree"
              }
            ],
            "id": "GitDir._raw2()"
          }
        ],
        "id": "GitDir"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TreeEntry",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TreeEntry",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "mode",
                "id": "mode"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "TreeEntry4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TreeEntry.fromLsTree",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "TreeEntry.fromLsTree1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "TreeEntry",
                  "refId": "TreeEntry"
                }
              ]
            },
            "kind": "method",
            "name": "fromLsTreeOutput",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "output",
                "id": "output"
              }
            ],
            "id": "fromLsTreeOutput1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_lsTreeLine",
            "id": "_lsTreeLine"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_lsTreeRegEx",
            "id": "_lsTreeRegEx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "mode",
            "id": "mode"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "sha",
            "id": "sha"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TreeEntry",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "mode",
                "id": "mode"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "TreeEntry4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TreeEntry.fromLsTree",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "TreeEntry.fromLsTree1()"
          }
        ],
        "id": "TreeEntry"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Commit",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Commit._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "treeSha",
                "id": "treeSha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "author",
                "id": "author"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "committer",
                "id": "committer"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "parents",
                "id": "parents"
              }
            ],
            "id": "Commit._internal6()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Commit",
              "refId": "Commit"
            },
            "kind": "method",
            "name": "parse",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "parse1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_headerRegExp",
            "id": "_headerRegExp"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "treeSha",
            "id": "treeSha"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "author",
            "id": "author"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "committer",
            "id": "committer"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "content",
            "id": "content"
          },
          {
            "ref": {
              "name": "ReadOnlyCollection",
              "refId": "ReadOnlyCollection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "parents",
            "id": "parents"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Commit._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "treeSha",
                "id": "treeSha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "author",
                "id": "author"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "committer",
                "id": "committer"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "parents",
                "id": "parents"
              }
            ],
            "id": "Commit._internal6()"
          }
        ],
        "id": "Commit"
      },
      {
        "superclass": {
          "name": "CommitReference",
          "refId": "CommitReference"
        },
        "kind": "class",
        "name": "BranchReference",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BranchReference",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              }
            ],
            "id": "BranchReference2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BranchReference._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "branchName",
                "id": "branchName"
              }
            ],
            "id": "BranchReference._internal3()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_localBranchPrefix",
            "id": "_localBranchPrefix"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "branchName",
            "id": "branchName"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BranchReference",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              }
            ],
            "id": "BranchReference2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BranchReference._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "branchName",
                "id": "branchName"
              }
            ],
            "id": "BranchReference._internal3()"
          }
        ],
        "id": "BranchReference"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nRepresents the output from `git show-ref`\n",
        "name": "CommitReference",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "CommitReference",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              }
            ],
            "id": "CommitReference2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "CommitReference",
                  "refId": "CommitReference"
                }
              ]
            },
            "kind": "method",
            "name": "fromShowRefOutput",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "fromShowRefOutput1()"
          },
          {
            "returnType": {
              "name": "BranchReference",
              "refId": "BranchReference"
            },
            "kind": "method",
            "name": "toBranchReference",
            "id": "toBranchReference0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "RegExp",
              "refId": "RegExp"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_lsRemoteRegExp",
            "id": "_lsRemoteRegExp"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "sha",
            "id": "sha"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "reference",
            "id": "reference"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "CommitReference",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "sha",
                "id": "sha"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reference",
                "id": "reference"
              }
            ],
            "id": "CommitReference2()"
          }
        ],
        "id": "CommitReference"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Git",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isValidSha",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "isValidSha1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "ProcessResult",
                  "refId": "ProcessResult"
                }
              ]
            },
            "kind": "method",
            "name": "runGit",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "throwOnError",
                "id": "throwOnError"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "processWorkingDir",
                "id": "processWorkingDir"
              }
            ],
            "id": "runGit3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_throwIfProcessFailed",
            "children": [
              {
                "ref": {
                  "name": "ProcessResult",
                  "refId": "ProcessResult"
                },
                "kind": "param",
                "name": "pr",
                "id": "pr"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "process",
                "id": "process"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "_throwIfProcessFailed3()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_shaRegexPattern",
            "id": "_shaRegexPattern"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_shaRegEx",
            "id": "_shaRegEx"
          }
        ],
        "id": "Git"
      }
    ],
    "id": "package:bot/bot_git.dart"
  },
  {
    "kind": "library",
    "name": "bot_html",
    "children": [
      {
        "returnType": {
          "name": "Future",
          "refId": "Future"
        },
        "kind": "method",
        "comment": "\nGet a [Future] that completes after a call to [window.setImmediate].\n",
        "name": "getImmediateFuture",
        "id": "getImmediateFuture0()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "int",
              "refId": "int"
            }
          ]
        },
        "kind": "method",
        "comment": "\nGet a [Future] that completes after a call to [window.setTimeout] with the\nprovided value. If [milliseconds] is less than or equal to zero, the value of\n[getImmediateFuture] is returned instead.\n",
        "name": "getTimeoutFuture",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "milliseconds",
            "id": "milliseconds"
          }
        ],
        "id": "getTimeoutFuture1()"
      },
      {
        "returnType": {
          "name": "Coordinate",
          "refId": "Coordinate"
        },
        "kind": "method",
        "name": "getMouseEventCoordinate",
        "children": [
          {
            "ref": {
              "name": "MouseEvent",
              "refId": "MouseEvent"
            },
            "kind": "param",
            "name": "event",
            "id": "event"
          }
        ],
        "id": "getMouseEventCoordinate1()"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ResourceLoader",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ResourceLoader",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urlList",
                "id": "urlList"
              }
            ],
            "id": "ResourceLoader1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "completedCount",
            "id": "completedCount0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "state",
            "id": "state0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "method",
            "name": "loaded",
            "id": "loaded0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "method",
            "name": "progress",
            "id": "progress0()"
          },
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "getResource",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "url",
                "id": "url"
              }
            ],
            "id": "getResource1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "completedBytes",
            "id": "completedBytes0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "totalBytes",
            "id": "totalBytes0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "load",
            "id": "load0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doLoad",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              }
            ],
            "id": "_doLoad1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_loadResourceFailed",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              }
            ],
            "id": "_loadResourceFailed1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_loadResourceSucceed",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "resource",
                "id": "resource"
              }
            ],
            "id": "_loadResourceSucceed2()"
          },
          {
            "returnType": {
              "name": "_ResourceEntry",
              "refId": "_ResourceEntry",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "_getByUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "url",
                "id": "url"
              }
            ],
            "id": "_getByUrl1()"
          },
          {
            "returnType": {
              "name": "_ResourceEntry",
              "refId": "_ResourceEntry",
              "arguments": [
                {
                  "name": "T",
                  "refId": "T"
                }
              ]
            },
            "kind": "method",
            "name": "_getByBlobUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              }
            ],
            "id": "_getByBlobUrl1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_httpLoad",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "url",
                "id": "url"
              }
            ],
            "id": "_httpLoad1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onLoadEnd",
            "children": [
              {
                "ref": {
                  "name": "_ResourceEntry",
                  "refId": "_ResourceEntry",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "entry",
                "id": "entry"
              },
              {
                "ref": {
                  "name": "HttpRequestProgressEvent",
                  "refId": "HttpRequestProgressEvent"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "_onLoadEnd2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onError",
            "children": [
              {
                "ref": {
                  "name": "_ResourceEntry",
                  "refId": "_ResourceEntry",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "entry",
                "id": "entry"
              },
              {
                "ref": {
                  "name": "HttpRequestProgressEvent",
                  "refId": "HttpRequestProgressEvent"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "_onError2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onProgress",
            "children": [
              {
                "ref": {
                  "name": "_ResourceEntry",
                  "refId": "_ResourceEntry",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                },
                "kind": "param",
                "name": "entry",
                "id": "entry"
              },
              {
                "ref": {
                  "name": "HttpRequestProgressEvent",
                  "refId": "HttpRequestProgressEvent"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "_onProgress2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "completedCount",
            "id": "completedCount"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "state",
            "id": "state"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "property",
            "name": "loaded",
            "id": "loaded"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot"
            },
            "kind": "property",
            "name": "progress",
            "id": "progress"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "completedBytes",
            "id": "completedBytes"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "totalBytes",
            "id": "totalBytes"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "StateUnloaded",
            "id": "StateUnloaded"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "StateLoading",
            "id": "StateLoading"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "StateLoaded",
            "id": "StateLoaded"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "StateError",
            "id": "StateError"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_defaultSize",
            "id": "_defaultSize"
          },
          {
            "ref": {
              "name": "ReadOnlyCollection",
              "refId": "ReadOnlyCollection",
              "arguments": [
                {
                  "name": "_ResourceEntry",
                  "refId": "_ResourceEntry",
                  "arguments": [
                    {
                      "name": "T",
                      "refId": "T"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_entries",
            "id": "_entries"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_loadedEvent",
            "id": "_loadedEvent"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_progressEvent",
            "id": "_progressEvent"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_state",
            "id": "_state"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ResourceLoader",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urlList",
                "id": "urlList"
              }
            ],
            "id": "ResourceLoader1()"
          }
        ],
        "id": "ResourceLoader"
      },
      {
        "superclass": {
          "name": "ResourceLoader",
          "refId": "ResourceLoader",
          "arguments": [
            {
              "name": "ImageElement",
              "refId": "ImageElement"
            }
          ]
        },
        "kind": "class",
        "name": "ImageLoader",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ImageLoader",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urls",
                "id": "urls"
              }
            ],
            "id": "ImageLoader1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doLoad",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              }
            ],
            "id": "_doLoad1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ImageLoader",
            "children": [
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urls",
                "id": "urls"
              }
            ],
            "id": "ImageLoader1()"
          }
        ],
        "id": "ImageLoader"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "HtmlView",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "HtmlView",
            "children": [
              {
                "ref": {
                  "name": "DivElement",
                  "refId": "DivElement"
                },
                "kind": "param",
                "name": "_node",
                "id": "_node"
              }
            ],
            "id": "HtmlView1()"
          },
          {
            "returnType": {
              "name": "DivElement",
              "refId": "DivElement"
            },
            "kind": "method",
            "name": "node",
            "id": "node0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "markDirty",
            "id": "markDirty0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "draw",
            "id": "draw0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "updateElement",
            "id": "updateElement0()"
          },
          {
            "ref": {
              "name": "DivElement",
              "refId": "DivElement"
            },
            "kind": "property",
            "name": "node",
            "id": "node"
          },
          {
            "ref": {
              "name": "DivElement",
              "refId": "DivElement"
            },
            "kind": "property",
            "name": "_node",
            "id": "_node"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_dirty",
            "id": "_dirty"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "HtmlView",
            "children": [
              {
                "ref": {
                  "name": "DivElement",
                  "refId": "DivElement"
                },
                "kind": "param",
                "name": "_node",
                "id": "_node"
              }
            ],
            "id": "HtmlView1()"
          }
        ],
        "id": "HtmlView"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Dragger",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Dragger",
            "children": [
              {
                "ref": {
                  "name": "Element",
                  "refId": "Element"
                },
                "kind": "param",
                "name": "_element",
                "id": "_element"
              }
            ],
            "id": "Dragger1()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "method",
            "name": "dragDelta",
            "id": "dragDelta0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "CancelableEventArgs",
                  "refId": "CancelableEventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "dragStart",
            "id": "dragStart0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isDragging",
            "id": "isDragging0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onMouseDown",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "event",
                "id": "event"
              }
            ],
            "id": "_onMouseDown1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_handleMove",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "event",
                "id": "event"
              }
            ],
            "id": "_handleMove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_endDrag",
            "children": [
              {
                "ref": {
                  "name": "Event",
                  "refId": "Event"
                },
                "kind": "param",
                "name": "event",
                "id": "event"
              }
            ],
            "id": "_endDrag1()"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "dragDelta",
            "id": "dragDelta"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "CancelableEventArgs",
                  "refId": "CancelableEventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "dragStart",
            "id": "dragStart"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isDragging",
            "id": "isDragging"
          },
          {
            "ref": {
              "name": "Element",
              "refId": "Element"
            },
            "kind": "property",
            "name": "_element",
            "id": "_element"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "_dragDeltaHandle",
            "id": "_dragDeltaHandle"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "CancelableEventArgs",
                  "refId": "CancelableEventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_dragStartHandle",
            "id": "_dragStartHandle"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "_clientLoc",
            "id": "_clientLoc"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Dragger",
            "children": [
              {
                "ref": {
                  "name": "Element",
                  "refId": "Element"
                },
                "kind": "param",
                "name": "_element",
                "id": "_element"
              }
            ],
            "id": "Dragger1()"
          }
        ],
        "id": "Dragger"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "CanvasUtil",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "getCanvasSize",
            "children": [
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "canvasElement",
                "id": "canvasElement"
              }
            ],
            "id": "getCanvasSize1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setTransform",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              }
            ],
            "id": "setTransform2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "transform",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              }
            ],
            "id": "transform2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "centeredCircle",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              }
            ],
            "id": "centeredCircle4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "star",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "outterRadius",
                "id": "outterRadius"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "pointCount",
                "id": "pointCount"
              }
            ],
            "id": "star5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawImage",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "img",
                "id": "img"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "sourceBox",
                "id": "sourceBox"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "isOptional": true,
                "kind": "param",
                "name": "targetBox",
                "id": "targetBox"
              }
            ],
            "id": "drawImage4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "ellipse",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "ellipse5()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "kappa",
            "id": "kappa"
          }
        ],
        "id": "CanvasUtil"
      },
      {
        "superclass": {
          "name": "ResourceLoader",
          "refId": "ResourceLoader",
          "arguments": [
            {
              "name": "AudioBuffer",
              "refId": "AudioBuffer"
            }
          ]
        },
        "kind": "class",
        "name": "AudioLoader",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AudioLoader",
            "children": [
              {
                "ref": {
                  "name": "AudioContext",
                  "refId": "AudioContext"
                },
                "kind": "param",
                "name": "context",
                "id": "context"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urlList",
                "id": "urlList"
              }
            ],
            "id": "AudioLoader2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doLoad",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              }
            ],
            "id": "_doLoad1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onAudioLoadError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "error",
                "id": "error"
              }
            ],
            "id": "_onAudioLoadError3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_saveBuffer",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "blobUrl",
                "id": "blobUrl"
              },
              {
                "ref": {
                  "name": "AudioBuffer",
                  "refId": "AudioBuffer"
                },
                "kind": "param",
                "name": "buffer",
                "id": "buffer"
              }
            ],
            "id": "_saveBuffer2()"
          },
          {
            "ref": {
              "name": "AudioContext",
              "refId": "AudioContext"
            },
            "kind": "property",
            "name": "context",
            "id": "context"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AudioLoader",
            "children": [
              {
                "ref": {
                  "name": "AudioContext",
                  "refId": "AudioContext"
                },
                "kind": "param",
                "name": "context",
                "id": "context"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "urlList",
                "id": "urlList"
              }
            ],
            "id": "AudioLoader2()"
          }
        ],
        "id": "AudioLoader"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_html.dart"
  },
  {
    "kind": "library",
    "name": "bot_io",
    "children": [
      {
        "superclass": {
          "name": "DirectoryPopulater",
          "refId": "DirectoryPopulater"
        },
        "kind": "class",
        "name": "MapDirectoryPopulater",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "MapDirectoryPopulater",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "_contents",
                "id": "_contents"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "checkEmpty",
                "id": "checkEmpty"
              }
            ],
            "id": "MapDirectoryPopulater2()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Directory",
                  "refId": "Directory"
                }
              ]
            },
            "kind": "method",
            "name": "populate",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "populate1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Directory",
                  "refId": "Directory"
                }
              ]
            },
            "kind": "method",
            "name": "_populate",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "_populate2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "File",
                  "refId": "File"
                }
              ]
            },
            "kind": "method",
            "name": "_createFile",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "_createFile3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Directory",
                  "refId": "Directory"
                }
              ]
            },
            "kind": "method",
            "name": "_createDirAndPopulate",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "_createDirAndPopulate3()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "checkEmpty",
            "id": "checkEmpty"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "dynamic",
                  "refId": "dynamic"
                }
              ]
            },
            "kind": "property",
            "name": "_contents",
            "id": "_contents"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "MapDirectoryPopulater",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "_contents",
                "id": "_contents"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "checkEmpty",
                "id": "checkEmpty"
              }
            ],
            "id": "MapDirectoryPopulater2()"
          }
        ],
        "id": "MapDirectoryPopulater"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DirectoryPopulater",
        "children": [
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Directory",
                  "refId": "Directory"
                }
              ]
            },
            "kind": "method",
            "name": "populate",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "populate1()"
          }
        ],
        "id": "DirectoryPopulater"
      },
      {
        "superclass": {
          "name": "DisposableImpl",
          "refId": "DisposableImpl"
        },
        "kind": "class",
        "name": "TempDir",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TempDir",
                  "refId": "TempDir"
                }
              ]
            },
            "kind": "method",
            "name": "create",
            "id": "create0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TempDir._internal",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "TempDir._internal1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "path",
            "id": "path0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "TempDir",
                  "refId": "TempDir"
                }
              ]
            },
            "kind": "method",
            "name": "populate",
            "children": [
              {
                "ref": {
                  "name": "DirectoryPopulater",
                  "refId": "DirectoryPopulater"
                },
                "kind": "param",
                "name": "populater",
                "id": "populater"
              }
            ],
            "id": "populate1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "verifyContents",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "verifyContents1()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "path",
            "id": "path"
          },
          {
            "ref": {
              "name": "Directory",
              "refId": "Directory"
            },
            "kind": "property",
            "name": "dir",
            "id": "dir"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TempDir._internal",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "TempDir._internal1()"
          }
        ],
        "id": "TempDir"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "IoHelpers",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "verifyContents",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "verifyContents2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "isEmpty",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "isEmpty1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "Map",
                  "refId": "Map"
                }
              ]
            },
            "kind": "method",
            "name": "_mapContents",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              }
            ],
            "id": "_mapContents1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "_verifyContents",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "dir",
                "id": "dir"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "content",
                "id": "content"
              }
            ],
            "id": "_verifyContents2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "_verifyChildContent",
            "children": [
              {
                "ref": {
                  "name": "Directory",
                  "refId": "Directory"
                },
                "kind": "param",
                "name": "parentDir",
                "id": "parentDir"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "expectedContent",
                "id": "expectedContent"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "foundContent",
                "id": "foundContent"
              }
            ],
            "id": "_verifyChildContent4()"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_dirPlaceHolder",
            "id": "_dirPlaceHolder"
          }
        ],
        "id": "IoHelpers"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ColumnDefinition",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ColumnDefinition",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "_mapper",
                "id": "_mapper"
              }
            ],
            "id": "ColumnDefinition2()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "property",
            "name": "_mapper",
            "id": "_mapper"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ColumnDefinition",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "_mapper",
                "id": "_mapper"
              }
            ],
            "id": "ColumnDefinition2()"
          }
        ],
        "id": "ColumnDefinition"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Console",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "getTable",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ColumnDefinition",
                      "refId": "ColumnDefinition"
                    }
                  ]
                },
                "kind": "param",
                "name": "columns",
                "id": "columns"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "includeHeader",
                "id": "includeHeader"
              }
            ],
            "id": "getTable3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_getRow",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "row",
                "id": "row"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "int",
                      "refId": "int"
                    }
                  ]
                },
                "kind": "param",
                "name": "columnWidths",
                "id": "columnWidths"
              }
            ],
            "id": "_getRow2()"
          }
        ],
        "id": "Console"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\n[More details](https://en.wikipedia.org/wiki/ANSI_escape_code#Colors)\n",
        "name": "AnsiColor",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "AnsiColor._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "AnsiColor._internal2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "wrap",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "wrap1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "shellValue",
            "id": "shellValue0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "shellValue",
            "id": "shellValue"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_NO_COLOR",
            "id": "_NO_COLOR"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BLACK",
            "id": "BLACK"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "RED",
            "id": "RED"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "GREEN",
            "id": "GREEN"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "YELLOW",
            "id": "YELLOW"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BLUE",
            "id": "BLUE"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAGENTA",
            "id": "MAGENTA"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CYAN",
            "id": "CYAN"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "GRAY",
            "id": "GRAY"
          },
          {
            "ref": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LIGHT_RED",
            "id": "LIGHT_RED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "AnsiColor._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "AnsiColor._internal2()"
          }
        ],
        "id": "AnsiColor"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_io.dart"
  },
  {
    "kind": "library",
    "name": "bot_retained",
    "children": [
      {
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "TextThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextThing",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_value",
                "id": "_value"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "TextThing3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_value",
            "id": "_value"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "fillStyle",
            "id": "fillStyle"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "textFillStyle",
            "id": "textFillStyle"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextThing",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_value",
                "id": "_value"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "TextThing3()"
          }
        ],
        "id": "TextThing"
      },
      {
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "SubCanvasThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SubCanvasThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "_canvas",
                "id": "_canvas"
              }
            ],
            "id": "SubCanvasThing3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "ref": {
              "name": "CanvasElement",
              "refId": "CanvasElement"
            },
            "kind": "property",
            "name": "_canvas",
            "id": "_canvas"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SubCanvasThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "_canvas",
                "id": "_canvas"
              }
            ],
            "id": "SubCanvasThing3()"
          }
        ],
        "id": "SubCanvasThing"
      },
      {
        "superclass": {
          "name": "DisposableImpl",
          "refId": "DisposableImpl"
        },
        "kind": "class",
        "name": "StageWrapper",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "StageWrapper",
            "children": [
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "canvas",
                "id": "canvas"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "rootThing",
                "id": "rootThing"
              }
            ],
            "id": "StageWrapper2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "requestFrame",
            "id": "requestFrame0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawFrame",
            "children": [
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "highResTime",
                "id": "highResTime"
              }
            ],
            "id": "drawFrame1()"
          },
          {
            "ref": {
              "name": "CanvasElement",
              "refId": "CanvasElement"
            },
            "kind": "property",
            "name": "canvas",
            "id": "canvas"
          },
          {
            "ref": {
              "name": "Stage",
              "refId": "Stage"
            },
            "kind": "property",
            "name": "stage",
            "id": "stage"
          },
          {
            "ref": {
              "name": "T",
              "refId": "T"
            },
            "kind": "property",
            "name": "rootThing",
            "id": "rootThing"
          },
          {
            "ref": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "property",
            "name": "_invalidatedEventId",
            "id": "_invalidatedEventId"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_frameRequested",
            "id": "_frameRequested"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "StageWrapper",
            "children": [
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "canvas",
                "id": "canvas"
              },
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "rootThing",
                "id": "rootThing"
              }
            ],
            "id": "StageWrapper2()"
          }
        ],
        "id": "StageWrapper"
      },
      {
        "interfaces": [
          {
            "name": "ThingParent",
            "refId": "ThingParent"
          }
        ],
        "superclass": {
          "name": "AttachableObject",
          "refId": "AttachableObject"
        },
        "kind": "class",
        "name": "Stage",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Stage",
            "children": [
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "_canvas",
                "id": "_canvas"
              },
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "rootThing",
                "id": "rootThing"
              }
            ],
            "id": "Stage2()"
          },
          {
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "size",
            "id": "size0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "invalidated",
            "id": "invalidated0()"
          },
          {
            "returnType": {
              "name": "CanvasRenderingContext2D",
              "refId": "CanvasRenderingContext2D"
            },
            "kind": "method",
            "name": "ctx",
            "id": "ctx0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "draw",
            "id": "draw0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "childInvalidated",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "child",
                "id": "child"
              }
            ],
            "id": "childInvalidated1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "getTransformToRoot",
            "id": "getTransformToRoot0()"
          },
          {
            "ref": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "property",
            "name": "size",
            "id": "size"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "invalidated",
            "id": "invalidated"
          },
          {
            "ref": {
              "name": "CanvasRenderingContext2D",
              "refId": "CanvasRenderingContext2D"
            },
            "kind": "property",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_invalidatedEventHandle",
            "id": "_invalidatedEventHandle"
          },
          {
            "ref": {
              "name": "CanvasElement",
              "refId": "CanvasElement"
            },
            "kind": "property",
            "name": "_canvas",
            "id": "_canvas"
          },
          {
            "ref": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "property",
            "name": "rootThing",
            "id": "rootThing"
          },
          {
            "ref": {
              "name": "CanvasRenderingContext2D",
              "refId": "CanvasRenderingContext2D"
            },
            "kind": "property",
            "name": "_ctx",
            "id": "_ctx"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Stage",
            "children": [
              {
                "ref": {
                  "name": "CanvasElement",
                  "refId": "CanvasElement"
                },
                "kind": "param",
                "name": "_canvas",
                "id": "_canvas"
              },
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "rootThing",
                "id": "rootThing"
              }
            ],
            "id": "Stage2()"
          }
        ],
        "id": "Stage"
      },
      {
        "superclass": {
          "name": "ImageThing",
          "refId": "ImageThing"
        },
        "kind": "class",
        "name": "SpriteThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SpriteThing.horizontalFromUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "src",
                "id": "src"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "xDelta",
                "id": "xDelta"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "id": "SpriteThing.horizontalFromUrl6()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SpriteThing",
            "children": [
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "startCoordinate",
                "id": "startCoordinate"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "nextDelta",
                "id": "nextDelta"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "SpriteThing6()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "nextFrame",
            "id": "nextFrame0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "previousFrame",
            "id": "previousFrame0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrame",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "frame",
                "id": "frame"
              }
            ],
            "id": "setFrame1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doDraw",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_doDraw1()"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "startCoordinate",
            "id": "startCoordinate"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "nextDelta",
            "id": "nextDelta"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_frame",
            "id": "_frame"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SpriteThing.horizontalFromUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "src",
                "id": "src"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "xDelta",
                "id": "xDelta"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "start",
                "id": "start"
              }
            ],
            "id": "SpriteThing.horizontalFromUrl6()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SpriteThing",
            "children": [
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "startCoordinate",
                "id": "startCoordinate"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "nextDelta",
                "id": "nextDelta"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "SpriteThing6()"
          }
        ],
        "id": "SpriteThing"
      },
      {
        "superclass": {
          "name": "_RetainedEnum",
          "refId": "_RetainedEnum"
        },
        "kind": "class",
        "name": "ShapeType",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ShapeType._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "ShapeType._internal1()"
          },
          {
            "ref": {
              "name": "ShapeType",
              "refId": "ShapeType"
            },
            "isStatic": true,
            "kind": "property",
            "name": "rect",
            "id": "rect"
          },
          {
            "ref": {
              "name": "ShapeType",
              "refId": "ShapeType"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ellipse",
            "id": "ellipse"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ShapeType._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "ShapeType._internal1()"
          }
        ],
        "id": "ShapeType"
      },
      {
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "ShapeThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ShapeThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "fillStyle",
                "id": "fillStyle"
              },
              {
                "ref": {
                  "name": "ShapeType",
                  "refId": "ShapeType"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shapeType",
                "id": "shapeType"
              }
            ],
            "id": "ShapeThing4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "fillStyle",
            "id": "fillStyle0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fillStyle=",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "fillStyle=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "fillStyle",
            "id": "fillStyle"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "_fillStyle",
            "id": "_fillStyle"
          },
          {
            "ref": {
              "name": "ShapeType",
              "refId": "ShapeType"
            },
            "kind": "property",
            "name": "shapeType",
            "id": "shapeType"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ShapeThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "fillStyle",
                "id": "fillStyle"
              },
              {
                "ref": {
                  "name": "ShapeType",
                  "refId": "ShapeType"
                },
                "isOptional": true,
                "kind": "param",
                "name": "shapeType",
                "id": "shapeType"
              }
            ],
            "id": "ShapeThing4()"
          }
        ],
        "id": "ShapeThing"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "RetainedUtil",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "getOffsetVector",
            "children": [
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "parentSize",
                "id": "parentSize"
              },
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "childSize",
                "id": "childSize"
              },
              {
                "ref": {
                  "name": "HorizontalAlignment",
                  "refId": "HorizontalAlignment"
                },
                "kind": "param",
                "name": "horizontalAlignment",
                "id": "horizontalAlignment"
              },
              {
                "ref": {
                  "name": "VerticalAlignment",
                  "refId": "VerticalAlignment"
                },
                "kind": "param",
                "name": "verticalAlignment",
                "id": "verticalAlignment"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "offset",
                "id": "offset"
              }
            ],
            "id": "getOffsetVector5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Thing",
                  "refId": "Thing"
                }
              ]
            },
            "kind": "method",
            "name": "hitTest",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "hitTest2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Thing",
                  "refId": "Thing"
                }
              ]
            },
            "kind": "method",
            "name": "_hitTest",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "_hitTest2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "transformPointLocalToGlobal",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "transformPointLocalToGlobal2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "transformPointGlobalToLocal",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "transformPointGlobalToLocal2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                }
              ]
            },
            "kind": "method",
            "name": "getCorners",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getCorners1()"
          }
        ],
        "id": "RetainedUtil"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "RetainedDebug",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "borderThing",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              }
            ],
            "id": "borderThing1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "borderHitTest",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "borderHitTest2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_borderThing",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "excludeChildren",
                "id": "excludeChildren"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "isOptional": true,
                "kind": "param",
                "name": "filter",
                "id": "filter"
              }
            ],
            "id": "_borderThing4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_borderThingCore",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "_borderThingCore2()"
          }
        ],
        "id": "RetainedDebug"
      },
      {
        "superclass": {
          "name": "AttachableObject",
          "refId": "AttachableObject"
        },
        "kind": "class",
        "name": "Thing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Thing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "_width",
                "id": "_width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "_height",
                "id": "_height"
              }
            ],
            "id": "Thing2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "width",
            "id": "width0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "width=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "width=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "height",
            "id": "height0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "height=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "height=1()"
          },
          {
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "size",
            "id": "size0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "size=",
            "children": [
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "size=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "alpha",
            "id": "alpha0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "alpha=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "alpha=1()"
          },
          {
            "returnType": {
              "name": "ThingParent",
              "refId": "ThingParent"
            },
            "kind": "method",
            "name": "parent",
            "id": "parent0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "cacheEnabled",
            "id": "cacheEnabled0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "cacheEnabled=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "cacheEnabled=1()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "invalidated",
            "id": "invalidated0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "getTransform",
            "id": "getTransform0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "getTransformToRoot",
            "id": "getTransformToRoot0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawCore",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawCore1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "addTransform",
            "id": "addTransform0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeTransform",
            "children": [
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              }
            ],
            "id": "removeTransform1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "invalidateDraw",
            "id": "invalidateDraw0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "registerParent",
            "children": [
              {
                "ref": {
                  "name": "ThingParent",
                  "refId": "ThingParent"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "registerParent1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "unregisterParent",
            "children": [
              {
                "ref": {
                  "name": "ThingParent",
                  "refId": "ThingParent"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "unregisterParent1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disposeInternal",
            "id": "disposeInternal0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_stageDraw",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_stageDraw1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_drawCached",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_drawCached1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_drawNormal",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_drawNormal1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_invalidateParent",
            "id": "_invalidateParent0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "width",
            "id": "width"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "height",
            "id": "height"
          },
          {
            "ref": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "property",
            "name": "size",
            "id": "size"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "alpha",
            "id": "alpha"
          },
          {
            "ref": {
              "name": "ThingParent",
              "refId": "ThingParent"
            },
            "kind": "property",
            "name": "parent",
            "id": "parent"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "cacheEnabled",
            "id": "cacheEnabled"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "invalidated",
            "id": "invalidated"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                }
              ]
            },
            "kind": "property",
            "name": "_transforms",
            "id": "_transforms"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_invalidatedEventHandle",
            "id": "_invalidatedEventHandle"
          },
          {
            "ref": {
              "name": "CanvasElement",
              "refId": "CanvasElement"
            },
            "kind": "property",
            "name": "_cacheCanvas",
            "id": "_cacheCanvas"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_width",
            "id": "_width"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_height",
            "id": "_height"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_alpha",
            "id": "_alpha"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_cacheEnabled",
            "id": "_cacheEnabled"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_lastDrawTime",
            "id": "_lastDrawTime"
          },
          {
            "ref": {
              "name": "ThingParent",
              "refId": "ThingParent"
            },
            "kind": "property",
            "name": "_parent",
            "id": "_parent"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Thing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "_width",
                "id": "_width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "_height",
                "id": "_height"
              }
            ],
            "id": "Thing2()"
          }
        ],
        "id": "Thing"
      },
      {
        "superclass": {
          "name": "PanelThing",
          "refId": "PanelThing"
        },
        "kind": "class",
        "name": "CanvasThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "CanvasThing",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "CanvasThing2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setTopLeft",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setTopLeft2()"
          },
          {
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "getTopLeft",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getTopLeft1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setCenter",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setCenter2()"
          },
          {
            "returnType": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "method",
            "name": "getCenter",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getCenter1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "CanvasThing",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "CanvasThing2()"
          }
        ],
        "id": "CanvasThing"
      },
      {
        "interfaces": [
          {
            "name": "ThingParent",
            "refId": "ThingParent"
          }
        ],
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "ParentThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ParentThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "ParentThing2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "hasVisualChild",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "hasVisualChild1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "onChildrenChanged",
            "id": "onChildrenChanged0()"
          },
          {
            "returnType": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "method",
            "name": "getVisualChild",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "getVisualChild1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "visualChildCount",
            "id": "visualChildCount0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "childInvalidated",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "child",
                "id": "child"
              }
            ],
            "id": "childInvalidated1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_forEach",
            "children": [
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "_forEach1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "visualChildCount",
            "id": "visualChildCount"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ParentThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "ParentThing2()"
          }
        ],
        "id": "ParentThing"
      },
      {
        "superclass": {
          "name": "ParentThing",
          "refId": "ParentThing"
        },
        "kind": "class",
        "name": "PanelThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "PanelThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "PanelThing2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "insertAt",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "insertAt2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "remove1()"
          },
          {
            "returnType": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "method",
            "name": "getVisualChild",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "getVisualChild1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "visualChildCount",
            "id": "visualChildCount0()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "getChildTransform",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "child",
                "id": "child"
              }
            ],
            "id": "getChildTransform1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "visualChildCount",
            "id": "visualChildCount"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_containerTransformProperty",
            "id": "_containerTransformProperty"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Thing",
                  "refId": "Thing"
                }
              ]
            },
            "kind": "property",
            "name": "_children",
            "id": "_children"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "background",
            "id": "background"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "PanelThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "PanelThing2()"
          }
        ],
        "id": "PanelThing"
      },
      {
        "superclass": {
          "name": "ParentThing",
          "refId": "ParentThing"
        },
        "kind": "class",
        "name": "NavThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "NavThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "NavThing2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "visualChildCount",
            "id": "visualChildCount0()"
          },
          {
            "returnType": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "method",
            "name": "getVisualChild",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "getVisualChild1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "canForward",
            "id": "canForward0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forward",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                },
                "kind": "param",
                "name": "tx",
                "id": "tx"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "frameCount",
                "id": "frameCount"
              }
            ],
            "id": "forward3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_claimChild",
            "id": "_claimChild0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_updateChildLocation",
            "id": "_updateChildLocation0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "visualChildCount",
            "id": "visualChildCount"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "canForward",
            "id": "canForward"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "AffineTransform",
                  "refId": "AffineTransform"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_navLayerTransformProp",
            "id": "_navLayerTransformProp"
          },
          {
            "ref": {
              "name": "VerticalAlignment",
              "refId": "VerticalAlignment"
            },
            "kind": "property",
            "name": "verticalAlignment",
            "id": "verticalAlignment"
          },
          {
            "ref": {
              "name": "HorizontalAlignment",
              "refId": "HorizontalAlignment"
            },
            "kind": "property",
            "name": "horizontalAlignment",
            "id": "horizontalAlignment"
          },
          {
            "ref": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "property",
            "name": "_child",
            "id": "_child"
          },
          {
            "ref": {
              "name": "_NavLayerTxPanel",
              "refId": "_NavLayerTxPanel"
            },
            "kind": "property",
            "name": "_txPanel",
            "id": "_txPanel"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_childOffset",
            "id": "_childOffset"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "NavThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              }
            ],
            "id": "NavThing2()"
          }
        ],
        "id": "NavThing"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Mouse",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isMouseOver",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "isMouseOver1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isMouseDirectlyOver",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "isMouseDirectlyOver1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Thing",
                  "refId": "Thing"
                }
              ]
            },
            "kind": "method",
            "name": "markMouseOver",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "coordinate",
                "id": "coordinate"
              }
            ],
            "id": "markMouseOver2()"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "isMouseOverProperty",
            "id": "isMouseOverProperty"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "isMouseDirectlyOverProperty",
            "id": "isMouseDirectlyOverProperty"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Thing",
                      "refId": "Thing"
                    }
                  ]
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_stageMouseCacheProperty",
            "id": "_stageMouseCacheProperty"
          }
        ],
        "id": "Mouse"
      },
      {
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "ImageThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ImageThing.fromUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "src",
                "id": "src"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "ImageThing.fromUrl3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ImageThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "_image",
                "id": "_image"
              }
            ],
            "id": "ImageThing3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doDraw",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_doDraw1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_onImageLoad",
            "children": [
              {
                "ref": {
                  "name": "Event",
                  "refId": "Event"
                },
                "kind": "param",
                "name": "event",
                "id": "event"
              }
            ],
            "id": "_onImageLoad1()"
          },
          {
            "ref": {
              "name": "ImageElement",
              "refId": "ImageElement"
            },
            "kind": "property",
            "name": "_image",
            "id": "_image"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_waitingOnLoad",
            "id": "_waitingOnLoad"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ImageThing.fromUrl",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "src",
                "id": "src"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "h",
                "id": "h"
              }
            ],
            "id": "ImageThing.fromUrl3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ImageThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "_image",
                "id": "_image"
              }
            ],
            "id": "ImageThing3()"
          }
        ],
        "id": "ImageThing"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ThingParent",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "childInvalidated",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "child",
                "id": "child"
              }
            ],
            "id": "childInvalidated1()"
          },
          {
            "returnType": {
              "name": "AffineTransform",
              "refId": "AffineTransform"
            },
            "kind": "method",
            "name": "getTransformToRoot",
            "id": "getTransformToRoot0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "invalidated",
            "id": "invalidated0()"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "invalidated",
            "id": "invalidated"
          }
        ],
        "id": "ThingParent"
      },
      {
        "superclass": {
          "name": "EventArgs",
          "refId": "EventArgs"
        },
        "kind": "class",
        "name": "ThingMouseEventArgs",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ThingMouseEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "sourceEvent",
                "id": "sourceEvent"
              }
            ],
            "id": "ThingMouseEventArgs2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "shiftKey",
            "id": "shiftKey0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "shiftKey",
            "id": "shiftKey"
          },
          {
            "ref": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "property",
            "name": "thing",
            "id": "thing"
          },
          {
            "ref": {
              "name": "MouseEvent",
              "refId": "MouseEvent"
            },
            "kind": "property",
            "name": "sourceEvent",
            "id": "sourceEvent"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ThingMouseEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "sourceEvent",
                "id": "sourceEvent"
              }
            ],
            "id": "ThingMouseEventArgs2()"
          }
        ],
        "id": "ThingMouseEventArgs"
      },
      {
        "superclass": {
          "name": "ThingMouseEventArgs",
          "refId": "ThingMouseEventArgs"
        },
        "kind": "class",
        "name": "ThingDragEventArgs",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ThingDragEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "delta",
                "id": "delta"
              }
            ],
            "id": "ThingDragEventArgs3()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "delta",
            "id": "delta"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ThingDragEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "delta",
                "id": "delta"
              }
            ],
            "id": "ThingDragEventArgs3()"
          }
        ],
        "id": "ThingDragEventArgs"
      },
      {
        "interfaces": [
          {
            "name": "CancelableEventArgs",
            "refId": "CancelableEventArgs"
          }
        ],
        "superclass": {
          "name": "ThingMouseEventArgs",
          "refId": "ThingMouseEventArgs"
        },
        "kind": "class",
        "name": "ThingDragStartingEventArgs",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ThingDragStartingEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ThingDragStartingEventArgs2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isCanceled",
            "id": "isCanceled0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "cancel",
            "id": "cancel0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isCanceled",
            "id": "isCanceled"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_canceled",
            "id": "_canceled"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ThingDragStartingEventArgs",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "source",
                "id": "source"
              }
            ],
            "id": "ThingDragStartingEventArgs2()"
          }
        ],
        "id": "ThingDragStartingEventArgs"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "MouseManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "MouseManager",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              }
            ],
            "id": "MouseManager1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "MouseManager._internal",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "_stage",
                "id": "_stage"
              }
            ],
            "id": "MouseManager._internal1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setCursor",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setCursor2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getCursor",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getCursor1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setClickable",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setClickable2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "getClickable",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getClickable1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setDraggable",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setDraggable2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "getDraggable",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              }
            ],
            "id": "getDraggable1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_setBoolProp",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Property",
                  "refId": "Property",
                  "arguments": [
                    {
                      "name": "bool",
                      "refId": "bool"
                    }
                  ]
                },
                "kind": "param",
                "name": "prop",
                "id": "prop"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "_setBoolProp3()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_isDragging",
            "id": "_isDragging0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_mouseMove",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_mouseMove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_mouseOut",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_mouseOut1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_mouseUp",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_mouseUp1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_mouseDown",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_mouseDown1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_updateCursor",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "cursor",
                "id": "cursor"
              }
            ],
            "id": "_updateCursor1()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Thing",
                  "refId": "Thing"
                }
              ]
            },
            "kind": "method",
            "name": "_updateMouseLocation",
            "children": [
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "_updateMouseLocation1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doMouseDown",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_doMouseDown2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doMouseUp",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_doMouseUp2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_doClick",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_doClick2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_startDrag",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_startDrag2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_windowMouseMove",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_windowMouseMove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_windowMouseUp",
            "children": [
              {
                "ref": {
                  "name": "MouseEvent",
                  "refId": "MouseEvent"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_windowMouseUp1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_windowBlur",
            "children": [
              {
                "ref": {
                  "name": "Event",
                  "refId": "Event"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_windowBlur1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_endDrag",
            "id": "_endDrag0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addMouseMoveHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addMouseMoveHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeMouseMoveHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeMouseMoveHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addMouseUpHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addMouseUpHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeMouseUpHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeMouseUpHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addMouseDownHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addMouseDownHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeMouseDownHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeMouseDownHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addMouseOutHandler",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addMouseOutHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeMouseOutHandler",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeMouseOutHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addDragStartingHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addDragStartingHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeDragStartingHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeDragStartingHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "GlobalId",
              "refId": "GlobalId"
            },
            "kind": "method",
            "name": "addDragHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "Action1",
                  "refId": "Action1"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "addDragHandler2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "removeDragHandler",
            "children": [
              {
                "ref": {
                  "name": "Thing",
                  "refId": "Thing"
                },
                "kind": "param",
                "name": "thing",
                "id": "thing"
              },
              {
                "ref": {
                  "name": "GlobalId",
                  "refId": "GlobalId"
                },
                "kind": "param",
                "name": "handlerId",
                "id": "handlerId"
              }
            ],
            "id": "removeDragHandler2()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_isDragging",
            "id": "_isDragging"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_autoCursor",
            "id": "_autoCursor"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "MouseManager",
                  "refId": "MouseManager"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_clickManagerProperty",
            "id": "_clickManagerProperty"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_isClickableProperty",
            "id": "_isClickableProperty"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_isDraggableProperty",
            "id": "_isDraggableProperty"
          },
          {
            "ref": {
              "name": "Property",
              "refId": "Property",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_cursorProperty",
            "id": "_cursorProperty"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingMouseEventArgs",
                  "refId": "ThingMouseEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_clickEvent",
            "id": "_clickEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingMouseEventArgs",
                  "refId": "ThingMouseEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_mouseDownEvent",
            "id": "_mouseDownEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingMouseEventArgs",
                  "refId": "ThingMouseEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_mouseUpEvent",
            "id": "_mouseUpEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingMouseEventArgs",
                  "refId": "ThingMouseEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_mouseMoveEvent",
            "id": "_mouseMoveEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_mouseOutEvent",
            "id": "_mouseOutEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingDragStartingEventArgs",
                  "refId": "ThingDragStartingEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_dragStartingEvent",
            "id": "_dragStartingEvent"
          },
          {
            "ref": {
              "name": "AttachedEvent",
              "refId": "AttachedEvent",
              "arguments": [
                {
                  "name": "ThingDragEventArgs",
                  "refId": "ThingDragEventArgs"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_dragEvent",
            "id": "_dragEvent"
          },
          {
            "ref": {
              "name": "Stage",
              "refId": "Stage"
            },
            "kind": "property",
            "name": "_stage",
            "id": "_stage"
          },
          {
            "ref": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "property",
            "name": "_mouseDownThing",
            "id": "_mouseDownThing"
          },
          {
            "ref": {
              "name": "Thing",
              "refId": "Thing"
            },
            "kind": "property",
            "name": "_draggingThing",
            "id": "_draggingThing"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "_dragCoordinate",
            "id": "_dragCoordinate"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "MouseManager",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "stage",
                "id": "stage"
              }
            ],
            "id": "MouseManager1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "MouseManager._internal",
            "children": [
              {
                "ref": {
                  "name": "Stage",
                  "refId": "Stage"
                },
                "kind": "param",
                "name": "_stage",
                "id": "_stage"
              }
            ],
            "id": "MouseManager._internal1()"
          }
        ],
        "id": "MouseManager"
      },
      {
        "superclass": {
          "name": "_RetainedEnum",
          "refId": "_RetainedEnum"
        },
        "kind": "class",
        "name": "VerticalAlignment",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "VerticalAlignment._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "VerticalAlignment._internal1()"
          },
          {
            "ref": {
              "name": "VerticalAlignment",
              "refId": "VerticalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TOP",
            "id": "TOP"
          },
          {
            "ref": {
              "name": "VerticalAlignment",
              "refId": "VerticalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BOTTOM",
            "id": "BOTTOM"
          },
          {
            "ref": {
              "name": "VerticalAlignment",
              "refId": "VerticalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MIDDLE",
            "id": "MIDDLE"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "VerticalAlignment._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "VerticalAlignment._internal1()"
          }
        ],
        "id": "VerticalAlignment"
      },
      {
        "superclass": {
          "name": "_RetainedEnum",
          "refId": "_RetainedEnum"
        },
        "kind": "class",
        "name": "HorizontalAlignment",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "HorizontalAlignment._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "HorizontalAlignment._internal1()"
          },
          {
            "ref": {
              "name": "HorizontalAlignment",
              "refId": "HorizontalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LEFT",
            "id": "LEFT"
          },
          {
            "ref": {
              "name": "HorizontalAlignment",
              "refId": "HorizontalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "RIGHT",
            "id": "RIGHT"
          },
          {
            "ref": {
              "name": "HorizontalAlignment",
              "refId": "HorizontalAlignment"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CENTER",
            "id": "CENTER"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "HorizontalAlignment._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "HorizontalAlignment._internal1()"
          }
        ],
        "id": "HorizontalAlignment"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_retained.dart"
  },
  {
    "kind": "library",
    "name": "bot_test",
    "children": [
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nMatches a [Future] that completes succesfully with a value that matches\n[matcher]. Note that this creates an asynchronous expectation. The call to\n`expect()` that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n",
        "name": "finishesWith",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "finishesWith1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "expectFutureComplete",
        "children": [
          {
            "ref": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "param",
            "name": "future",
            "id": "future"
          },
          {
            "ref": {
              "name": "Action1",
              "refId": "Action1"
            },
            "isOptional": true,
            "kind": "param",
            "name": "onComplete",
            "id": "onComplete"
          }
        ],
        "id": "expectFutureComplete2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "expectFutureFail",
        "children": [
          {
            "ref": {
              "name": "Future",
              "refId": "Future"
            },
            "kind": "param",
            "name": "future",
            "id": "future"
          },
          {
            "ref": {
              "name": "Action1",
              "refId": "Action1"
            },
            "isOptional": true,
            "kind": "param",
            "name": "onException",
            "id": "onException"
          }
        ],
        "id": "expectFutureFail2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "pending",
        "id": "pending0()"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "finishes",
        "id": "finishes"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsAssertionError",
        "id": "throwsAssertionError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsNullArgumentError",
        "id": "throwsNullArgumentError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsInvalidOperationError",
        "id": "throwsInvalidOperationError"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "EventWatcher",
        "children": [
          {
            "returnType": {
              "name": "T",
              "refId": "T"
            },
            "kind": "method",
            "name": "lastArgs",
            "id": "lastArgs0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "eventCount",
            "id": "eventCount0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "handler",
            "children": [
              {
                "ref": {
                  "name": "T",
                  "refId": "T"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "handler1()"
          },
          {
            "ref": {
              "name": "T",
              "refId": "T"
            },
            "kind": "property",
            "name": "lastArgs",
            "id": "lastArgs"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "eventCount",
            "id": "eventCount"
          },
          {
            "ref": {
              "name": "T",
              "refId": "T"
            },
            "kind": "property",
            "name": "_lastArgs",
            "id": "_lastArgs"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_eventCount",
            "id": "_eventCount"
          }
        ],
        "id": "EventWatcher"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_test.dart"
  },
  {
    "kind": "library",
    "name": "bot_texture",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TextureInput",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextureInput",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "frame",
                "id": "frame"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "rotated",
                "id": "rotated"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "trimmed",
                "id": "trimmed"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "sourceColorRect",
                "id": "sourceColorRect"
              },
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "sourceSize",
                "id": "sourceSize"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              }
            ],
            "id": "TextureInput7()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextureInput.fromHash",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "keyName",
                "id": "keyName"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "map",
                "id": "map"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              }
            ],
            "id": "TextureInput.fromHash3()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Box",
              "refId": "Box"
            },
            "kind": "method",
            "name": "_parseRect",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "_parseRect1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "method",
            "name": "_parseCoordinate",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "_parseCoordinate1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Box",
              "refId": "Box"
            },
            "kind": "property",
            "name": "frame",
            "id": "frame"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "rotated",
            "id": "rotated"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "trimmed",
            "id": "trimmed"
          },
          {
            "ref": {
              "name": "Box",
              "refId": "Box"
            },
            "kind": "property",
            "name": "sourceColorRect",
            "id": "sourceColorRect"
          },
          {
            "ref": {
              "name": "Size",
              "refId": "Size"
            },
            "kind": "property",
            "name": "sourceSize",
            "id": "sourceSize"
          },
          {
            "ref": {
              "name": "ImageElement",
              "refId": "ImageElement"
            },
            "kind": "property",
            "name": "image",
            "id": "image"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextureInput",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "frame",
                "id": "frame"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "rotated",
                "id": "rotated"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "trimmed",
                "id": "trimmed"
              },
              {
                "ref": {
                  "name": "Box",
                  "refId": "Box"
                },
                "kind": "param",
                "name": "sourceColorRect",
                "id": "sourceColorRect"
              },
              {
                "ref": {
                  "name": "Size",
                  "refId": "Size"
                },
                "kind": "param",
                "name": "sourceSize",
                "id": "sourceSize"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              }
            ],
            "id": "TextureInput7()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextureInput.fromHash",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "keyName",
                "id": "keyName"
              },
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "dynamic",
                      "refId": "dynamic"
                    }
                  ]
                },
                "kind": "param",
                "name": "map",
                "id": "map"
              },
              {
                "ref": {
                  "name": "ImageElement",
                  "refId": "ImageElement"
                },
                "kind": "param",
                "name": "image",
                "id": "image"
              }
            ],
            "id": "TextureInput.fromHash3()"
          }
        ],
        "id": "TextureInput"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TextureData",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextureData",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "TextureInput",
                      "refId": "TextureInput"
                    }
                  ]
                },
                "kind": "param",
                "name": "_textures",
                "id": "_textures"
              }
            ],
            "id": "TextureData1()"
          },
          {
            "returnType": {
              "name": "TextureInput",
              "refId": "TextureInput"
            },
            "kind": "method",
            "name": "getTexture",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "key",
                "id": "key"
              }
            ],
            "id": "getTexture1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawTextureKeyAt",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "textureKey",
                "id": "textureKey"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "location",
                "id": "location"
              }
            ],
            "id": "drawTextureKeyAt3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawTextureAt",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "location",
                "id": "location"
              },
              {
                "ref": {
                  "name": "TextureInput",
                  "refId": "TextureInput"
                },
                "kind": "param",
                "name": "texture",
                "id": "texture"
              }
            ],
            "id": "drawTextureAt3()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "TextureInput",
                  "refId": "TextureInput"
                }
              ]
            },
            "kind": "property",
            "name": "_textures",
            "id": "_textures"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextureData",
            "children": [
              {
                "ref": {
                  "name": "Map",
                  "refId": "Map",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    },
                    {
                      "name": "TextureInput",
                      "refId": "TextureInput"
                    }
                  ]
                },
                "kind": "param",
                "name": "_textures",
                "id": "_textures"
              }
            ],
            "id": "TextureData1()"
          }
        ],
        "id": "TextureData"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TextureAnimationRequest",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextureAnimationRequest",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_texturePrefix",
                "id": "_texturePrefix"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "_frameCount",
                "id": "_frameCount"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "_offset",
                "id": "_offset"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "delay",
                "id": "delay"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "startFrame",
                "id": "startFrame"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialFrame",
                "id": "initialFrame"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialFrameOffset",
                "id": "initialFrameOffset"
              }
            ],
            "id": "TextureAnimationRequest7()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "fresh",
            "id": "fresh0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "done",
            "id": "done0()"
          },
          {
            "returnType": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "method",
            "name": "started",
            "id": "started0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "returnType": {
              "name": "Tuple",
              "refId": "Tuple",
              "arguments": [
                {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "_getFrameDetails",
            "id": "_getFrameDetails0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "fresh",
            "id": "fresh"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "done",
            "id": "done"
          },
          {
            "ref": {
              "name": "EventRoot",
              "refId": "EventRoot",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "started",
            "id": "started"
          },
          {
            "ref": {
              "name": "EventHandle",
              "refId": "EventHandle",
              "arguments": [
                {
                  "name": "EventArgs",
                  "refId": "EventArgs"
                }
              ]
            },
            "kind": "property",
            "name": "_startEventHandle",
            "id": "_startEventHandle"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_texturePrefix",
            "id": "_texturePrefix"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_frameCount",
            "id": "_frameCount"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "_offset",
            "id": "_offset"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_delay",
            "id": "_delay"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_initialFrame",
            "id": "_initialFrame"
          },
          {
            "ref": {
              "name": "Coordinate",
              "refId": "Coordinate"
            },
            "kind": "property",
            "name": "_initialFrameOffset",
            "id": "_initialFrameOffset"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_done",
            "id": "_done"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_frame",
            "id": "_frame"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextureAnimationRequest",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_texturePrefix",
                "id": "_texturePrefix"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "_frameCount",
                "id": "_frameCount"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "kind": "param",
                "name": "_offset",
                "id": "_offset"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "delay",
                "id": "delay"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "startFrame",
                "id": "startFrame"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialFrame",
                "id": "initialFrame"
              },
              {
                "ref": {
                  "name": "Coordinate",
                  "refId": "Coordinate"
                },
                "isOptional": true,
                "kind": "param",
                "name": "initialFrameOffset",
                "id": "initialFrameOffset"
              }
            ],
            "id": "TextureAnimationRequest7()"
          }
        ],
        "id": "TextureAnimationRequest"
      },
      {
        "superclass": {
          "name": "Thing",
          "refId": "Thing"
        },
        "kind": "class",
        "name": "TextureAnimationThing",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TextureAnimationThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "TextureData",
                  "refId": "TextureData"
                },
                "kind": "param",
                "name": "_textureData",
                "id": "_textureData"
              }
            ],
            "id": "TextureAnimationThing3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "TextureAnimationRequest",
                  "refId": "TextureAnimationRequest"
                },
                "kind": "param",
                "name": "request",
                "id": "request"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "id": "update0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawOverride",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "drawOverride1()"
          },
          {
            "ref": {
              "name": "TextureData",
              "refId": "TextureData"
            },
            "kind": "property",
            "name": "_textureData",
            "id": "_textureData"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "TextureAnimationRequest",
                  "refId": "TextureAnimationRequest"
                }
              ]
            },
            "kind": "property",
            "name": "_requests",
            "id": "_requests"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TextureAnimationThing",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "width",
                "id": "width"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "height",
                "id": "height"
              },
              {
                "ref": {
                  "name": "TextureData",
                  "refId": "TextureData"
                },
                "kind": "param",
                "name": "_textureData",
                "id": "_textureData"
              }
            ],
            "id": "TextureAnimationThing3()"
          }
        ],
        "id": "TextureAnimationThing"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/bot_texture.dart"
  },
  {
    "kind": "library",
    "name": "hop",
    "children": [
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "addAsyncTask",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "TaskDefinition",
              "refId": "TaskDefinition"
            },
            "kind": "param",
            "name": "execFuture",
            "id": "execFuture"
          }
        ],
        "id": "addAsyncTask2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "addSyncTask",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Func1",
              "refId": "Func1"
            },
            "kind": "param",
            "name": "execFunc",
            "id": "execFunc"
          }
        ],
        "id": "addSyncTask2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "addTask",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Task",
              "refId": "Task"
            },
            "kind": "param",
            "name": "task",
            "id": "task"
          }
        ],
        "id": "addTask2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\n[runHopCore] should be the last method you call in an application.\n\nNOTE: [runHopCore] calls [io.exit] which terminates the application.\n",
        "name": "runHopCore",
        "id": "runHopCore0()"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_sharedConfig",
        "id": "_sharedConfig"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TaskLogger",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fine",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "fine1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "info",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "info1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "warning",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "warning1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "severe",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "severe1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "log",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "log2()"
          }
        ],
        "id": "TaskLogger"
      },
      {
        "superclass": {
          "name": "Error",
          "refId": "Error"
        },
        "kind": "class",
        "name": "TaskFailError",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TaskFailError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "TaskFailError1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TaskFailError",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "TaskFailError1()"
          }
        ],
        "id": "TaskFailError"
      },
      {
        "interfaces": [
          {
            "name": "Disposable",
            "refId": "Disposable"
          }
        ],
        "superclass": {
          "name": "TaskLogger",
          "refId": "TaskLogger"
        },
        "kind": "class",
        "name": "TaskContext",
        "children": [
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "arguments",
            "id": "arguments0()"
          },
          {
            "returnType": {
              "name": "TaskLogger",
              "refId": "TaskLogger"
            },
            "kind": "method",
            "name": "getSubLogger",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "getSubLogger1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTerminates the current [Task] with a [TaskFailError] including the provided\n[message].\n",
            "name": "fail",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "fail1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "arguments",
            "id": "arguments"
          }
        ],
        "id": "TaskContext"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Task",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Task.sync",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "exec",
                "id": "exec"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "Task.sync2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Task.async",
            "children": [
              {
                "ref": {
                  "name": "TaskDefinition",
                  "refId": "TaskDefinition"
                },
                "kind": "param",
                "name": "_exec",
                "id": "_exec"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "desc",
                "id": "desc"
              }
            ],
            "id": "Task.async2()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "method",
            "name": "run",
            "children": [
              {
                "ref": {
                  "name": "TaskContext",
                  "refId": "TaskContext"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "run1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_nullFutureResultEx",
            "id": "_nullFutureResultEx"
          },
          {
            "ref": {
              "name": "TaskDefinition",
              "refId": "TaskDefinition"
            },
            "kind": "property",
            "name": "_exec",
            "id": "_exec"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "description",
            "id": "description"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Task.sync",
            "children": [
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "exec",
                "id": "exec"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "Task.sync2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Task.async",
            "children": [
              {
                "ref": {
                  "name": "TaskDefinition",
                  "refId": "TaskDefinition"
                },
                "kind": "param",
                "name": "_exec",
                "id": "_exec"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "desc",
                "id": "desc"
              }
            ],
            "id": "Task.async2()"
          }
        ],
        "id": "Task"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "RunResult",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RunResult._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "exitCode",
                "id": "exitCode"
              }
            ],
            "id": "RunResult._internal1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "success",
            "id": "success0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "success",
            "id": "success"
          },
          {
            "ref": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SUCCESS",
            "id": "SUCCESS"
          },
          {
            "ref": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BAD_USAGE",
            "id": "BAD_USAGE"
          },
          {
            "ref": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FAIL",
            "id": "FAIL"
          },
          {
            "ref": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "isStatic": true,
            "kind": "property",
            "name": "EXCEPTION",
            "id": "EXCEPTION"
          },
          {
            "ref": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ERROR",
            "id": "ERROR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "exitCode",
            "id": "exitCode"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RunResult._internal",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "exitCode",
                "id": "exitCode"
              }
            ],
            "id": "RunResult._internal1()"
          }
        ],
        "id": "RunResult"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "RootTaskContext",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RootTaskContext",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "enableColor",
                "id": "enableColor"
              }
            ],
            "id": "RootTaskContext1()"
          },
          {
            "returnType": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "method",
            "name": "getSubContext",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "arguments",
                "id": "arguments"
              }
            ],
            "id": "getSubContext2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "log",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              },
              {
                "ref": {
                  "name": "AnsiColor",
                  "refId": "AnsiColor"
                },
                "isOptional": true,
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "log2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_subTaskLog",
            "children": [
              {
                "ref": {
                  "name": "_SubTaskContext",
                  "refId": "_SubTaskContext"
                },
                "kind": "param",
                "name": "subTask",
                "id": "subTask"
              },
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "_subTaskLog3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_logCore",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "titleSections",
                "id": "titleSections"
              },
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "_logCore3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "printCore",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "printCore1()"
          },
          {
            "returnType": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "kind": "method",
            "name": "_getColor",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              }
            ],
            "id": "_getColor1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "AnsiColor",
              "refId": "AnsiColor"
            },
            "kind": "method",
            "name": "getLogColor",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              }
            ],
            "id": "getLogColor1()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_enableColor",
            "id": "_enableColor"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RootTaskContext",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "enableColor",
                "id": "enableColor"
              }
            ],
            "id": "RootTaskContext1()"
          }
        ],
        "id": "RootTaskContext"
      },
      {
        "superclass": {
          "name": "TaskContext",
          "refId": "TaskContext"
        },
        "kind": "class",
        "name": "ConsoleContext",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ConsoleContext.raw",
            "children": [
              {
                "ref": {
                  "name": "ReadOnlyCollection",
                  "refId": "ReadOnlyCollection",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "arguments",
                "id": "arguments"
              }
            ],
            "id": "ConsoleContext.raw1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ConsoleContext",
            "id": "ConsoleContext0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "log",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "log2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fail",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "fail1()"
          },
          {
            "returnType": {
              "name": "TaskLogger",
              "refId": "TaskLogger"
            },
            "kind": "method",
            "comment": "\nAt the moment [getSubLogger] returns [this].\n",
            "name": "getSubLogger",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "getSubLogger1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isDisposed",
            "id": "isDisposed0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "dispose",
            "id": "dispose0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "runTaskAsProcess",
            "children": [
              {
                "ref": {
                  "name": "Task",
                  "refId": "Task"
                },
                "kind": "param",
                "name": "task",
                "id": "task"
              }
            ],
            "id": "runTaskAsProcess1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_assertNotDisposed",
            "id": "_assertNotDisposed0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isDisposed",
            "id": "isDisposed"
          },
          {
            "ref": {
              "name": "ReadOnlyCollection",
              "refId": "ReadOnlyCollection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "arguments",
            "id": "arguments"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_isDisposed",
            "id": "_isDisposed"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ConsoleContext.raw",
            "children": [
              {
                "ref": {
                  "name": "ReadOnlyCollection",
                  "refId": "ReadOnlyCollection",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "arguments",
                "id": "arguments"
              }
            ],
            "id": "ConsoleContext.raw1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ConsoleContext",
            "id": "ConsoleContext0()"
          }
        ],
        "id": "ConsoleContext"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "BaseConfig",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BaseConfig",
            "id": "BaseConfig0()"
          },
          {
            "returnType": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "comment": "Can only be accessed when frozen\nAlways sorted",
            "name": "taskNames",
            "id": "taskNames0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "hasTask",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "taskName",
                "id": "taskName"
              }
            ],
            "id": "hasTask1()"
          },
          {
            "returnType": {
              "name": "Task",
              "refId": "Task"
            },
            "kind": "method",
            "name": "_getTask",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "taskName",
                "id": "taskName"
              }
            ],
            "id": "_getTask1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addSync",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Func1",
                  "refId": "Func1"
                },
                "kind": "param",
                "name": "func",
                "id": "func"
              }
            ],
            "id": "addSync2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addAsync",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "TaskDefinition",
                  "refId": "TaskDefinition"
                },
                "kind": "param",
                "name": "execFuture",
                "id": "execFuture"
              }
            ],
            "id": "addAsync2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addTask",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Task",
                  "refId": "Task"
                },
                "kind": "param",
                "name": "task",
                "id": "task"
              }
            ],
            "id": "addTask2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "requireFrozen",
            "id": "requireFrozen0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "freeze",
            "id": "freeze0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isFrozen",
            "id": "isFrozen0()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "comment": "Can only be accessed when frozen\nAlways sorted",
            "name": "taskNames",
            "id": "taskNames"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isFrozen",
            "id": "isFrozen"
          },
          {
            "ref": {
              "name": "RegExp",
              "refId": "RegExp"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_validNameRegExp",
            "id": "_validNameRegExp"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_reservedTasks",
            "id": "_reservedTasks"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Task",
                  "refId": "Task"
                }
              ]
            },
            "kind": "property",
            "name": "_tasks",
            "id": "_tasks"
          },
          {
            "ref": {
              "name": "ReadOnlyCollection",
              "refId": "ReadOnlyCollection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "_sortedTaskNames",
            "id": "_sortedTaskNames"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BaseConfig",
            "id": "BaseConfig0()"
          }
        ],
        "id": "BaseConfig"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Runner",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Runner",
            "children": [
              {
                "ref": {
                  "name": "BaseConfig",
                  "refId": "BaseConfig"
                },
                "kind": "param",
                "name": "_state",
                "id": "_state"
              },
              {
                "ref": {
                  "name": "ArgResults",
                  "refId": "ArgResults"
                },
                "kind": "param",
                "name": "_args",
                "id": "_args"
              }
            ],
            "id": "Runner2()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "RunResult",
                  "refId": "RunResult"
                }
              ]
            },
            "kind": "method",
            "name": "run",
            "id": "run0()"
          },
          {
            "returnType": {
              "name": "RootTaskContext",
              "refId": "RootTaskContext"
            },
            "kind": "method",
            "name": "getContext",
            "id": "getContext0()"
          },
          {
            "returnType": {
              "name": "Future",
              "refId": "Future",
              "arguments": [
                {
                  "name": "RunResult",
                  "refId": "RunResult"
                }
              ]
            },
            "kind": "method",
            "name": "_runTask",
            "children": [
              {
                "ref": {
                  "name": "TaskContext",
                  "refId": "TaskContext"
                },
                "kind": "param",
                "name": "context",
                "id": "context"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "taskName",
                "id": "taskName"
              }
            ],
            "id": "_runTask2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_printHelp",
            "children": [
              {
                "ref": {
                  "name": "RootTaskContext",
                  "refId": "RootTaskContext"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_printHelp1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_printRawTasks",
            "children": [
              {
                "ref": {
                  "name": "RootTaskContext",
                  "refId": "RootTaskContext"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_printRawTasks1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_printTaskTable",
            "children": [
              {
                "ref": {
                  "name": "RootTaskContext",
                  "refId": "RootTaskContext"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "_printTaskTable1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "method",
            "name": "parseArgs",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "parseArgs1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getUsage",
            "id": "getUsage0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "RunResult",
              "refId": "RunResult"
            },
            "kind": "method",
            "name": "_logExitCode",
            "children": [
              {
                "ref": {
                  "name": "RootTaskContext",
                  "refId": "RootTaskContext"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              },
              {
                "ref": {
                  "name": "RunResult",
                  "refId": "RunResult"
                },
                "kind": "param",
                "name": "result",
                "id": "result"
              }
            ],
            "id": "_logExitCode2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "kind": "method",
            "name": "_getParser",
            "id": "_getParser0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_colorParam",
            "id": "_colorParam"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "RAW_TASK_LIST_CMD",
            "id": "RAW_TASK_LIST_CMD"
          },
          {
            "ref": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_parser",
            "id": "_parser"
          },
          {
            "ref": {
              "name": "ArgResults",
              "refId": "ArgResults"
            },
            "kind": "property",
            "name": "_args",
            "id": "_args"
          },
          {
            "ref": {
              "name": "BaseConfig",
              "refId": "BaseConfig"
            },
            "kind": "property",
            "name": "_state",
            "id": "_state"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Runner",
            "children": [
              {
                "ref": {
                  "name": "BaseConfig",
                  "refId": "BaseConfig"
                },
                "kind": "param",
                "name": "_state",
                "id": "_state"
              },
              {
                "ref": {
                  "name": "ArgResults",
                  "refId": "ArgResults"
                },
                "kind": "param",
                "name": "_args",
                "id": "_args"
              }
            ],
            "id": "Runner2()"
          }
        ],
        "id": "Runner"
      },
      {
        "kind": "typedef",
        "name": "TaskDefinition",
        "id": "TaskDefinition"
      }
    ],
    "id": "package:bot/hop.dart"
  },
  {
    "kind": "library",
    "name": "hop_tasks",
    "children": [
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "createUnitTestTask",
        "children": [
          {
            "ref": {
              "name": "Action1",
              "refId": "Action1"
            },
            "kind": "param",
            "name": "unitTestAction",
            "id": "unitTestAction"
          }
        ],
        "id": "createUnitTestTask1()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "int",
              "refId": "int"
            }
          ]
        },
        "kind": "method",
        "name": "pipeProcess",
        "children": [
          {
            "ref": {
              "name": "Process",
              "refId": "Process"
            },
            "kind": "param",
            "name": "process",
            "id": "process"
          },
          {
            "ref": {
              "name": "Action1",
              "refId": "Action1"
            },
            "isOptional": true,
            "kind": "param",
            "name": "stdOutWriter",
            "id": "stdOutWriter"
          },
          {
            "ref": {
              "name": "Action1",
              "refId": "Action1"
            },
            "isOptional": true,
            "kind": "param",
            "name": "stdErrWriter",
            "id": "stdErrWriter"
          }
        ],
        "id": "pipeProcess3()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "startProcess",
        "children": [
          {
            "ref": {
              "name": "TaskLogger",
              "refId": "TaskLogger"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "command",
            "id": "command"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "isOptional": true,
            "kind": "param",
            "name": "args",
            "id": "args"
          }
        ],
        "id": "startProcess3()"
      },
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "createProcessTask",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "command",
            "id": "command"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "isOptional": true,
            "kind": "param",
            "name": "args",
            "id": "args"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "description",
            "id": "description"
          }
        ],
        "id": "createProcessTask3()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_doCommit",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "verb",
            "id": "verb"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "gitArgs",
            "id": "gitArgs"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceBranch",
            "id": "sourceBranch"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceDir",
            "id": "sourceDir"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "targetBranch",
            "id": "targetBranch"
          },
          {
            "ref": {
              "name": "GitDir",
              "refId": "GitDir"
            },
            "kind": "param",
            "name": "gitDir",
            "id": "gitDir"
          }
        ],
        "id": "_doCommit7()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_withExistingBranch",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "BranchReference",
              "refId": "BranchReference"
            },
            "kind": "param",
            "name": "targetBranchRef",
            "id": "targetBranchRef"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "dirSha",
            "id": "dirSha"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceDir",
            "id": "sourceDir"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "gitArgs",
            "id": "gitArgs"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceBranch",
            "id": "sourceBranch"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "targetBranch",
            "id": "targetBranch"
          },
          {
            "ref": {
              "name": "GitDir",
              "refId": "GitDir"
            },
            "kind": "param",
            "name": "gitDir",
            "id": "gitDir"
          }
        ],
        "id": "_withExistingBranch8()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "branchForDir",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceBranch",
            "id": "sourceBranch"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "sourceDir",
            "id": "sourceDir"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "targetBranch",
            "id": "targetBranch"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "workingDir",
            "id": "workingDir"
          }
        ],
        "id": "branchForDir5()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_dartDoc",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "TempDir",
              "refId": "TempDir"
            },
            "kind": "param",
            "name": "outputDir",
            "id": "outputDir"
          },
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "libs",
            "id": "libs"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "packageDir",
            "id": "packageDir"
          }
        ],
        "id": "_dartDoc4()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "String",
              "refId": "String"
            }
          ]
        },
        "kind": "method",
        "name": "_getCommitMessageFuture",
        "children": [
          {
            "ref": {
              "name": "GitDir",
              "refId": "GitDir"
            },
            "kind": "param",
            "name": "gitDir",
            "id": "gitDir"
          }
        ],
        "id": "_getCommitMessageFuture1()"
      },
      {
        "returnType": {
          "name": "ArgParser",
          "refId": "ArgParser"
        },
        "kind": "method",
        "name": "_getDartDocParser",
        "id": "_getDartDocParser0()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future"
        },
        "kind": "method",
        "name": "_doDocsPopulate",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "TempDir",
              "refId": "TempDir"
            },
            "kind": "param",
            "name": "dir",
            "id": "dir"
          },
          {
            "ref": {
              "name": "Collection",
              "refId": "Collection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "libs",
            "id": "libs"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "packageDir",
            "id": "packageDir"
          }
        ],
        "id": "_doDocsPopulate4()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "compileDocs",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "targetBranch",
            "id": "targetBranch"
          },
          {
            "ref": {
              "name": "Func",
              "refId": "Func"
            },
            "kind": "param",
            "name": "libGetter",
            "id": "libGetter"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "packageDir",
            "id": "packageDir"
          }
        ],
        "id": "compileDocs4()"
      },
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "getCompileDocsFunc",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "targetBranch",
            "id": "targetBranch"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "packageDir",
            "id": "packageDir"
          },
          {
            "ref": {
              "name": "Func",
              "refId": "Func"
            },
            "kind": "param",
            "name": "libGetter",
            "id": "libGetter"
          }
        ],
        "id": "getCompileDocsFunc3()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_chainTasks",
        "children": [
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Func",
                  "refId": "Func"
                }
              ]
            },
            "kind": "param",
            "name": "futures",
            "id": "futures"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isOptional": true,
            "kind": "param",
            "name": "index",
            "id": "index"
          }
        ],
        "id": "_chainTasks2()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_dart2js",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "file",
            "id": "file"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "output",
            "id": "output"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "packageRoot",
            "id": "packageRoot"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "minify",
            "id": "minify"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "allowUnsafeEval",
            "id": "allowUnsafeEval"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "liveTypeAnalysis",
            "id": "liveTypeAnalysis"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "rejectDeprecatedFeatures",
            "id": "rejectDeprecatedFeatures"
          }
        ],
        "id": "_dart2js8()"
      },
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "createDart2JsTask",
        "children": [
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "inputs",
            "id": "inputs"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "output",
            "id": "output"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "packageRoot",
            "id": "packageRoot"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "minify",
            "id": "minify"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "allowUnsafeEval",
            "id": "allowUnsafeEval"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "liveTypeAnalysis",
            "id": "liveTypeAnalysis"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "rejectDeprecatedFeatures",
            "id": "rejectDeprecatedFeatures"
          }
        ],
        "id": "createDart2JsTask7()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "int",
              "refId": "int"
            }
          ]
        },
        "kind": "method",
        "name": "_analyzer",
        "children": [
          {
            "ref": {
              "name": "TaskLogger",
              "refId": "TaskLogger"
            },
            "kind": "param",
            "name": "logger",
            "id": "logger"
          },
          {
            "ref": {
              "name": "Path",
              "refId": "Path"
            },
            "kind": "param",
            "name": "filePath",
            "id": "filePath"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "enableTypeChecks",
            "id": "enableTypeChecks"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "verbose",
            "id": "verbose"
          }
        ],
        "id": "_analyzer4()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "bool",
              "refId": "bool"
            }
          ]
        },
        "kind": "method",
        "name": "_processAnalyzerFile",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "context",
            "id": "context"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Path",
                  "refId": "Path"
                }
              ]
            },
            "kind": "param",
            "name": "analyzerFilePaths",
            "id": "analyzerFilePaths"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "enableTypeChecks",
            "id": "enableTypeChecks"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "verbose",
            "id": "verbose"
          }
        ],
        "id": "_processAnalyzerFile4()"
      },
      {
        "returnType": {
          "name": "ArgParser",
          "refId": "ArgParser"
        },
        "kind": "method",
        "name": "_getDartAnalyzerParser",
        "id": "_getDartAnalyzerParser0()"
      },
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "createDartAnalyzerTask",
        "children": [
          {
            "ref": {
              "name": "Iterable",
              "refId": "Iterable",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "files",
            "id": "files"
          }
        ],
        "id": "createDartAnalyzerTask1()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "_BenchRunResult",
              "refId": "_BenchRunResult"
            }
          ]
        },
        "kind": "method",
        "name": "_runOnce",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "runNumber",
            "id": "runNumber"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "processName",
            "id": "processName"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "args",
            "id": "args"
          }
        ],
        "id": "_runOnce3()"
      },
      {
        "returnType": {
          "name": "Future",
          "refId": "Future",
          "arguments": [
            {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "_BenchRunResult",
                  "refId": "_BenchRunResult"
                }
              ]
            }
          ]
        },
        "kind": "method",
        "name": "_runMany",
        "children": [
          {
            "ref": {
              "name": "TaskLogger",
              "refId": "TaskLogger"
            },
            "kind": "param",
            "name": "logger",
            "id": "logger"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "processName",
            "id": "processName"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "args",
            "id": "args"
          }
        ],
        "id": "_runMany4()"
      },
      {
        "returnType": {
          "name": "ArgParser",
          "refId": "ArgParser"
        },
        "kind": "method",
        "name": "_getBenchParser",
        "id": "_getBenchParser0()"
      },
      {
        "returnType": {
          "name": "Task",
          "refId": "Task"
        },
        "kind": "method",
        "name": "createBenchTask",
        "id": "createBenchTask0()"
      },
      {
        "returnType": {
          "name": "ArgResults",
          "refId": "ArgResults"
        },
        "kind": "method",
        "name": "_helpfulParseArgs",
        "children": [
          {
            "ref": {
              "name": "TaskContext",
              "refId": "TaskContext"
            },
            "kind": "param",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "ref": {
              "name": "ArgParser",
              "refId": "ArgParser"
            },
            "kind": "param",
            "name": "parser",
            "id": "parser"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "param",
            "name": "args",
            "id": "args"
          }
        ],
        "id": "_helpfulParseArgs3()"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_defaultRunCount",
        "id": "_defaultRunCount"
      }
    ],
    "id": "file:///Users/kevin/source/github/bot.dart/lib/hop_tasks.dart"
  },
  {
    "kind": "library",
    "comment": "\nProvides APIs for debugging and error logging. This library introduces\nabstractions similar to those used in other languages, such as the Closure JS\nLogger and java.util.logging.Logger.\n",
    "name": "logging",
    "children": [
      {
        "ref": {
          "name": "Level",
          "refId": "Level"
        },
        "kind": "property",
        "name": "_rootLevel",
        "id": "_rootLevel"
      },
      {
        "ref": {
          "name": "bool",
          "refId": "bool"
        },
        "kind": "property",
        "name": "hierarchicalLoggingEnabled",
        "id": "hierarchicalLoggingEnabled"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA log entry representation used to propagate information from [Logger] to\nindividual [Handler]s.\n",
        "name": "LogRecord",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "LogRecord",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "level",
                "id": "level"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "loggerName",
                "id": "loggerName"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "time",
                "id": "time"
              },
              {
                "ref": {
                  "name": "Exception",
                  "refId": "Exception"
                },
                "isOptional": true,
                "kind": "param",
                "name": "exception",
                "id": "exception"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "exceptionText",
                "id": "exceptionText"
              }
            ],
            "id": "LogRecord6()"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "kind": "property",
            "name": "level",
            "id": "level"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "loggerName",
            "id": "loggerName"
          },
          {
            "ref": {
              "name": "DateTime",
              "refId": "DateTime"
            },
            "kind": "property",
            "name": "time",
            "id": "time"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "sequenceNumber",
            "id": "sequenceNumber"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_nextNumber",
            "id": "_nextNumber"
          },
          {
            "ref": {
              "name": "Exception",
              "refId": "Exception"
            },
            "kind": "property",
            "name": "exception",
            "id": "exception"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "exceptionText",
            "id": "exceptionText"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "LogRecord",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "level",
                "id": "level"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "loggerName",
                "id": "loggerName"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "time",
                "id": "time"
              },
              {
                "ref": {
                  "name": "Exception",
                  "refId": "Exception"
                },
                "isOptional": true,
                "kind": "param",
                "name": "exception",
                "id": "exception"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "exceptionText",
                "id": "exceptionText"
              }
            ],
            "id": "LogRecord6()"
          }
        ],
        "id": "LogRecord"
      },
      {
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\n[Level]s to control logging output. Logging can be enabled to include all\nlevels above certain [Level]. [Level]s are ordered using an integer\nvalue [Level.value]. The predefined [Level] constants below are sorted as\nfollows (in descending order): [Level.SHOUT], [Level.SEVERE],\n[Level.WARNING], [Level.INFO], [Level.CONFIG], [Level.FINE], [Level.FINER],\n[Level.FINEST], and [Level.ALL].\n\nWe recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in [Level.ALL] and\n[Level.OFF].\n",
        "name": "Level",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Level",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "Level2()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "<1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "<=",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "<=1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": ">1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": ">=",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": ">=1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "compareTo",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "compareTo1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "hashCode",
            "id": "hashCode0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "hashCode",
            "id": "hashCode"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "value",
            "id": "value"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ALL",
            "id": "ALL"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "OFF",
            "id": "OFF"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FINEST",
            "id": "FINEST"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FINER",
            "id": "FINER"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FINE",
            "id": "FINE"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CONFIG",
            "id": "CONFIG"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "INFO",
            "id": "INFO"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "WARNING",
            "id": "WARNING"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SEVERE",
            "id": "SEVERE"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SHOUT",
            "id": "SHOUT"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Level",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "Level2()"
          }
        ],
        "id": "Level"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "List of handlers that will be called on a logger event. ",
        "name": "LoggerHandlerList",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "LoggerHandlerList",
            "children": [
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "_logger",
                "id": "_logger"
              }
            ],
            "id": "LoggerHandlerList1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "LoggerHandler",
                  "refId": "LoggerHandler"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "LoggerHandler",
                  "refId": "LoggerHandler"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "remove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()"
          },
          {
            "ref": {
              "name": "Logger",
              "refId": "Logger"
            },
            "kind": "property",
            "name": "_logger",
            "id": "_logger"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "LoggerHandlerList",
            "children": [
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "_logger",
                "id": "_logger"
              }
            ],
            "id": "LoggerHandlerList1()"
          }
        ],
        "id": "LoggerHandlerList"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "Event manager for a [Logger] (holds events that a [Logger] can fire). ",
        "name": "LoggerEvents",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "LoggerEvents",
            "children": [
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "_logger",
                "id": "_logger"
              }
            ],
            "id": "LoggerEvents1()"
          },
          {
            "returnType": {
              "name": "LoggerHandlerList",
              "refId": "LoggerHandlerList"
            },
            "kind": "method",
            "comment": "Event fired when a log record is added to a [Logger]. ",
            "name": "record",
            "id": "record0()"
          },
          {
            "ref": {
              "name": "LoggerHandlerList",
              "refId": "LoggerHandlerList"
            },
            "kind": "property",
            "comment": "Event fired when a log record is added to a [Logger]. ",
            "name": "record",
            "id": "record"
          },
          {
            "ref": {
              "name": "Logger",
              "refId": "Logger"
            },
            "kind": "property",
            "name": "_logger",
            "id": "_logger"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "LoggerEvents",
            "children": [
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "_logger",
                "id": "_logger"
              }
            ],
            "id": "LoggerEvents1()"
          }
        ],
        "id": "LoggerEvents"
      },
      {
        "kind": "typedef",
        "comment": "Handler callback to process log entries as they are added to a [Logger]. ",
        "name": "LoggerHandler",
        "id": "LoggerHandler"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nUse a [Logger] to log debug messages. [Logger]s are named using a\nhierarchical dot-separated name convention.\n",
        "name": "Logger",
        "children": [
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "The full name of this logger, which includes the parent's full name. ",
            "name": "fullName",
            "id": "fullName0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n",
            "name": "Logger",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Logger1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Logger._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "Logger._internal2()"
          },
          {
            "returnType": {
              "name": "Level",
              "refId": "Level"
            },
            "kind": "method",
            "comment": "\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n",
            "name": "level",
            "id": "level0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Override the level for this particular [Logger] and its children. ",
            "name": "level=",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "level=1()"
          },
          {
            "returnType": {
              "name": "LoggerEvents",
              "refId": "LoggerEvents"
            },
            "kind": "method",
            "comment": "\nReturns an event manager for this [Logger]. You can listen for log messages\nby adding a [LoggerHandler] to an event from the event manager, for\ninstance:\n   logger.on.record.add((record) { ... });\n",
            "name": "on",
            "id": "on0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Adds a handler to listen whenever a log record is added to this logger. ",
            "name": "_addHandler",
            "children": [
              {
                "ref": {
                  "name": "LoggerHandler",
                  "refId": "LoggerHandler"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "_addHandler1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Remove a previously added handler. ",
            "name": "_removeHandler",
            "children": [
              {
                "ref": {
                  "name": "LoggerHandler",
                  "refId": "LoggerHandler"
                },
                "kind": "param",
                "name": "handler",
                "id": "handler"
              }
            ],
            "id": "_removeHandler1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Removes all handlers previously added to this logger. ",
            "name": "_clearHandlers",
            "id": "_clearHandlers0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Whether a message for [value]'s level is loggable in this logger. ",
            "name": "isLoggable",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "isLoggable1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds a log record for a [message] at a particular [logLevel] if\n`isLoggable(logLevel)` is true. Use this method to create log entries for\nuser-defined levels. To record a message at a predefined level (e.g.\n[Level.INFO], [Level.WARNING], etc) you can use their specialized methods\ninstead (e.g. [info], [warning], etc).\n",
            "name": "log",
            "children": [
              {
                "ref": {
                  "name": "Level",
                  "refId": "Level"
                },
                "kind": "param",
                "name": "logLevel",
                "id": "logLevel"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "log2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.FINEST]. ",
            "name": "finest",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "finest1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.FINER]. ",
            "name": "finer",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "finer1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.FINE]. ",
            "name": "fine",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "fine1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.CONFIG]. ",
            "name": "config",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "config1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.INFO]. ",
            "name": "info",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "info1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.WARNING]. ",
            "name": "warning",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "warning1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.SEVERE]. ",
            "name": "severe",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "severe1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Log message at level [Level.SHOUT]. ",
            "name": "shout",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "shout1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_publish",
            "children": [
              {
                "ref": {
                  "name": "LogRecord",
                  "refId": "LogRecord"
                },
                "kind": "param",
                "name": "record",
                "id": "record"
              }
            ],
            "id": "_publish1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Top-level root [Logger]. ",
            "name": "root",
            "id": "root0()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "comment": "The full name of this logger, which includes the parent's full name. ",
            "name": "fullName",
            "id": "fullName"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "kind": "property",
            "comment": "\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n",
            "name": "level",
            "id": "level"
          },
          {
            "ref": {
              "name": "LoggerEvents",
              "refId": "LoggerEvents"
            },
            "kind": "property",
            "comment": "\nReturns an event manager for this [Logger]. You can listen for log messages\nby adding a [LoggerHandler] to an event from the event manager, for\ninstance:\n   logger.on.record.add((record) { ... });\n",
            "name": "on",
            "id": "on"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "comment": "Top-level root [Logger]. ",
            "name": "root",
            "id": "root"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Logger",
              "refId": "Logger"
            },
            "kind": "property",
            "name": "parent",
            "id": "parent"
          },
          {
            "ref": {
              "name": "Level",
              "refId": "Level"
            },
            "kind": "property",
            "name": "_level",
            "id": "_level"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Logger",
                  "refId": "Logger"
                }
              ]
            },
            "kind": "property",
            "name": "children",
            "id": "children"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "LoggerHandler",
                  "refId": "LoggerHandler"
                }
              ]
            },
            "kind": "property",
            "name": "_handlers",
            "id": "_handlers"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Logger",
                  "refId": "Logger"
                }
              ]
            },
            "isStatic": true,
            "kind": "property",
            "name": "_loggers",
            "id": "_loggers"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n",
            "name": "Logger",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Logger1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Logger._internal",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "Logger",
                  "refId": "Logger"
                },
                "kind": "param",
                "name": "parent",
                "id": "parent"
              }
            ],
            "id": "Logger._internal2()"
          }
        ],
        "id": "Logger"
      }
    ],
    "id": "package:logging/logging.dart"
  },
  {
    "kind": "library",
    "comment": "\nThe matcher library provides a 3rd generation assertion mechanism, drawing\ninspiration from [Hamcrest] and Ladislav Thon's [dart-matchers]\nlibrary.\n\nSee [Hamcrest] http://en.wikipedia.org/wiki/Hamcrest\n    [Hamcrest] http://code.google.com/p/hamcrest/\n    [dart-matchers] https://github.com/Ladicek/dart-matchers\n",
    "name": "matcher",
    "children": [
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument is a string and\nmatches the regular expression given by [re]. [re] can be a RegExp\ninstance or a string; in the latter case it will be used to create\na RegExp instance.\n",
        "name": "matches",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "re",
            "id": "re"
          }
        ],
        "id": "matches1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument is a string and\ncontains a given list of [substrings] in relative order.\n\nFor example, `stringContainsInOrder([\"a\", \"e\", \"i\", \"o\", \"u\"])` will match\n\"abcdefghijklmnopqrstuvwxyz\".\n",
        "name": "stringContainsInOrder",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "substrings",
            "id": "substrings"
          }
        ],
        "id": "stringContainsInOrder1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument is a string and\nends with [suffixString].\n",
        "name": "endsWith",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "suffixString",
            "id": "suffixString"
          }
        ],
        "id": "endsWith1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument is a string and\nstarts with [prefixString].\n",
        "name": "startsWith",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "prefixString",
            "id": "prefixString"
          }
        ],
        "id": "startsWith1()"
      },
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "comment": "\nUtility function to collapse whitespace runs to single spaces\nand strip leading/trailing whitespace.\n",
        "name": "collapseWhitespace",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "_string",
            "id": "_string"
          }
        ],
        "id": "collapseWhitespace1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is a string and\nis equal to [value] when compared with all runs of whitespace\ncollapsed to single spaces and leading and trailing whitespace removed.\n\nFor example, `equalsIgnoringCase(\"hello world\")` will match\n\"hello   world\", \"  hello world\" and \"hello world  \".\n",
        "name": "equalsIgnoringWhitespace",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "_string",
            "id": "_string"
          }
        ],
        "id": "equalsIgnoringWhitespace1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is a string and\nis equal to [value] when compared case-insensitively.\n",
        "name": "equalsIgnoringCase",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "equalsIgnoringCase1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nMatches if any of the given matchers evaluate to true. The\narguments can be a set of matchers as separate parameters\n(up to 7), or a List of matchers.\n\nThe matchers are evaluated from left to right using short-circuit\nevaluation, so evaluation stops as soon as a matcher returns true.\n\nAny argument that is not a matcher is implicitly wrapped in a\nMatcher to check for equality.\n",
        "name": "anyOf",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "arg0",
            "id": "arg0"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg1",
            "id": "arg1"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg2",
            "id": "arg2"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg3",
            "id": "arg3"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg4",
            "id": "arg4"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg5",
            "id": "arg5"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg6",
            "id": "arg6"
          }
        ],
        "id": "anyOf7()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nThis returns a matcher that matches if all of the matchers passed as\narguments (up to 7) match. Instead of passing the matchers separately\nthey can be passed as a single List argument.\nAny argument that is not a matcher is implicitly wrapped in a\nMatcher to check for equality.\n",
        "name": "allOf",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "arg0",
            "id": "arg0"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg1",
            "id": "arg1"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg2",
            "id": "arg2"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg3",
            "id": "arg3"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg4",
            "id": "arg4"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg5",
            "id": "arg5"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg6",
            "id": "arg6"
          }
        ],
        "id": "allOf7()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nThis returns a matcher that inverts [matcher] to its logical negation.\n",
        "name": "isNot",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "isNot1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan or equal to a [low] and less than [high].\n",
        "name": "inClosedOpenRange",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "low",
            "id": "low"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "high",
            "id": "high"
          }
        ],
        "id": "inClosedOpenRange2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan [low] and less than or equal to [high].\n",
        "name": "inOpenClosedRange",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "low",
            "id": "low"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "high",
            "id": "high"
          }
        ],
        "id": "inOpenClosedRange2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan [low] and less than [high].\n",
        "name": "inExclusiveRange",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "low",
            "id": "low"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "high",
            "id": "high"
          }
        ],
        "id": "inExclusiveRange2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan or equal to [low] and less than or equal to [high].\n",
        "name": "inInclusiveRange",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "low",
            "id": "low"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "high",
            "id": "high"
          }
        ],
        "id": "inInclusiveRange2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is within [delta]\nof some [value]; i.e. if the match argument is greater than\nthan or equal [value]-[delta] and less than or equal to [value]+[delta].\n",
        "name": "closeTo",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "delta",
            "id": "delta"
          }
        ],
        "id": "closeTo2()"
      },
      {
        "returnType": {
          "name": "bool",
          "refId": "bool"
        },
        "kind": "method",
        "name": "_isNumeric",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "_isNumeric1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is less\nthan or equal to the given [value].\n",
        "name": "lessThanOrEqualTo",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "lessThanOrEqualTo1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is less\nthan the given [value].\n",
        "name": "lessThan",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "lessThan1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan or equal to the given [value].\n",
        "name": "greaterThanOrEqualTo",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "greaterThanOrEqualTo1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches if the match argument is greater\nthan the given [value].\n",
        "name": "greaterThan",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "greaterThan1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches maps containing the key-value pair\nwith [key] => [value].\n",
        "name": "containsPair",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "key",
            "id": "key"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "containsPair2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches maps containing the given [value].\n",
        "name": "containsValue",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "containsValue1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nMatches a [Future] that completes succesfully with a value that matches\n[matcher]. Note that this creates an asynchronous expectation. The call to\n`expect()` that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n",
        "name": "completion",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "completion1()"
      },
      {
        "returnType": {
          "name": "ErrorFormatter",
          "refId": "ErrorFormatter"
        },
        "kind": "method",
        "comment": "\nChanges or resets to default the failure message formatter for expect().\n[formatter] is a reference to the new formatter; if this is omitted or\nnull then the failure formatter is reset to the default. The new\nformatter is returned; this allows custom expect handlers to easily\nget a reference to the default formatter.\n",
        "name": "configureExpectFormatter",
        "children": [
          {
            "ref": {
              "name": "ErrorFormatter",
              "refId": "ErrorFormatter"
            },
            "isOptional": true,
            "kind": "param",
            "name": "formatter",
            "id": "formatter"
          }
        ],
        "id": "configureExpectFormatter1()"
      },
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "name": "_defaultErrorFormatter",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "actual",
            "id": "actual"
          },
          {
            "ref": {
              "name": "Matcher",
              "refId": "Matcher"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "reason",
            "id": "reason"
          },
          {
            "ref": {
              "name": "MatchState",
              "refId": "MatchState"
            },
            "kind": "param",
            "name": "matchState",
            "id": "matchState"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "verbose",
            "id": "verbose"
          }
        ],
        "id": "_defaultErrorFormatter5()"
      },
      {
        "returnType": {
          "name": "FailureHandler",
          "refId": "FailureHandler"
        },
        "kind": "method",
        "name": "getOrCreateExpectFailureHandler",
        "id": "getOrCreateExpectFailureHandler0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nChanges or resets to the default the failure handler for expect()\n[handler] is a reference to the new handler; if this is omitted\nor null then the failure handler is reset to the default, which\nthrows [ExpectExceptions] on [expect] assertion failures.\n",
        "name": "configureExpectFailureHandler",
        "children": [
          {
            "ref": {
              "name": "FailureHandler",
              "refId": "FailureHandler"
            },
            "isOptional": true,
            "kind": "param",
            "name": "handler",
            "id": "handler"
          }
        ],
        "id": "configureExpectFailureHandler1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nTakes an argument and returns an equivalent matcher.\nIf the argument is already a matcher this does nothing,\nelse if the argument is a function, it generates a predicate\nfunction matcher, else it generates an equals matcher.\n",
        "name": "wrapMatcher",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "x",
            "id": "x"
          }
        ],
        "id": "wrapMatcher1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nThis is the main assertion function. It asserts that [actual]\nmatches the [matcher]. [reason] is optional and is typically not\nsupplied, as a reason is generated from the matcher; if [reason]\nis included it is appended to the reason generated by the matcher.\n\n[matcher] can be a value in which case it will be wrapped in an\n[equals] matcher.\n\nIf the assertion fails, then the default behavior is to throw an\n[ExpectException], but this behavior can be changed by calling\n[configureExpectFailureHandler] and providing an alternative handler that\nimplements the [IFailureHandler] interface. It is also possible to\npass a [failureHandler] to [expect] as a final parameter for fine-\ngrained control.\n\nIn some cases extra diagnostic info can be produced on failure (for\nexample, stack traces on mismatched exceptions). To enable these,\n[verbose] should be specified as true;\n",
        "name": "expect",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "actual",
            "id": "actual"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isOptional": true,
            "kind": "param",
            "name": "reason",
            "id": "reason"
          },
          {
            "ref": {
              "name": "FailureHandler",
              "refId": "FailureHandler"
            },
            "isOptional": true,
            "kind": "param",
            "name": "failureHandler",
            "id": "failureHandler"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "isOptional": true,
            "kind": "param",
            "name": "verbose",
            "id": "verbose"
          }
        ],
        "id": "expect5()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that uses an arbitrary function that returns\ntrue or false for the actual value.\n",
        "name": "predicate",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "f",
            "id": "f"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "description",
            "id": "description"
          }
        ],
        "id": "predicate2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument is in\nthe expected value. This is the converse of [contains].\n",
        "name": "isIn",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          }
        ],
        "id": "isIn1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if the match argument contains\nthe expected value. For [String]s this means substring matching;\nfor [Map]s is means the map has the key, and for [Collection]s it\nmeans the collection has a matching element. In the case of collections,\n[expected] can itself be a matcher.\n",
        "name": "contains",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          }
        ],
        "id": "contains1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that matches if an object has a length property\nthat matches [matcher].\n",
        "name": "hasLength",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "hasLength1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nThis can be used to match two kinds of objects:\n\n  * A [Function] that throws an exception when called. The function cannot\n    take any arguments. If you want to test that a function expecting\n    arguments throws, wrap it in another zero-argument function that calls\n    the one you want to test.\n\n  * A [Future] that completes with an exception. Note that this creates an\n    asynchronous expectation. The call to `expect()` that includes this will\n    return immediately and execution will continue. Later, when the future\n    completes, the actual expectation will run.\n\nIn both cases, when an exception is thrown, this will test that the exception\nobject matches [matcher]. If [matcher] is not an instance of [Matcher], it\nwill implicitly be treated as `equals(matcher)`.\n",
        "name": "throwsA",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "throwsA1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher that does a deep recursive match. This only works\nwith scalars, Maps and Iterables. To handle cyclic structures a\nrecursion depth [limit] can be provided. The default limit is 100.\n",
        "name": "equals",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "limit",
            "id": "limit"
          }
        ],
        "id": "equals2()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matches that matches if the value is the same instance\nas [object] (`===`).\n",
        "name": "same",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          }
        ],
        "id": "same1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches [Iterable]s that have the same\nlength and the same elements as [expected], but not necessarily in\nthe same order. Note that this is O(n^2) so should only be used on\nsmall objects.\n",
        "name": "unorderedEquals",
        "children": [
          {
            "ref": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          }
        ],
        "id": "unorderedEquals1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches [Iterable]s that have the same\nlength and the same elements as [expected], and in the same order.\nThis is equivalent to equals but does not recurse.\n",
        "name": "orderedEquals",
        "children": [
          {
            "ref": {
              "name": "Iterable",
              "refId": "Iterable"
            },
            "kind": "param",
            "name": "expected",
            "id": "expected"
          }
        ],
        "id": "orderedEquals1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches [Collection]s in which at least one\nelement matches the given [matcher].\n",
        "name": "someElement",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "someElement1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\nReturns a matcher which matches [Collection]s in which all elements\nmatch the given [matcher].\n",
        "name": "everyElement",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          }
        ],
        "id": "everyElement1()"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNonNegative",
        "id": "isNonNegative"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNegative",
        "id": "isNegative"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNonPositive",
        "id": "isNonPositive"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isPositive",
        "id": "isPositive"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNonZero",
        "id": "isNonZero"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isZero",
        "id": "isZero"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "completes",
        "id": "completes"
      },
      {
        "ref": {
          "name": "ErrorFormatter",
          "refId": "ErrorFormatter"
        },
        "kind": "property",
        "name": "_assertErrorFormatter",
        "id": "_assertErrorFormatter"
      },
      {
        "ref": {
          "name": "FailureHandler",
          "refId": "FailureHandler"
        },
        "kind": "property",
        "name": "_assertFailureHandler",
        "id": "_assertFailureHandler"
      },
      {
        "ref": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "property",
        "name": "wrapAsync",
        "id": "wrapAsync"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isList",
        "id": "isList"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isMap",
        "id": "isMap"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsStateError",
        "id": "throwsStateError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isStateError",
        "id": "isStateError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsUnsupportedError",
        "id": "throwsUnsupportedError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isUnsupportedError",
        "id": "isUnsupportedError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsUnimplementedError",
        "id": "throwsUnimplementedError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isUnimplementedError",
        "id": "isUnimplementedError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsNoSuchMethodError",
        "id": "throwsNoSuchMethodError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isNoSuchMethodError",
        "id": "isNoSuchMethodError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsRangeError",
        "id": "throwsRangeError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isRangeError",
        "id": "isRangeError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsIllegalJSRegExpException",
        "id": "throwsIllegalJSRegExpException"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isIllegalJSRegExpException",
        "id": "isIllegalJSRegExpException"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsArgumentError",
        "id": "throwsArgumentError"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isArgumentError",
        "id": "isArgumentError"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsException",
        "id": "throwsException"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isException",
        "id": "isException"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throwsFormatException",
        "id": "throwsFormatException"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "isFormatException",
        "id": "isFormatException"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "returnsNormally",
        "id": "returnsNormally"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "throws",
        "id": "throws"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "anything",
        "id": "anything"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isFalse",
        "id": "isFalse"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isTrue",
        "id": "isTrue"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNotNull",
        "id": "isNotNull"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isNull",
        "id": "isNull"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "isEmpty",
        "id": "isEmpty"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nFailed matches are reported using a default IFailureHandler.\nThe default implementation simply throws ExpectExceptions;\nthis can be replaced by some other implementation of\nIFailureHandler by calling configureExpectHandler.\n",
        "name": "FailureHandler",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "This handles failures given a textual decription ",
            "name": "fail",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "id": "fail1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis handles failures given the actual [value], the [matcher]\nthe [reason] (argument from [expect]), some additonal [matchState]\ngenerated by the [matcher], and a verbose flag which controls in\nsome cases how much [matchState] information is used. It will use\nthese to create a detailed error message (typically by calling\nan [ErrorFormatter]) and then call [fail] with this message.\n",
            "name": "failMatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "failMatch5()"
          }
        ],
        "id": "FailureHandler"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\n[expect] Matchers must implement the Matcher class.\nThe base Matcher class that implements this interface has\na generic implementation of [describeMismatch] so this does\nnot need to be provided unless a more clear description is\nrequired. The other two methods ([matches] and [describe])\nmust always be provided as they are highly matcher-specific.\n",
        "name": "Matcher",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nThis does the matching of the actual vs expected values.\n[item] is the actual value. [matchState] can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in [describeMismatch].\n",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "This builds a textual description of the matcher. ",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "describe1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nThis builds a textual description of a specific mismatch. [item]\nis the value that was tested by [matches]; [matchState] is\nthe [MatchState] that was passed to and supplemented by [matches]\nwith additional information about the mismact, and [mismatchDescription]\nis the [Description] that is being built to decribe the mismatch.\nA few matchers make use of the [verbose] flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.\n",
            "name": "describeMismatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "mismatchDescription",
                "id": "mismatchDescription"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "describeMismatch4()"
          }
        ],
        "id": "Matcher"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nMatchers build up their error messages by appending to\nDescription objects. This interface is implemented by\nStringDescription. This interface is unlikely to need\nother implementations, but could be useful to replace in\nsome cases - e.g. language conversion.\n",
        "name": "Description",
        "children": [
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "Change the value of the description. ",
            "name": "replace",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "replace1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "This is used to add arbitrary text to the description. ",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "This is used to add a meaningful description of a value. ",
            "name": "addDescriptionOf",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "addDescriptionOf1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nThis is used to add a description of an [Iterable] [list],\nwith appropriate [start] and [end] markers and inter-element [separator].\n",
            "name": "addAll",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "separator",
                "id": "separator"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "end",
                "id": "end"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "list",
                "id": "list"
              }
            ],
            "id": "addAll4()"
          }
        ],
        "id": "Description"
      },
      {
        "kind": "typedef",
        "comment": "\nThe ErrorFormatter type is used for functions that\ncan be used to build up error reports upon [expect] failures.\nThere is one built-in implementation ([defaultErrorFormatter])\nwhich is used by the default failure handler. If the failure handler\nis replaced it may be desirable to replace the [stringDescription]\nerror formatter with another.\n",
        "name": "ErrorFormatter",
        "id": "ErrorFormatter"
      },
      {
        "interfaces": [
          {
            "name": "FailureHandler",
            "refId": "FailureHandler"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DefaultFailureHandler",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DefaultFailureHandler",
            "id": "DefaultFailureHandler0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fail",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "id": "fail1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "failMatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "reason",
                "id": "reason"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "failMatch5()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DefaultFailureHandler",
            "id": "DefaultFailureHandler0()"
          }
        ],
        "id": "DefaultFailureHandler"
      },
      {
        "interfaces": [
          {
            "name": "Description",
            "refId": "Description"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe default implementation of IDescription. This should rarely need\nsubstitution, although conceivably it is a place where other languages\ncould be supported.\n",
        "name": "StringDescription",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Initialize the description with initial contents [init]. ",
            "name": "StringDescription",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "init",
                "id": "init"
              }
            ],
            "id": "StringDescription1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "Get the description as a string. ",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "Append some plain [text] to the description.  ",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "Change the value of the description. ",
            "name": "replace",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "text",
                "id": "text"
              }
            ],
            "id": "replace1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nAppends a description of [value]. If it is an IMatcher use its\ndescribe method; if it is a string use its literal value after\nescaping any embedded control characters; otherwise use its\ntoString() value and wrap it in angular \"quotes\".\n",
            "name": "addDescriptionOf",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "addDescriptionOf1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nAppend an [Iterable] [list] of objects to the description, using the\nspecified [separator] and framing the list with [start]\nand [end].\n",
            "name": "addAll",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "separator",
                "id": "separator"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "end",
                "id": "end"
              },
              {
                "ref": {
                  "name": "Iterable",
                  "refId": "Iterable"
                },
                "kind": "param",
                "name": "list",
                "id": "list"
              }
            ],
            "id": "addAll4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Escape the control characters in [string] so that they are visible. ",
            "name": "_addEscapedString",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "string",
                "id": "string"
              }
            ],
            "id": "_addEscapedString1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Return the escaped form of a character [ch]. ",
            "name": "_escape",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "ch",
                "id": "ch"
              }
            ],
            "id": "_escape1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "_out",
            "id": "_out"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Initialize the description with initial contents [init]. ",
            "name": "StringDescription",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "init",
                "id": "init"
              }
            ],
            "id": "StringDescription1()"
          }
        ],
        "id": "StringDescription"
      },
      {
        "superclass": {
          "name": "BaseMatcher",
          "refId": "BaseMatcher"
        },
        "kind": "class",
        "comment": "\nA useful utility class for implementing other matchers through inheritance.\nDerived classes should call the base constructor with a feature name and\ndescription, and an instance matcher, and should implement the\n[featureValueOf] abstract method.\n\nThe feature description will typically describe the item and the feature,\nwhile the feature name will just name the feature. For example, we may\nhave a Widget class where each Widget has a price; we could make a\nFeatureMatcher that can make assertions about prices with:\n\n    class HasPrice extends FeatureMatcher {\n      const HasPrice(matcher) :\n          super(\"Widget with price that is\", \"price\", matcher);\n      featureValueOf(actual) => actual.price;\n    }\n\nand then use this for example like:\n\n     expect(inventoryItem, new HasPrice(greaterThan(0)));\n",
        "name": "CustomMatcher",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "CustomMatcher",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_featureDescription",
                "id": "_featureDescription"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_featureName",
                "id": "_featureName"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "kind": "param",
                "name": "_matcher",
                "id": "_matcher"
              }
            ],
            "id": "CustomMatcher3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Override this to extract the interesting feature.",
            "name": "featureValueOf",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "actual",
                "id": "actual"
              }
            ],
            "id": "featureValueOf1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "describe1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describeMismatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "mismatchDescription",
                "id": "mismatchDescription"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "describeMismatch4()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_featureDescription",
            "id": "_featureDescription"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_featureName",
            "id": "_featureName"
          },
          {
            "ref": {
              "name": "Matcher",
              "refId": "Matcher"
            },
            "kind": "property",
            "name": "_matcher",
            "id": "_matcher"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "CustomMatcher",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_featureDescription",
                "id": "_featureDescription"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_featureName",
                "id": "_featureName"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "kind": "param",
                "name": "_matcher",
                "id": "_matcher"
              }
            ],
            "id": "CustomMatcher3()"
          }
        ],
        "id": "CustomMatcher"
      },
      {
        "superclass": {
          "name": "BaseMatcher",
          "refId": "BaseMatcher"
        },
        "kind": "class",
        "name": "TypeMatcher",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TypeMatcher",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_name",
                "id": "_name"
              }
            ],
            "id": "TypeMatcher1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "describe1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_name",
            "id": "_name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TypeMatcher",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "_name",
                "id": "_name"
              }
            ],
            "id": "TypeMatcher1()"
          }
        ],
        "id": "TypeMatcher"
      },
      {
        "superclass": {
          "name": "BaseMatcher",
          "refId": "BaseMatcher"
        },
        "kind": "class",
        "name": "Throws",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Throws",
            "children": [
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "isOptional": true,
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              }
            ],
            "id": "Throws1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "describe1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describeMismatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "mismatchDescription",
                "id": "mismatchDescription"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "describeMismatch4()"
          },
          {
            "ref": {
              "name": "Matcher",
              "refId": "Matcher"
            },
            "kind": "property",
            "name": "_matcher",
            "id": "_matcher"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Throws",
            "children": [
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "isOptional": true,
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              }
            ],
            "id": "Throws1()"
          }
        ],
        "id": "Throws"
      },
      {
        "superclass": {
          "name": "BaseMatcher",
          "refId": "BaseMatcher"
        },
        "kind": "class",
        "comment": "\nReturns a matcher that matches if an object is an instance\nof [type] (or a subtype).\n\nAs types are not first class objects in Dart we can only\napproximate this test by using a generic wrapper class.\n\nFor example, to test whether 'bar' is an instance of type\n'Foo', we would write:\n\n    expect(bar, new isInstanceOf<Foo>());\n\nTo get better error message, supply a name when creating the\nType wrapper; e.g.:\n\n    expect(bar, new isInstanceOf<Foo>('Foo'));\n\nNote that this does not currently work in dart2js; it will\nmatch any type, and isNot(new isInstanceof<T>()) will always\nfail. This is because dart2js currently ignores template type\nparameters.\n",
        "name": "isInstanceOf",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "isInstanceOf",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "isInstanceOf1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "obj",
                "id": "obj"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              }
            ],
            "id": "describe1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "_name",
            "id": "_name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "isInstanceOf",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "isInstanceOf1()"
          }
        ],
        "id": "isInstanceOf"
      },
      {
        "interfaces": [
          {
            "name": "Matcher",
            "refId": "Matcher"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nBaseMatcher is the base class for all matchers. To implement a new\nmatcher, either add a class that implements from IMatcher or\na class that inherits from Matcher. Inheriting from Matcher has\nthe benefit that a default implementation of describeMismatch will\nbe provided.\n",
        "name": "BaseMatcher",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BaseMatcher",
            "id": "BaseMatcher0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nTests the matcher against a given [item]\nand return true if the match succeeds; false otherwise.\n[matchState] may be used to return additional info for\nthe use of [describeMismatch].\n",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nCreates a textual description of a matcher,\nby appending to [mismatchDescription].\n",
            "name": "describe",
            "children": [
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "mismatchDescription",
                "id": "mismatchDescription"
              }
            ],
            "id": "describe1()"
          },
          {
            "returnType": {
              "name": "Description",
              "refId": "Description"
            },
            "kind": "method",
            "comment": "\nGenerates a description of the matcher failed for a particular\n[item], by appending the description to [mismatchDescription].\nIt does not check whether the [item] fails the match, as it is\nonly called after a failed match. There may be additional info\nabout the mismatch in [matchState].\n",
            "name": "describeMismatch",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "item",
                "id": "item"
              },
              {
                "ref": {
                  "name": "Description",
                  "refId": "Description"
                },
                "kind": "param",
                "name": "mismatchDescription",
                "id": "mismatchDescription"
              },
              {
                "ref": {
                  "name": "MatchState",
                  "refId": "MatchState"
                },
                "kind": "param",
                "name": "matchState",
                "id": "matchState"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "verbose",
                "id": "verbose"
              }
            ],
            "id": "describeMismatch4()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BaseMatcher",
            "id": "BaseMatcher0()"
          }
        ],
        "id": "BaseMatcher"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nMatchState is a simple wrapper around an arbitrary object.\n[Matcher] [matches] methods can use this to store useful\ninformation upon match failures, and this information will\nbe passed to [describeMismatch]. Each [Matcher] is responsible\nfor its own use of this state, so the state created by [matches]\nshould be consistent with that expected by [describeMismatch] in\nthe same [Matcher] class, but can vary between classes. The inner\nstate, if set, will typically be a [Map] with a number of key-value\npairs containing relevant state information.\n",
        "name": "MatchState",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "MatchState",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "state",
                "id": "state"
              }
            ],
            "id": "MatchState1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "state",
            "id": "state"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "MatchState",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "state",
                "id": "state"
              }
            ],
            "id": "MatchState1()"
          }
        ],
        "id": "MatchState"
      }
    ],
    "id": "package:unittest/matcher.dart"
  },
  {
    "kind": "library",
    "comment": "\nThis library contains the definitions of annotations that provide additional\nsemantic information about the program being annotated. These annotations are\nintended to be used by tools to provide a better user experience.\n",
    "name": "meta",
    "children": [
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "override",
        "id": "override"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "deprecated",
        "id": "deprecated"
      }
    ],
    "id": "package:meta/meta.dart"
  },
  {
    "kind": "library",
    "name": "metadata",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "Metadata that specifies that that member is editable through generated\nfiles.",
        "name": "DocsEditable",
        "id": "DocsEditable"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nMetadata that specifies the DOM name associated with the element.\n\nThis is used for API generation.\n\n[name] should be formatted as `interface.member`.\n",
        "name": "DomName",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DomName",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "DomName1()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DomName",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "DomName1()"
          }
        ],
        "id": "DomName"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nAn annotation used to mark an API as being experimental.\n\nAn API is considered to be experimental if it is still going through the\nprocess of stabilizing and is subject to change or removal.\n\nSee also:\n\n* [W3C recommendation](http://en.wikipedia.org/wiki/W3C_recommendation)\n",
        "name": "Experimental",
        "id": "Experimental"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nAn annotation used to mark a feature as only being supported by a subset\nof the browsers that Dart supports by default.\n\nIf an API is not annotated with [SupportedBrowser] then it is assumed to\nwork on all browsers Dart supports.\n",
        "name": "SupportedBrowser",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SupportedBrowser",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "browserName",
                "id": "browserName"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "minimumVersion",
                "id": "minimumVersion"
              }
            ],
            "id": "SupportedBrowser2()"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CHROME",
            "id": "CHROME"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FIREFOX",
            "id": "FIREFOX"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "IE",
            "id": "IE"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "OPERA",
            "id": "OPERA"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SAFARI",
            "id": "SAFARI"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "browserName",
            "id": "browserName"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "minimumVersion",
            "id": "minimumVersion"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SupportedBrowser",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "browserName",
                "id": "browserName"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "minimumVersion",
                "id": "minimumVersion"
              }
            ],
            "id": "SupportedBrowser2()"
          }
        ],
        "id": "SupportedBrowser"
      }
    ],
    "id": "file:///usr/local/Cellar/dart-editor/18115/dart-sdk/lib/html/html_common/metadata.dart"
  },
  {
    "kind": "library",
    "comment": "\nA simple mocking/spy library.\n\nTo create a mock objects for some class T, create a new class using:\n\n    class MockT extends Mock implements T {};\n\nThen specify the [Behavior] of the Mock for different methods using\n[when] (to select the method and parameters) and then the [Action]s\nfor the [Behavior] by calling [thenReturn], [alwaysReturn], [thenThrow],\n[alwaysThrow], [thenCall] or [alwaysCall].\n\n[thenReturn], [thenThrow] and [thenCall] are one-shot so you would\ntypically call these more than once to specify a sequence of actions;\nthis can be done with chained calls, e.g.:\n\n     m.when(callsTo('foo')).\n         thenReturn(0).thenReturn(1).thenReturn(2);\n\n[thenCall] and [alwaysCall] allow you to proxy mocked methods, chaining\nto some other implementation. This provides a way to implement 'spies'.\n\nFor getters and setters, use \"get foo\" and \"set foo\"-style arguments\nto [callsTo].\n\nYou can disable logging for a particular [Behavior] easily:\n\n    m.when(callsTo('bar')).logging = false;\n\nYou can then use the mock object. Once you are done, to verify the\nbehavior, use [getLogs] to extract a relevant subset of method call\nlogs and apply [Matchers] to these through calling [verify].\n\nA Mock can be given a name when constructed. In this case instead of\nkeeping its own log, it uses a shared log. This can be useful to get an\naudit trail of interleaved behavior. It is the responsibility of the user\nto ensure that mock names, if used, are unique.\n\nLimitations:\n\n* only positional parameters are supported (up to 10);\n* to mock getters you will need to include parentheses in the call\n      (e.g. m.length() will work but not m.length).\n\nHere is a simple example:\n\n    class MockList extends Mock implements List {};\n\n    List m = new MockList();\n    m.when(callsTo('add', anything)).alwaysReturn(0);\n\n    m.add('foo');\n    m.add('bar');\n\n    getLogs(m, callsTo('add', anything)).verify(happenedExactly(2));\n    getLogs(m, callsTo('add', 'foo')).verify(happenedOnce);\n    getLogs(m, callsTo('add', 'isNull)).verify(neverHappened);\n\nNote that we don't need to provide argument matchers for all arguments,\nbut we do need to provide arguments for all matchers. So this is allowed:\n\n    m.when(callsTo('add')).alwaysReturn(0);\n    m.add(1, 2);\n\nBut this is not allowed and will throw an exception:\n\n    m.when(callsTo('add', anything, anything)).alwaysReturn(0);\n    m.add(1);\n\nHere is a way to implement a 'spy', which is where we log the call\nbut then hand it off to some other function, which is the same\nmethod in a real instance of the class being mocked:\n\n    class Foo {\n      bar(a, b, c) => a + b + c;\n    }\n\n    class MockFoo extends Mock implements Foo {\n      Foo real;\n      MockFoo() {\n        real = new Foo();\n        this.when(callsTo('bar')).alwaysCall(real.bar);\n      }\n    }\n\n",
    "name": "mock",
    "children": [
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[neverThrew] asserts that no matching call to a method threw\na value that matched [value].\n",
        "name": "neverThrew",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "neverThrew1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[sometimeThrew] asserts that at least one matching call to a method threw\na value that matched [value].\n",
        "name": "sometimeThrew",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "sometimeThrew1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[alwaysThrew] asserts that all matching calls to a method threw\na value that matched [value].\n",
        "name": "alwaysThrew",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "alwaysThrew1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[neverReturned] asserts that no matching calls to a method returned\na value that matched [value].\n",
        "name": "neverReturned",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "neverReturned1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[sometimeReturned] asserts that at least one matching call to a method\nreturned a value that matched [value].\n",
        "name": "sometimeReturned",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "sometimeReturned1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[alwaysReturned] asserts that all matching calls to a method returned\na value that matched [value].\n",
        "name": "alwaysReturned",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "alwaysReturned1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[throwing] matches log entrues where the call to a method threw\na value that matched [value].\n",
        "name": "throwing",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "throwing1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "\n[returning] matches log entries where the call to a method returned\na value that matched [value].\n",
        "name": "returning",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "value",
            "id": "value"
          }
        ],
        "id": "returning1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "[happenedAtMost] matches a maximum number of calls. ",
        "name": "happenedAtMost",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "happenedAtMost1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "[happenedAtLeast] matches a minimum number of calls. ",
        "name": "happenedAtLeast",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "happenedAtLeast1()"
      },
      {
        "returnType": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "method",
        "comment": "[happenedExactly] matches an exact number of calls. ",
        "name": "happenedExactly",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "happenedExactly1()"
      },
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "comment": "Utility function for optionally qualified method names ",
        "name": "_qualifiedName",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "owner",
            "id": "owner"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "method",
            "id": "method"
          }
        ],
        "id": "_qualifiedName2()"
      },
      {
        "returnType": {
          "name": "CallMatcher",
          "refId": "CallMatcher"
        },
        "kind": "method",
        "comment": "\nReturns a [CallMatcher] for the specified signature. [method] can be\nnull to match anything, or a literal [String], a predicate [Function],\nor a [Matcher]. The various arguments can be scalar values or [Matcher]s.\nTo match getters and setters, use \"get \" and \"set \" prefixes on the names.\nFor example, for a property \"foo\", you could use \"get foo\" and \"set foo\"\nas literal string arguments to callsTo to match the getter and setter\nof \"foo\".\n",
        "name": "callsTo",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "method",
            "id": "method"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg0",
            "id": "arg0"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg1",
            "id": "arg1"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg2",
            "id": "arg2"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg3",
            "id": "arg3"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg4",
            "id": "arg4"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg5",
            "id": "arg5"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg6",
            "id": "arg6"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg7",
            "id": "arg7"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg8",
            "id": "arg8"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "arg9",
            "id": "arg9"
          }
        ],
        "id": "callsTo11()"
      },
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "comment": "\nThe error formatter for mocking is a bit different from the default one\nfor unit testing; instead of the third argument being a 'reason'\nit is instead a [signature] describing the method signature filter\nthat was used to select the logs that were verified.\n",
        "name": "_mockingErrorFormatter",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "actual",
            "id": "actual"
          },
          {
            "ref": {
              "name": "Matcher",
              "refId": "Matcher"
            },
            "kind": "param",
            "name": "matcher",
            "id": "matcher"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "signature",
            "id": "signature"
          },
          {
            "ref": {
              "name": "MatchState",
              "refId": "MatchState"
            },
            "kind": "param",
            "name": "matchState",
            "id": "matchState"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "verbose",
            "id": "verbose"
          }
        ],
        "id": "_mockingErrorFormatter5()"
      },
      {
        "ref": {
          "name": "LogEntryList",
          "refId": "LogEntryList"
        },
        "kind": "property",
        "name": "sharedLog",
        "id": "sharedLog"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "happenedAtMostOnce",
        "id": "happenedAtMostOnce"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "happenedAtLeastOnce",
        "id": "happenedAtLeastOnce"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "happenedOnce",
        "id": "happenedOnce"
      },
      {
        "ref": {
          "name": "Matcher",
          "refId": "Matcher"
        },
        "kind": "property",
        "name": "neverHappened",
        "id": "neverHappened"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "_noArg",
        "id": "_noArg"
      },
      {
        "ref": {
          "name": "_MockFailureHandler",
          "refId": "_MockFailureHandler"
        },
        "kind": "property",
        "name": "_mockFailureHandler",
        "id": "_mockFailureHandler"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "The base class for all mocked objects. ",
        "name": "Mock",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "logging",
            "id": "logging0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "logging=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "logging=1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nDefault constructor. Unknown method calls are allowed and logged,\nthe mock has no name, and has its own log.\n",
            "name": "Mock",
            "id": "Mock0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nThis constructor makes a mock that has a [name] and possibly uses\na shared [log]. If [throwIfNoBehavior] is true, any calls to methods\nthat have no defined behaviors will throw an exception; otherwise they\nwill be allowed and logged (but will not do anything).\nIf [enableLogging] is false, no logging will be done initially (whether\nor not a [log] is supplied), but [logging] can be set to true later.\n",
            "name": "Mock.custom",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "isOptional": true,
                "kind": "param",
                "name": "log",
                "id": "log"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "throwIfNoBehavior",
                "id": "throwIfNoBehavior"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "enableLogging",
                "id": "enableLogging"
              }
            ],
            "id": "Mock.custom4()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "\n[when] is used to create a new or extend an existing [Behavior].\nA [CallMatcher] [filter] must be supplied, and the [Behavior]s for\nthat signature are returned (being created first if needed).\n\nTypical use case:\n\n    mock.when(callsTo(...)).alwaysReturn(...);\n",
            "name": "when",
            "children": [
              {
                "ref": {
                  "name": "CallMatcher",
                  "refId": "CallMatcher"
                },
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              }
            ],
            "id": "when1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nThis is the handler for method calls. We loop through the list\nof [Behavior]s, and find the first match that still has return\nvalues available, and then do the action specified by that\nreturn value. If we find no [Behavior] to apply an exception is\nthrown.\n",
            "name": "noSuchMethod",
            "children": [
              {
                "ref": {
                  "name": "InvocationMirror",
                  "refId": "InvocationMirror"
                },
                "kind": "param",
                "name": "invocation",
                "id": "invocation"
              }
            ],
            "id": "noSuchMethod1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "[verifyZeroInteractions] returns true if no calls were made ",
            "name": "verifyZeroInteractions",
            "id": "verifyZeroInteractions0()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\n[getLogs] extracts all calls from the call log that match the\n[logFilter], and returns the matching list of [LogEntry]s. If\n[destructive] is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. [actionMatcher] can be used to further\nrestrict the returned logs based on the action the mock performed.\n[logFilter] can be a [CallMatcher] or a predicate function that\ntakes a [LogEntry] and returns a bool.\n\nTypical usage:\n\n    getLogs(callsTo(...)).verify(...);\n",
            "name": "getLogs",
            "children": [
              {
                "ref": {
                  "name": "CallMatcher",
                  "refId": "CallMatcher"
                },
                "isOptional": true,
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "isOptional": true,
                "kind": "param",
                "name": "actionMatcher",
                "id": "actionMatcher"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "destructive",
                "id": "destructive"
              }
            ],
            "id": "getLogs3()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nUseful shorthand method that creates a [CallMatcher] from its arguments\nand then calls [getLogs].\n",
            "name": "calls",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "method",
                "id": "method"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg0",
                "id": "arg0"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg1",
                "id": "arg1"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg2",
                "id": "arg2"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg3",
                "id": "arg3"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg4",
                "id": "arg4"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg5",
                "id": "arg5"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg6",
                "id": "arg6"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg7",
                "id": "arg7"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg8",
                "id": "arg8"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg9",
                "id": "arg9"
              }
            ],
            "id": "calls11()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Clear the behaviors for the Mock. ",
            "name": "resetBehavior",
            "id": "resetBehavior0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Clear the logs for the Mock. ",
            "name": "clearLogs",
            "id": "clearLogs0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Clear both logs and behavior. ",
            "name": "reset",
            "id": "reset0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "logging",
            "id": "logging"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Behavior",
                  "refId": "Behavior"
                }
              ]
            },
            "kind": "property",
            "name": "_behaviors",
            "id": "_behaviors"
          },
          {
            "ref": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "property",
            "name": "log",
            "id": "log"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_throwIfNoBehavior",
            "id": "_throwIfNoBehavior"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_logging",
            "id": "_logging"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nDefault constructor. Unknown method calls are allowed and logged,\nthe mock has no name, and has its own log.\n",
            "name": "Mock",
            "id": "Mock0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nThis constructor makes a mock that has a [name] and possibly uses\na shared [log]. If [throwIfNoBehavior] is true, any calls to methods\nthat have no defined behaviors will throw an exception; otherwise they\nwill be allowed and logged (but will not do anything).\nIf [enableLogging] is false, no logging will be done initially (whether\nor not a [log] is supplied), but [logging] can be set to true later.\n",
            "name": "Mock.custom",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "isOptional": true,
                "kind": "param",
                "name": "log",
                "id": "log"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "throwIfNoBehavior",
                "id": "throwIfNoBehavior"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "enableLogging",
                "id": "enableLogging"
              }
            ],
            "id": "Mock.custom4()"
          }
        ],
        "id": "Mock"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nWe do verification on a list of [LogEntry]s. To allow chaining\nof calls to verify, we encapsulate such a list in the [LogEntryList]\nclass.\n",
        "name": "LogEntryList",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "LogEntryList",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "filter",
                "id": "filter"
              }
            ],
            "id": "LogEntryList1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Add a [LogEntry] to the log. ",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                },
                "kind": "param",
                "name": "entry",
                "id": "entry"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Get the first entry, or null if no entries. ",
            "name": "first",
            "id": "first0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Get the last entry, or null if no entries. ",
            "name": "last",
            "id": "last0()"
          },
          {
            "returnType": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "method",
            "comment": "Creates a LogEntry predicate function from the argument. ",
            "name": "_makePredicate",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "arg",
                "id": "arg"
              }
            ],
            "id": "_makePredicate1()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nCreate a new [LogEntryList] consisting of [LogEntry]s from\nthis list that match the specified [mockNameFilter] and [logFilter].\n[mockNameFilter] can be null, a [String], a predicate [Function],\nor a [Matcher]. If [mockNameFilter] is null, this is the same as\n[anything].\nIf [logFilter] is null, all entries in the log will be returned.\nOtherwise [logFilter] should be a [CallMatcher] or  predicate function\nthat takes a [LogEntry] and returns a bool.\nIf [destructive] is true, the log entries are removed from the\noriginal list.\n",
            "name": "getMatches",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "mockNameFilter",
                "id": "mockNameFilter"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "isOptional": true,
                "kind": "param",
                "name": "actionMatcher",
                "id": "actionMatcher"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "destructive",
                "id": "destructive"
              }
            ],
            "id": "getMatches4()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "Apply a unit test [Matcher] to the [LogEntryList]. ",
            "name": "verify",
            "children": [
              {
                "ref": {
                  "name": "Matcher",
                  "refId": "Matcher"
                },
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              }
            ],
            "id": "verify1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nIterate through the list and call the [validator] function with the\nlog [List] and position. The [validator] should return the number of\npositions to advance upon success, or zero upon failure. When zero is\nreturned an error is reported. [reason] can be used to provide a\nmore descriptive failure message. If a failure occurred false will be\nreturned (unless the failure handler itself threw an exception);\notherwise true is returned.\nThe use case here is to perform more complex validations; for example\nwe may want to assert that the return value from some function is\nlater used as a parameter to a following function. If we filter the logs\nto include just these two functions we can write a simple validator to\ndo this check.\n",
            "name": "stepwiseValidate",
            "children": [
              {
                "ref": {
                  "name": "StepValidator",
                  "refId": "StepValidator"
                },
                "kind": "param",
                "name": "validator",
                "id": "validator"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "reason",
                "id": "reason"
              }
            ],
            "id": "stepwiseValidate2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nTurn the logs into human-readable text. If [baseTime] is specified\nthen each entry is prefixed with the offset from that time in\nmilliseconds; otherwise the time of day is used.\n",
            "name": "toString",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "isOptional": true,
                "kind": "param",
                "name": "baseTime",
                "id": "baseTime"
              }
            ],
            "id": "toString1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\n Find the first log entry that satisfies [logFilter] and\n return its position. A search [start] position can be provided\n to allow for repeated searches. [logFilter] can be a [CallMatcher],\n or a predicate function that takes a [LogEntry] argument and returns\n a bool. If [logFilter] is null, it will match any [LogEntry].\n If no entry is found, then [failureReturnValue] is returned.\n After each check the position is updated by [skip], so using\n [skip] of -1 allows backward searches, using a [skip] of 2 can\n be used to check pairs of adjacent entries, and so on.\n",
            "name": "findLogEntry",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "start",
                "id": "start"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "failureReturnValue",
                "id": "failureReturnValue"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "skip",
                "id": "skip"
              }
            ],
            "id": "findLogEntry4()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened up to the first one that\nsatisfies [logFilter]. If [inPlace] is true, then returns\nthis LogEntryList after removing the from the first satisfier;\nonwards otherwise a new list is created. [description]\nis used to create a new name for the resulting list.\n[defaultPosition] is used as the index of the matching item in\nthe case that no match is found.\n",
            "name": "_head",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "defaultPosition",
                "id": "defaultPosition"
              }
            ],
            "id": "_head4()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened from the first one that\nsatisfies [logFilter]. If [inPlace] is true, then returns\nthis LogEntryList after removing the entries up to the first\nsatisfier; otherwise a new list is created. [description]\nis used to create a new name for the resulting list.\n[defaultPosition] is used as the index of the matching item in\nthe case that no match is found.\n",
            "name": "_tail",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "defaultPosition",
                "id": "defaultPosition"
              }
            ],
            "id": "_tail4()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened after [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened up to [when]; otherwise a new\nlist is created.\n",
            "name": "after",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "kind": "param",
                "name": "when",
                "id": "when"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "after2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened from [when] onwards. If\n[inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened before [when]; otherwise\na new list is created.\n",
            "name": "from",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "kind": "param",
                "name": "when",
                "id": "when"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "from2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened until [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened after [when]; otherwise a new\nlist is created.\n",
            "name": "until",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "kind": "param",
                "name": "when",
                "id": "when"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "until2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened before [when]. If [inPlace]\nis true, then it returns this LogEntryList after removing\nthe entries that happened from [when] onwards; otherwise a new\nlist is created.\n",
            "name": "before",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "kind": "param",
                "name": "when",
                "id": "when"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "before2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened after [logEntry]'s time.\nIf [inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened up to [when]; otherwise a new\nlist is created. If [logEntry] is null the current time is used.\n",
            "name": "afterEntry",
            "children": [
              {
                "ref": {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                },
                "kind": "param",
                "name": "logEntry",
                "id": "logEntry"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "afterEntry2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened from [logEntry]'s time onwards.\nIf [inPlace] is true, then it returns this LogEntryList after\nremoving the entries that happened before [when]; otherwise\na new list is created. If [logEntry] is null the current time is used.\n",
            "name": "fromEntry",
            "children": [
              {
                "ref": {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                },
                "kind": "param",
                "name": "logEntry",
                "id": "logEntry"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "fromEntry2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened until [logEntry]'s time. If\n[inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened after [when]; otherwise a new\nlist is created. If [logEntry] is null the epoch time is used.\n",
            "name": "untilEntry",
            "children": [
              {
                "ref": {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                },
                "kind": "param",
                "name": "logEntry",
                "id": "logEntry"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "untilEntry2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened before [logEntry]'s time. If\n[inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened from [when] onwards; otherwise a new\nlist is created. If [logEntry] is null the epoch time is used.\n",
            "name": "beforeEntry",
            "children": [
              {
                "ref": {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                },
                "kind": "param",
                "name": "logEntry",
                "id": "logEntry"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "beforeEntry2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened after the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened earlier; otherwise a new list is created.\n",
            "name": "afterFirst",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "afterFirst2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened after the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened earlier; otherwise a new list is created.\n",
            "name": "afterLast",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "afterLast2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened from the time of the first event in\n[segment] onwards. If [inPlace] is true, then it returns this\nLogEntryList after removing the earlier entries; otherwise a new list\nis created.\n",
            "name": "fromFirst",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "fromFirst2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened from the time of the last event in\n[segment] onwards. If [inPlace] is true, then it returns this\nLogEntryList after removing the earlier entries; otherwise a new list\nis created.\n",
            "name": "fromLast",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "fromLast2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened until the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n",
            "name": "untilFirst",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "untilFirst2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened until the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n",
            "name": "untilLast",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "untilLast2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened before the first event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n",
            "name": "beforeFirst",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "beforeFirst2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nReturns log events that happened before the last event in [segment].\nIf [inPlace] is true, then it returns this LogEntryList after removing\nthe entries that happened later; otherwise a new list is created.\n",
            "name": "beforeLast",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "segment",
                "id": "segment"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "inPlace",
                "id": "inPlace"
              }
            ],
            "id": "beforeLast2()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] neighboring log\nentries that match [mockNameFilter] and [logFilter] will be included in\nthe result. If [isPreceding] is true we use the neighbors that precede\nthe matched entry; else we use the neighbors that followed.\nIf [includeKeys] is true then the entries in [keys] that resulted in\nentries in the output list are themselves included in the output list. If\n[distance] is zero then all matches are included.\n",
            "name": "_neighboring",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "isPreceding",
                "id": "isPreceding"
              },
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "keys",
                "id": "keys"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "mockNameFilter",
                "id": "mockNameFilter"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "distance",
                "id": "distance"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "includeKeys",
                "id": "includeKeys"
              }
            ],
            "id": "_neighboring6()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] prior log entries\nthat match [mocknameFilter] and [logFilter] will be included in the result.\nIf [includeKeys] is true then the entries in [keys] that resulted in\nentries in the output list are themselves included in the output list. If\n[distance] is zero then all matches are included.\n\nThe idea here is that you could find log entries that are related to\nother logs entries in some temporal sense. For example, say we have a\nmethod commit() that returns -1 on failure. Before commit() gets called\nthe value being committed is created by process(). We may want to find\nthe calls to process() that preceded calls to commit() that failed.\nWe could do this with:\n\n     print(log.preceding(log.getLogs(callsTo('commit'), returning(-1)),\n         logFilter: callsTo('process')).toString());\n\nWe might want to include the details of the failing calls to commit()\nto see what parameters were passed in, in which case we would set\n[includeKeys].\n\nAs another simple example, say we wanted to know the three method\ncalls that immediately preceded each failing call to commit():\n\n    print(log.preceding(log.getLogs(callsTo('commit'), returning(-1)),\n        distance: 3).toString());\n",
            "name": "preceding",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "keys",
                "id": "keys"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "mockNameFilter",
                "id": "mockNameFilter"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "distance",
                "id": "distance"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "includeKeys",
                "id": "includeKeys"
              }
            ],
            "id": "preceding5()"
          },
          {
            "returnType": {
              "name": "LogEntryList",
              "refId": "LogEntryList"
            },
            "kind": "method",
            "comment": "\nIterate through the LogEntryList looking for matches to the entries\nin [keys]; for each match found the closest [distance] subsequent log\nentries that match [mocknameFilter] and [logFilter] will be included in\nthe result. If [includeKeys] is true then the entries in [keys] that\nresulted in entries in the output list are themselves included in the\noutput list. If [distance] is zero then all matches are included.\nSee [preceding] for a usage example.\n",
            "name": "following",
            "children": [
              {
                "ref": {
                  "name": "LogEntryList",
                  "refId": "LogEntryList"
                },
                "kind": "param",
                "name": "keys",
                "id": "keys"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "mockNameFilter",
                "id": "mockNameFilter"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "logFilter",
                "id": "logFilter"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "distance",
                "id": "distance"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "includeKeys",
                "id": "includeKeys"
              }
            ],
            "id": "following5()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "comment": "Get the first entry, or null if no entries. ",
            "name": "first",
            "id": "first"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "comment": "Get the last entry, or null if no entries. ",
            "name": "last",
            "id": "last"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "filter",
            "id": "filter"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "LogEntry",
                  "refId": "LogEntry"
                }
              ]
            },
            "kind": "property",
            "name": "logs",
            "id": "logs"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "LogEntryList",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "filter",
                "id": "filter"
              }
            ],
            "id": "LogEntryList1()"
          }
        ],
        "id": "LogEntryList"
      },
      {
        "kind": "typedef",
        "comment": "\n[StepValidator]s are used by [stepwiseValidate] in [LogEntryList], which\niterates through the list and call the [StepValidator] function with the\nlog [List] and position. The [StepValidator] should return the number of\npositions to advance upon success, or zero upon failure. When zero is\nreturned an error is reported.\n",
        "name": "StepValidator",
        "id": "StepValidator"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nEvery call to a [Mock] object method is logged. The logs are\nkept in instances of [LogEntry].\n",
        "name": "LogEntry",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "LogEntry",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "mockName",
                "id": "mockName"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "methodName",
                "id": "methodName"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "Action",
                  "refId": "Action"
                },
                "kind": "param",
                "name": "action",
                "id": "action"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "LogEntry5()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_pad2",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "val",
                "id": "val"
              }
            ],
            "id": "_pad21()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "children": [
              {
                "ref": {
                  "name": "DateTime",
                  "refId": "DateTime"
                },
                "isOptional": true,
                "kind": "param",
                "name": "baseTime",
                "id": "baseTime"
              }
            ],
            "id": "toString1()"
          },
          {
            "ref": {
              "name": "DateTime",
              "refId": "DateTime"
            },
            "kind": "property",
            "name": "time",
            "id": "time"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "mockName",
            "id": "mockName"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "methodName",
            "id": "methodName"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "args",
            "id": "args"
          },
          {
            "ref": {
              "name": "Action",
              "refId": "Action"
            },
            "kind": "property",
            "name": "action",
            "id": "action"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "value",
            "id": "value"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "LogEntry",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "mockName",
                "id": "mockName"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "methodName",
                "id": "methodName"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              },
              {
                "ref": {
                  "name": "Action",
                  "refId": "Action"
                },
                "kind": "param",
                "name": "action",
                "id": "action"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "LogEntry5()"
          }
        ],
        "id": "LogEntry"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA [Behavior] represents how a [Mock] will respond to one particular\ntype of method call.\n",
        "name": "Behavior",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Behavior",
            "children": [
              {
                "ref": {
                  "name": "CallMatcher",
                  "refId": "CallMatcher"
                },
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              }
            ],
            "id": "Behavior1()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "\nAdds a [Responder] that returns a [value] for [count] calls\n(1 by default).\n",
            "name": "thenReturn",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "thenReturn2()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "Adds a [Responder] that repeatedly returns a [value]. ",
            "name": "alwaysReturn",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "alwaysReturn1()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "\nAdds a [Responder] that throws [value] [count]\ntimes (1 by default).\n",
            "name": "thenThrow",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "thenThrow2()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "Adds a [Responder] that throws [value] endlessly. ",
            "name": "alwaysThrow",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "alwaysThrow1()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "\n[thenCall] creates a proxy Responder, that is called [count]\ntimes (1 by default; 0 is used for unlimited calls, and is\nexposed as [alwaysCall]). [value] is the function that will\nbe called with the same arguments that were passed to the\nmock. Proxies can be used to wrap real objects or to define\nmore complex return/throw behavior. You could even (if you\nwanted) use proxies to emulate the behavior of thenReturn;\ne.g.:\n\n    m.when(callsTo('foo')).thenReturn(0)\n\nis equivalent to:\n\n    m.when(callsTo('foo')).thenCall(() => 0)\n",
            "name": "thenCall",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "thenCall2()"
          },
          {
            "returnType": {
              "name": "Behavior",
              "refId": "Behavior"
            },
            "kind": "method",
            "comment": "Creates a repeating proxy call. ",
            "name": "alwaysCall",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "alwaysCall1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Returns true if a method call matches the [Behavior]. ",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "method",
                "id": "method"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "args",
                "id": "args"
              }
            ],
            "id": "matches2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "Returns the [matcher]'s representation. ",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "CallMatcher",
              "refId": "CallMatcher"
            },
            "kind": "property",
            "name": "matcher",
            "id": "matcher"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Responder",
                  "refId": "Responder"
                }
              ]
            },
            "kind": "property",
            "name": "actions",
            "id": "actions"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "logging",
            "id": "logging"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Behavior",
            "children": [
              {
                "ref": {
                  "name": "CallMatcher",
                  "refId": "CallMatcher"
                },
                "kind": "param",
                "name": "matcher",
                "id": "matcher"
              }
            ],
            "id": "Behavior1()"
          }
        ],
        "id": "Behavior"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA [CallMatcher] is a special matcher used to match method calls (i.e.\na method name and set of arguments). It is not a [Matcher] like the\nunit test [Matcher], but instead represents a method name and a\ncollection of [Matcher]s, one per argument, that will be applied\nto the parameters to decide if the method call is a match.\n",
        "name": "CallMatcher",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructor for [CallMatcher]. [name] can be null to\nmatch anything, or a literal [String], a predicate [Function],\nor a [Matcher]. The various arguments can be scalar values or\n[Matcher]s.\n",
            "name": "CallMatcher",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg0",
                "id": "arg0"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg1",
                "id": "arg1"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg2",
                "id": "arg2"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg3",
                "id": "arg3"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg4",
                "id": "arg4"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg5",
                "id": "arg5"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg6",
                "id": "arg6"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg7",
                "id": "arg7"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg8",
                "id": "arg8"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg9",
                "id": "arg9"
              }
            ],
            "id": "CallMatcher11()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nWe keep our behavior specifications in a Map, which is keyed\nby the [CallMatcher]. To make the keys unique and to get a\ndescriptive value for the [CallMatcher] we have this override\nof [toString()].\n",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nGiven a [method] name and list of [arguments], return true\nif it matches this [CallMatcher.\n",
            "name": "matches",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "method",
                "id": "method"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List"
                },
                "kind": "param",
                "name": "arguments",
                "id": "arguments"
              }
            ],
            "id": "matches2()"
          },
          {
            "ref": {
              "name": "Matcher",
              "refId": "Matcher"
            },
            "kind": "property",
            "name": "nameFilter",
            "id": "nameFilter"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Matcher",
                  "refId": "Matcher"
                }
              ]
            },
            "kind": "property",
            "name": "argMatchers",
            "id": "argMatchers"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructor for [CallMatcher]. [name] can be null to\nmatch anything, or a literal [String], a predicate [Function],\nor a [Matcher]. The various arguments can be scalar values or\n[Matcher]s.\n",
            "name": "CallMatcher",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "name",
                "id": "name"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg0",
                "id": "arg0"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg1",
                "id": "arg1"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg2",
                "id": "arg2"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg3",
                "id": "arg3"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg4",
                "id": "arg4"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg5",
                "id": "arg5"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg6",
                "id": "arg6"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg7",
                "id": "arg7"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg8",
                "id": "arg8"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "isOptional": true,
                "kind": "param",
                "name": "arg9",
                "id": "arg9"
              }
            ],
            "id": "CallMatcher11()"
          }
        ],
        "id": "CallMatcher"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe behavior of a method call in the mock library is specified\nwith [Responder]s. A [Responder] has a [value] to throw\nor return (depending on the type of [action]),\nand can either be one-shot, multi-shot, or infinitely repeating,\ndepending on the value of [count (1, greater than 1, or 0 respectively).\n",
        "name": "Responder",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Responder",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "count",
                "id": "count"
              },
              {
                "ref": {
                  "name": "Action",
                  "refId": "Action"
                },
                "isOptional": true,
                "kind": "param",
                "name": "action",
                "id": "action"
              }
            ],
            "id": "Responder3()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "value",
            "id": "value"
          },
          {
            "ref": {
              "name": "Action",
              "refId": "Action"
            },
            "kind": "property",
            "name": "action",
            "id": "action"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Responder",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "count",
                "id": "count"
              },
              {
                "ref": {
                  "name": "Action",
                  "refId": "Action"
                },
                "isOptional": true,
                "kind": "param",
                "name": "action",
                "id": "action"
              }
            ],
            "id": "Responder3()"
          }
        ],
        "id": "Responder"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "The ways in which a call to a mock method can be handled. ",
        "name": "Action",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Action._",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Action._1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "IGNORE",
            "id": "IGNORE"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "RETURN",
            "id": "RETURN"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "THROW",
            "id": "THROW"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PROXY",
            "id": "PROXY"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "name",
            "id": "name"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Action._",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "name",
                "id": "name"
              }
            ],
            "id": "Action._1()"
          }
        ],
        "id": "Action"
      }
    ],
    "id": "package:unittest/mock.dart"
  },
  {
    "kind": "library",
    "comment": "\nA library for writing dart unit tests.\n\nTo import this library, use the pub package manager.\nCreate a pubspec.yaml file in your project and add\na dependency on unittest with the following lines:\n    dependencies:\n      unittest:\n        sdk: unittest\n\nThen run 'pub install' from your project directory or using\nthe DartEditor.\n\nPlease see [Pub Getting Started](http://pub.dartlang.org/doc)\nfor more details about the pub package manager.\n\n##Concepts##\n\n * Tests: Tests are specified via the top-level function [test], they can be\n   organized together using [group].\n * Checks: Test expectations can be specified via [expect]\n * Matchers: [expect] assertions are written declaratively using [Matcher]s\n * Configuration: The framework can be adapted by calling [configure] with a\n   [Configuration].  Common configurations can be found in this package\n   under: 'dom\\_config.dart' (deprecated), 'html\\_config.dart' (for running\n   tests compiled to Javascript in a browser), and 'vm\\_config.dart' (for\n   running native Dart tests on the VM).\n\n##Examples##\n\nA trivial test:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      test('this is a test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n      test('this is another test', () {\n        int x = 2 + 3;\n        expect(x, equals(5));\n      });\n    }\n\nMultiple tests, grouped by category:\n\n    import 'package:unittest/unittest.dart';\n    main() {\n      group('group A', () {\n        test('test A.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n        test('test A.2', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n      group('group B', () {\n        test('this B.1', () {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        });\n      });\n    }\n\nAsynchronous tests: if callbacks expect between 0 and 2 positional arguments,\ndepending on the suffix of expectAsyncX(). expectAsyncX() will wrap a\nfunction into a new callback and will not consider the test complete until\nthat callback is run. A count argument can be provided to specify the number\nof times the callback should be called (the default is 1).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed once', () {\n        // wrap the callback of an asynchronous call with [expectAsync0] if\n        // the callback takes 0 arguments...\n        var timer = new Timer(0, (_) => expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }));\n      });\n\n      test('callback is executed twice', () {\n        var callback = (_) => expectAsync0(() {\n          int x = 2 + 3;\n          expect(x, equals(5));\n        }, count: 2); // <-- we can indicate multiplicity to [expectAsync0]\n        new Timer(0, callback);\n        new Timer(0, callback);\n      });\n    }\n\nexpectAsyncX() will wrap the callback code in a try/catch handler to handle\nexceptions (treated as test failures). There may be times when the number of\ntimes a callback should be called is non-deterministic. In this case a dummy\ncallback can be created with expectAsync0((){}) and this can be called from\nthe real callback when it is finally complete. In this case the body of the\ncallback should be protected within a call to guardAsync(); this will ensure\nthat exceptions are properly handled.\n\nNote: due to some language limitations we have to use different functions\ndepending on the number of positional arguments of the callback. In the\nfuture, we plan to expose a single `expectAsync` function that can be used\nregardless of the number of positional arguments. This requires new langauge\nfeatures or fixes to the current spec (e.g. see\n[Issue 2706](http://dartbug.com/2706)).\n\nMeanwhile, we plan to add this alternative API for callbacks of more than 2\narguments or that take named parameters. (this is not implemented yet,\nbut will be coming here soon).\n\n    import 'package:unittest/unittest.dart';\n    import 'dart:isolate';\n    main() {\n      test('callback is executed', () {\n        // indicate ahead of time that an async callback is expected.\n        var async = startAsync();\n        new Timer(0, (_) {\n          // Guard the body of the callback, so errors are propagated\n          // correctly.\n          guardAsync(() {\n            int x = 2 + 3;\n            expect(x, equals(5));\n          });\n          // indicate that the asynchronous callback was invoked.\n          async.complete();\n        });\n      });\n    }\n\n",
    "name": "unittest",
    "children": [
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "Disable a test by ID. ",
        "name": "disableTest",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "testId",
            "id": "testId"
          }
        ],
        "id": "disableTest1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "Enable a test by ID. ",
        "name": "enableTest",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "testId",
            "id": "testId"
          }
        ],
        "id": "enableTest1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "Enable/disable a test by ID. ",
        "name": "_setTestEnabledState",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "testId",
            "id": "testId"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "param",
            "name": "state",
            "id": "state"
          }
        ],
        "id": "_setTestEnabledState2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "Select a solo test by ID. ",
        "name": "setSoloTest",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "id",
            "id": "id"
          }
        ],
        "id": "setSoloTest1()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nLazily initializes the test library if not already initialized.\n",
        "name": "ensureInitialized",
        "id": "ensureInitialized0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "fail",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "message",
            "id": "message"
          }
        ],
        "id": "fail1()"
      },
      {
        "returnType": {
          "name": "String",
          "refId": "String"
        },
        "kind": "method",
        "name": "_fullSpec",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "spec",
            "id": "spec"
          }
        ],
        "id": "_fullSpec1()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "Publish results on the page and notify controller. ",
        "name": "_completeTests",
        "id": "_completeTests0()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nRuns a batch of tests, yielding whenever an asynchronous test starts\nrunning. Tests will resume executing when such asynchronous test calls\n[done] or if it fails with an exception.\n",
        "name": "_nextBatch",
        "id": "_nextBatch0()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nRegisters that an exception was caught for the current test.\n",
        "name": "_registerException",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "testNum",
            "id": "testNum"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "e",
            "id": "e"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "trace",
            "id": "trace"
          }
        ],
        "id": "_registerException3()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nRegisters that an exception was caught for the current test.\n",
        "name": "registerException",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "e",
            "id": "e"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "trace",
            "id": "trace"
          }
        ],
        "id": "registerException2()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "\nRun [tryBody] guarded in a try-catch block. If an exception is thrown, update\nthe [_currentTest] status accordingly.\n",
        "name": "guardAsync",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "tryBody",
            "id": "tryBody"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "finallyBody",
            "id": "finallyBody"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isOptional": true,
            "kind": "param",
            "name": "testNum",
            "id": "testNum"
          }
        ],
        "id": "guardAsync3()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "Runs all queued tests, one at a time. ",
        "name": "runTests",
        "id": "runTests0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nFilter the tests. [testFilter] can be a [RegExp], a [String] or a\npredicate function. This is different to enabling/disabling tests\nin that it removes the tests completely.\n",
        "name": "filterTests",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "testFilter",
            "id": "testFilter"
          }
        ],
        "id": "filterTests1()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "name": "rerunTests",
        "id": "rerunTests0()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "Runs [callback] at the end of the event loop. ",
        "name": "_defer",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "_defer1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nUtility function that can be used to notify the test framework that an\n error was caught outside of this library.\n",
        "name": "_reportTestError",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "msg",
            "id": "msg"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "trace",
            "id": "trace"
          }
        ],
        "id": "_reportTestError2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nTemporary hack: expose old API.\nTODO(gram) remove this when WebKit tests are working with new framework\n",
        "name": "callbackDone",
        "id": "callbackDone0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "Advance to the next test case. ",
        "name": "_nextTestCase",
        "id": "_nextTestCase0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nCalled when one of the callback functions is done with all expected\ncalls.\n",
        "name": "_handleCallbackFunctionComplete",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "testNum",
            "id": "testNum"
          }
        ],
        "id": "_handleCallbackFunctionComplete1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nRegister a [tearDown] function for a test [group]. This function will\nbe called after each test in the group is run. Note that if groups\nare nested only the most locally scoped [tearDown] function will be run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test].\n",
        "name": "tearDown",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "teardownTest",
            "id": "teardownTest"
          }
        ],
        "id": "tearDown1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nRegister a [setUp] function for a test [group]. This function will\nbe called before each test in the group is run. Note that if groups\nare nested only the most locally scoped [setUp] function will be run.\n[setUp] and [tearDown] should be called within the [group] before any\ncalls to [test].\n",
        "name": "setUp",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "setupTest",
            "id": "setupTest"
          }
        ],
        "id": "setUp1()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nCreates a new named group of tests. Calls to group() or test() within the\nbody of the function passed to this will inherit this group's description.\n",
        "name": "group",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "description",
            "id": "description"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "body",
            "id": "body"
          }
        ],
        "id": "group2()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nLike [protectAsync0] but [callback] should take 2 positional arguments.\n",
        "name": "protectAsync2",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "protectAsync21()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nLike [protectAsync0] but [callback] should take 1 positional argument.\n",
        "name": "protectAsync1",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "protectAsync11()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nWraps the [callback] in a new function and returns that function. The new\nfunction will be able to handle exceptions by directing them to the correct\ntest. This is thus similar to expectAsync0. Use it to wrap any callbacks that\nmight optionally be called but may never be called during the test.\n[callback] should take 0 positional arguments (named arguments are not\nsupported).\n",
        "name": "protectAsync0",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "protectAsync01()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nWraps the [callback] in a new function and returns that function. The new\nfunction will be able to handle exceptions by directing them to the correct\ntest. This is thus similar to expectAsync0. Use it to wrap any callbacks that\nmight optionally be called but may never be called during the test.\n[callback] should take between 0 and 4 positional arguments (named arguments\nare not supported).\n",
        "name": "_protectAsync",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "_protectAsync1()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nLike [expectAsyncUntil0] but [callback] should take 2 positional arguments.\n",
        "name": "expectAsyncUntil2",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "isDone",
            "id": "isDone"
          }
        ],
        "id": "expectAsyncUntil22()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nLike [expectAsyncUntil0] but [callback] should take 1 positional argument.\n",
        "name": "expectAsyncUntil1",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "isDone",
            "id": "isDone"
          }
        ],
        "id": "expectAsyncUntil12()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nIndicate that [callback] is expected to be called until [isDone] returns\ntrue. The unittest framework check [isDone] after each callback and only\nwhen it returns true will it continue with the following test. Using\n[expectAsyncUntil0] will also ensure that errors that occur within\n[callback] are tracked and reported. [callback] should take 0 positional\narguments (named arguments are not supported).\n",
        "name": "expectAsyncUntil0",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "isDone",
            "id": "isDone"
          }
        ],
        "id": "expectAsyncUntil02()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nIndicate that [callback] is expected to be called until [isDone] returns\ntrue. The unittest framework checks [isDone] after each callback and only\nwhen it returns true will it continue with the following test. Using\n[expectAsyncUntil] will also ensure that errors that occur within\n[callback] are tracked and reported. [callback] should take between 0 and\n4 positional arguments (named arguments are not supported).\n",
        "name": "_expectAsyncUntil",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "isDone",
            "id": "isDone"
          }
        ],
        "id": "_expectAsyncUntil2()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "Like [expectAsync0] but [callback] should take 2 positional arguments. ",
        "name": "expectAsync2",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isOptional": true,
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "expectAsync22()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "Like [expectAsync0] but [callback] should take 1 positional argument. ",
        "name": "expectAsync1",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isOptional": true,
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "expectAsync12()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nIndicate that [callback] is expected to be called a [count] number of times\n(by default 1). The unittest framework will wait for the callback to run the\nspecified [count] times before it continues with the following test.  Using\n[expectAsync0] will also ensure that errors that occur within [callback] are\ntracked and reported. [callback] should take 0 positional arguments (named\narguments are not supported).\n",
        "name": "expectAsync0",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isOptional": true,
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "expectAsync02()"
      },
      {
        "returnType": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "method",
        "comment": "\nIndicate that [callback] is expected to be called a [count] number of times\n(by default 1). The unittest framework will wait for the callback to run the\nspecified [count] times before it continues with the following test.  Using\n[_expectAsync] will also ensure that errors that occur within [callback] are\ntracked and reported. [callback] should take between 0 and 4 positional\narguments (named arguments are not supported here).\n",
        "name": "_expectAsync",
        "children": [
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "param",
            "name": "callback",
            "id": "callback"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isOptional": true,
            "kind": "param",
            "name": "count",
            "id": "count"
          }
        ],
        "id": "_expectAsync2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n\n\"solo_\" means that this will be the only test that is run. All other tests\nwill be skipped. This is a convenience function to let you quickly isolate\na single test by adding \"solo_\" before it to temporarily disable all other\ntests.\n",
        "name": "solo_test",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "spec",
            "id": "spec"
          },
          {
            "ref": {
              "name": "TestFunction",
              "refId": "TestFunction"
            },
            "kind": "param",
            "name": "body",
            "id": "body"
          }
        ],
        "id": "solo_test2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\n(Deprecated) Creates a new async test case with the given description\nand body. The description will include the descriptions of any surrounding\ngroup() calls.\n",
        "name": "asyncTest",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "spec",
            "id": "spec"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "param",
            "name": "callbacks",
            "id": "callbacks"
          },
          {
            "ref": {
              "name": "TestFunction",
              "refId": "TestFunction"
            },
            "kind": "param",
            "name": "body",
            "id": "body"
          }
        ],
        "id": "asyncTest3()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\nCreates a new test case with the given description and body. The\ndescription will include the descriptions of any surrounding group()\ncalls.\n",
        "name": "test",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "spec",
            "id": "spec"
          },
          {
            "ref": {
              "name": "TestFunction",
              "refId": "TestFunction"
            },
            "kind": "param",
            "name": "body",
            "id": "body"
          }
        ],
        "id": "test2()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "comment": "\n(Deprecated) Evaluates the [function] and validates that it throws an\nexception. If [callback] is provided, then it will be invoked with the\nthrown exception. The callback may do any validation it wants. In addition,\nif it returns `false`, that also indicates an expectation failure.\n",
        "name": "expectThrow",
        "children": [
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "param",
            "name": "function",
            "id": "function"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "isOptional": true,
            "kind": "param",
            "name": "callback",
            "id": "callback"
          }
        ],
        "id": "expectThrow2()"
      },
      {
        "returnType": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "method",
        "comment": "Get the list of tests. ",
        "name": "testCases",
        "id": "testCases0()"
      },
      {
        "returnType": {
          "name": "void",
          "refId": "void"
        },
        "kind": "method",
        "name": "logMessage",
        "children": [
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "param",
            "name": "message",
            "id": "message"
          }
        ],
        "id": "logMessage1()"
      },
      {
        "returnType": {
          "name": "Configuration",
          "refId": "Configuration"
        },
        "kind": "method",
        "comment": "\nSet the [Configuration] used by the unittest library. Returns any\nprevious configuration.\nTODO: consider deprecating in favor of a setter now we have a getter.\n",
        "name": "configure",
        "children": [
          {
            "ref": {
              "name": "Configuration",
              "refId": "Configuration"
            },
            "kind": "param",
            "name": "config",
            "id": "config"
          }
        ],
        "id": "configure1()"
      },
      {
        "returnType": {
          "name": "Configuration",
          "refId": "Configuration"
        },
        "kind": "method",
        "name": "config",
        "id": "config0()"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "comment": "Get the list of tests. ",
        "name": "testCases",
        "id": "testCases"
      },
      {
        "ref": {
          "name": "Configuration",
          "refId": "Configuration"
        },
        "kind": "property",
        "name": "config",
        "id": "config"
      },
      {
        "ref": {
          "name": "Map",
          "refId": "Map"
        },
        "kind": "property",
        "name": "testState",
        "id": "testState"
      },
      {
        "ref": {
          "name": "TestCase",
          "refId": "TestCase"
        },
        "kind": "property",
        "name": "_soloTest",
        "id": "_soloTest"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "ERROR",
        "id": "ERROR"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "FAIL",
        "id": "FAIL"
      },
      {
        "ref": {
          "name": "dynamic",
          "refId": "dynamic"
        },
        "kind": "property",
        "name": "PASS",
        "id": "PASS"
      },
      {
        "ref": {
          "name": "String",
          "refId": "String"
        },
        "kind": "property",
        "name": "_uncaughtErrorMessage",
        "id": "_uncaughtErrorMessage"
      },
      {
        "ref": {
          "name": "bool",
          "refId": "bool"
        },
        "kind": "property",
        "name": "_initialized",
        "id": "_initialized"
      },
      {
        "ref": {
          "name": "int",
          "refId": "int"
        },
        "kind": "property",
        "name": "_currentTest",
        "id": "_currentTest"
      },
      {
        "ref": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "property",
        "name": "_testTeardown",
        "id": "_testTeardown"
      },
      {
        "ref": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "property",
        "name": "_testSetup",
        "id": "_testSetup"
      },
      {
        "ref": {
          "name": "Function",
          "refId": "Function"
        },
        "kind": "property",
        "name": "_testRunner",
        "id": "_testRunner"
      },
      {
        "ref": {
          "name": "List",
          "refId": "List",
          "arguments": [
            {
              "name": "TestCase",
              "refId": "TestCase"
            }
          ]
        },
        "kind": "property",
        "name": "_tests",
        "id": "_tests"
      },
      {
        "ref": {
          "name": "String",
          "refId": "String"
        },
        "kind": "property",
        "name": "groupSep",
        "id": "groupSep"
      },
      {
        "ref": {
          "name": "String",
          "refId": "String"
        },
        "kind": "property",
        "name": "_currentGroup",
        "id": "_currentGroup"
      },
      {
        "ref": {
          "name": "Configuration",
          "refId": "Configuration"
        },
        "kind": "property",
        "name": "_config",
        "id": "_config"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\ntestcase.dart: this file is sourced by unittest.dart. It defines [TestCase]\nand assumes unittest defines the type [TestFunction].\n\nSummarizes information about a single test case. ",
        "name": "TestCase",
        "children": [
          {
            "returnType": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "method",
            "name": "setUp",
            "id": "setUp0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "setUp=",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "setUp=1()"
          },
          {
            "returnType": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "method",
            "name": "tearDown",
            "id": "tearDown0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "tearDown=",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "tearDown=1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TestCase",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              },
              {
                "ref": {
                  "name": "TestFunction",
                  "refId": "TestFunction"
                },
                "kind": "param",
                "name": "test",
                "id": "test"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "callbackFunctionsOutstanding",
                "id": "callbackFunctionsOutstanding"
              }
            ],
            "id": "TestCase4()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isComplete",
            "id": "isComplete0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "run",
            "id": "run0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_complete",
            "id": "_complete0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "pass",
            "id": "pass0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "fail",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "messageText",
                "id": "messageText"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "stack",
                "id": "stack"
              }
            ],
            "id": "fail2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "error",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "messageText",
                "id": "messageText"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "isOptional": true,
                "kind": "param",
                "name": "stack",
                "id": "stack"
              }
            ],
            "id": "error2()"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "property",
            "name": "setUp",
            "id": "setUp"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "property",
            "name": "tearDown",
            "id": "tearDown"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isComplete",
            "id": "isComplete"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "description",
            "id": "description"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "property",
            "name": "_setUp",
            "id": "_setUp"
          },
          {
            "ref": {
              "name": "Function",
              "refId": "Function"
            },
            "kind": "property",
            "name": "_tearDown",
            "id": "_tearDown"
          },
          {
            "ref": {
              "name": "TestFunction",
              "refId": "TestFunction"
            },
            "kind": "property",
            "name": "test",
            "id": "test"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "callbackFunctionsOutstanding",
            "id": "callbackFunctionsOutstanding"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "message",
            "id": "message"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "result",
            "id": "result"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "stackTrace",
            "id": "stackTrace"
          },
          {
            "ref": {
              "name": "String",
              "refId": "String"
            },
            "kind": "property",
            "name": "currentGroup",
            "id": "currentGroup"
          },
          {
            "ref": {
              "name": "DateTime",
              "refId": "DateTime"
            },
            "kind": "property",
            "name": "startTime",
            "id": "startTime"
          },
          {
            "ref": {
              "name": "Duration",
              "refId": "Duration"
            },
            "kind": "property",
            "name": "runningTime",
            "id": "runningTime"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "enabled",
            "id": "enabled"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_doneTeardown",
            "id": "_doneTeardown"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TestCase",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "description",
                "id": "description"
              },
              {
                "ref": {
                  "name": "TestFunction",
                  "refId": "TestFunction"
                },
                "kind": "param",
                "name": "test",
                "id": "test"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "callbackFunctionsOutstanding",
                "id": "callbackFunctionsOutstanding"
              }
            ],
            "id": "TestCase4()"
          }
        ],
        "id": "TestCase"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nHooks to configure the unittest library for different platforms. This class\nimplements the API in a platform-independent way. Tests that want to take\nadvantage of the platform can create a subclass and override methods from\nthis class.\n",
        "name": "Configuration",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nSubclasses can override this with something useful for diagnostics.\nParticularly useful in cases where we have parent/child configurations\nsuch as layout tests.\n",
            "name": "name",
            "id": "name0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nIf true, then tests are started automatically (otherwise [runTests]\nmust be called explicitly after the tests are set up.\n",
            "name": "autoStart",
            "id": "autoStart0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled as soon as the unittest framework becomes initialized. This is done\neven before tests are added to the test framework. It might be used to\ndetermine/debug errors that occur before the test harness starts executing.\nIt is also used to tell the vm or browser that tests are going to be run\nasynchronously and that the process should wait until they are done.\n",
            "name": "onInit",
            "id": "onInit0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Called as soon as the unittest framework starts running. ",
            "name": "onStart",
            "id": "onStart0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled when each test starts. Useful to show intermediate progress on\na test suite.\n",
            "name": "onTestStart",
            "children": [
              {
                "ref": {
                  "name": "TestCase",
                  "refId": "TestCase"
                },
                "kind": "param",
                "name": "testCase",
                "id": "testCase"
              }
            ],
            "id": "onTestStart1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled when each test is completed. Useful to show intermediate progress on\na test suite.\n",
            "name": "onTestResult",
            "children": [
              {
                "ref": {
                  "name": "TestCase",
                  "refId": "TestCase"
                },
                "kind": "param",
                "name": "testCase",
                "id": "testCase"
              }
            ],
            "id": "onTestResult1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCan be called by tests to log status. Tests should use this\ninstead of print. Subclasses should not override this; they\nshould instead override logMessage which is passed the test case.\n",
            "name": "logMessage",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "logMessage1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nHandles the logging of messages by a test case. The default in\nthis base configuration is to call print();\n",
            "name": "logTestCaseMessage",
            "children": [
              {
                "ref": {
                  "name": "TestCase",
                  "refId": "TestCase"
                },
                "kind": "param",
                "name": "testCase",
                "id": "testCase"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "logTestCaseMessage2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled with the result of all test cases. The default implementation prints\nthe result summary using the built-in [print] command. Browser tests\ncommonly override this to reformat the output.\n\nWhen [uncaughtError] is not null, it contains an error that occured outside\nof tests (e.g. setting up the test).\n",
            "name": "onSummary",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "passed",
                "id": "passed"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "failed",
                "id": "failed"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "errors",
                "id": "errors"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "TestCase",
                      "refId": "TestCase"
                    }
                  ]
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "uncaughtError",
                "id": "uncaughtError"
              }
            ],
            "id": "onSummary5()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled when the unittest framework is done running. [success] indicates\nwhether all tests passed successfully.\n",
            "name": "onDone",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "success",
                "id": "success"
              }
            ],
            "id": "onDone1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "_indent",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "str",
                "id": "str"
              }
            ],
            "id": "_indent1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Handle errors that happen outside the tests. ",
            "name": "handleExternalError",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "handleExternalError2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSend messages to the test controller code (see 'test_controller.js'). This\nis only needed to support browser tests with dart2js. Note: we could wrap\ntests and send the appropriate messages to the controller through the\nwrapper, but using wrappers has a noticeable overhead in the testing bots,\nso we use this approach instead.\n\nConfigurations that will not run in DRT (such as vm_config and\ncompact_vm_config), can safely override this method to avoid printing extra\nmesages in the console.\n",
            "name": "notifyController",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "notifyController1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "_postMessage",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "message",
                "id": "message"
              }
            ],
            "id": "_postMessage1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "comment": "\nSubclasses can override this with something useful for diagnostics.\nParticularly useful in cases where we have parent/child configurations\nsuch as layout tests.\n",
            "name": "name",
            "id": "name"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "comment": "\nIf true, then tests are started automatically (otherwise [runTests]\nmust be called explicitly after the tests are set up.\n",
            "name": "autoStart",
            "id": "autoStart"
          },
          {
            "ref": {
              "name": "ReceivePort",
              "refId": "ReceivePort"
            },
            "kind": "property",
            "name": "_receivePort",
            "id": "_receivePort"
          },
          {
            "ref": {
              "name": "TestCase",
              "refId": "TestCase"
            },
            "kind": "property",
            "name": "currentTestCase",
            "id": "currentTestCase"
          }
        ],
        "id": "Configuration"
      },
      {
        "kind": "typedef",
        "comment": "Signature for a test function. ",
        "name": "TestFunction",
        "id": "TestFunction"
      }
    ],
    "id": "package:unittest/unittest.dart"
  }
]